
projet_3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a600  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  0800a790  0800a790  0001a790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb40  0800bb40  000209b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb40  0800bb40  0001bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb48  0800bb48  000209b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb48  0800bb48  0001bb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb4c  0800bb4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b0  20000000  0800bb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  200009b0  0800c500  000209b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  0800c500  00021d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002057b  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004051  00000000  00000000  00040f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001908  00000000  00000000  00044fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f0  00000000  00000000  000468b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000266d4  00000000  00000000  00047fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001749a  00000000  00000000  0006e67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0131  00000000  00000000  00085b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000774c  00000000  00000000  00165cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009b0 	.word	0x200009b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a778 	.word	0x0800a778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009b4 	.word	0x200009b4
 80001cc:	0800a778 	.word	0x0800a778

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ebe:	4b50      	ldr	r3, [pc, #320]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ec0:	4a50      	ldr	r2, [pc, #320]	; (8001004 <MX_ADC1_Init+0x15c>)
 8000ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eca:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ed6:	4b4a      	ldr	r3, [pc, #296]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000edc:	4b48      	ldr	r3, [pc, #288]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee2:	4b47      	ldr	r3, [pc, #284]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee8:	4b45      	ldr	r3, [pc, #276]	; (8001000 <MX_ADC1_Init+0x158>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000eee:	4b44      	ldr	r3, [pc, #272]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ef0:	2206      	movs	r2, #6
 8000ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef4:	4b42      	ldr	r3, [pc, #264]	; (8001000 <MX_ADC1_Init+0x158>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000efc:	4b40      	ldr	r3, [pc, #256]	; (8001000 <MX_ADC1_Init+0x158>)
 8000efe:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f04:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f22:	4837      	ldr	r0, [pc, #220]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f24:	f002 fb2c 	bl	8003580 <HAL_ADC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f2e:	f000 fed5 	bl	8001cdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <MX_ADC1_Init+0x160>)
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f36:	2306      	movs	r3, #6
 8000f38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f3e:	237f      	movs	r3, #127	; 0x7f
 8000f40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f42:	2304      	movs	r3, #4
 8000f44:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482c      	ldr	r0, [pc, #176]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f50:	f002 fcea 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f5a:	f000 febf 	bl	8001cdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_ADC1_Init+0x164>)
 8000f60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f62:	230c      	movs	r3, #12
 8000f64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4825      	ldr	r0, [pc, #148]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f6c:	f002 fcdc 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f76:	f000 feb1 	bl	8001cdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_ADC1_Init+0x168>)
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	481e      	ldr	r0, [pc, #120]	; (8001000 <MX_ADC1_Init+0x158>)
 8000f88:	f002 fcce 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000f92:	f000 fea3 	bl	8001cdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC1_Init+0x16c>)
 8000f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f9a:	2318      	movs	r3, #24
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4816      	ldr	r0, [pc, #88]	; (8001000 <MX_ADC1_Init+0x158>)
 8000fa8:	f002 fcbe 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000fb2:	f000 fe93 	bl	8001cdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_ADC1_Init+0x170>)
 8000fb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_ADC1_Init+0x158>)
 8000fca:	f002 fcad 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000fd4:	f000 fe82 	bl	8001cdc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_ADC1_Init+0x174>)
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000fdc:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000fe0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0x158>)
 8000fe8:	f002 fc9e 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000ff2:	f000 fe73 	bl	8001cdc <Error_Handler>
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000e00 	.word	0x20000e00
 8001004:	50040000 	.word	0x50040000
 8001008:	21800100 	.word	0x21800100
 800100c:	14f00020 	.word	0x14f00020
 8001010:	19200040 	.word	0x19200040
 8001014:	2e300800 	.word	0x2e300800
 8001018:	32601000 	.word	0x32601000
 800101c:	3ef08000 	.word	0x3ef08000

08001020 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_ADC_MspInit+0xfc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d168      	bne.n	8001114 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a36      	ldr	r2, [pc, #216]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_ADC_MspInit+0x100>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a30      	ldr	r2, [pc, #192]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_ADC_MspInit+0x100>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
 800108a:	23cb      	movs	r3, #203	; 0xcb
 800108c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800108e:	230b      	movs	r3, #11
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f003 feba 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010a8:	230b      	movs	r3, #11
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	481b      	ldr	r0, [pc, #108]	; (8001124 <HAL_ADC_MspInit+0x104>)
 80010b8:	f003 feae 	bl	8004e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010be:	4a1b      	ldr	r2, [pc, #108]	; (800112c <HAL_ADC_MspInit+0x10c>)
 80010c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010ec:	2220      	movs	r2, #32
 80010ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_ADC_MspInit+0x108>)
 80010fa:	f003 fc95 	bl	8004a28 <HAL_DMA_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8001104:	f000 fdea 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_ADC_MspInit+0x108>)
 800110c:	64da      	str	r2, [r3, #76]	; 0x4c
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_ADC_MspInit+0x108>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	50040000 	.word	0x50040000
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400
 8001128:	20000e64 	.word	0x20000e64
 800112c:	40020008 	.word	0x40020008

08001130 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2224      	movs	r2, #36	; 0x24
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f006 fdc7 	bl	8007cd0 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_DAC1_Init+0x74>)
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <MX_DAC1_Init+0x78>)
 8001146:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <MX_DAC1_Init+0x74>)
 800114a:	f003 f9ca 	bl	80044e2 <HAL_DAC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001154:	f000 fdc2 	bl	8001cdc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800115c:	2324      	movs	r3, #36	; 0x24
 800115e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_DAC1_Init+0x74>)
 8001174:	f003 fab4 	bl	80046e0 <HAL_DAC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 fdad 	bl	8001cdc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2210      	movs	r2, #16
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_DAC1_Init+0x74>)
 800118e:	f003 faa7 	bl	80046e0 <HAL_DAC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001198:	f000 fda0 	bl	8001cdc <Error_Handler>
  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000eac 	.word	0x20000eac
 80011a8:	40007400 	.word	0x40007400

080011ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <HAL_DAC_MspInit+0x124>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d17c      	bne.n	80012c8 <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_DAC_MspInit+0x128>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	4a40      	ldr	r2, [pc, #256]	; (80012d4 <HAL_DAC_MspInit+0x128>)
 80011d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011d8:	6593      	str	r3, [r2, #88]	; 0x58
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <HAL_DAC_MspInit+0x128>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <HAL_DAC_MspInit+0x128>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <HAL_DAC_MspInit+0x128>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_DAC_MspInit+0x128>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	2330      	movs	r3, #48	; 0x30
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f003 fe00 	bl	8004e18 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 800121a:	4a30      	ldr	r2, [pc, #192]	; (80012dc <HAL_DAC_MspInit+0x130>)
 800121c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001220:	2206      	movs	r2, #6
 8001222:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001226:	2210      	movs	r2, #16
 8001228:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001244:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001248:	2220      	movs	r2, #32
 800124a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 800124e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001256:	f003 fbe7 	bl	8004a28 <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001260:	f000 fd3c 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <HAL_DAC_MspInit+0x12c>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_DAC_MspInit+0x138>)
 8001274:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 8001278:	2205      	movs	r2, #5
 800127a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 800127e:	2210      	movs	r2, #16
 8001280:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 80012a0:	2220      	movs	r2, #32
 80012a2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 80012a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 80012ae:	f003 fbbb 	bl	8004a28 <HAL_DMA_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80012b8:	f000 fd10 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_DAC_MspInit+0x134>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40007400 	.word	0x40007400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	20000ec0 	.word	0x20000ec0
 80012dc:	40020030 	.word	0x40020030
 80012e0:	20000f08 	.word	0x20000f08
 80012e4:	40020044 	.word	0x40020044

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_DMA_Init+0x68>)
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <MX_DMA_Init+0x68>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6493      	str	r3, [r2, #72]	; 0x48
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_DMA_Init+0x68>)
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	200b      	movs	r0, #11
 800130c:	f003 f8b3 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001310:	200b      	movs	r0, #11
 8001312:	f003 f8cc 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200d      	movs	r0, #13
 800131c:	f003 f8ab 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001320:	200d      	movs	r0, #13
 8001322:	f003 f8c4 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200e      	movs	r0, #14
 800132c:	f003 f8a3 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001330:	200e      	movs	r0, #14
 8001332:	f003 f8bc 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2010      	movs	r0, #16
 800133c:	f003 f89b 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001340:	2010      	movs	r0, #16
 8001342:	f003 f8b4 	bl	80044ae <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <get_note_frequency>:
extern uint8_t note_index;
extern ADC_HandleTypeDef hadc1;
extern DAC_HandleTypeDef hdac1;
extern uint8_t start_dsp;

float get_note_frequency(uint8_t desired_note_index){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	return note[desired_note_index] ;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <get_note_frequency+0x28>)
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	0800a95c 	.word	0x0800a95c

08001380 <changePitch>:


void changePitch(uint8_t desired_note_index){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	float desired_frequency = get_note_frequency(desired_note_index) * num_ech;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ffe1 	bl	8001354 <get_note_frequency>
 8001392:	eeb0 7a40 	vmov.f32	s14, s0
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <changePitch+0x58>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a0:	edc7 7a03 	vstr	s15, [r7, #12]
	//Calcul du Counter Period de TIM6

	TIM2->ARR = (int)(timer_clock/desired_frequency -1);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <changePitch+0x5c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c8:	ee17 2a90 	vmov	r2, s15
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000640 	.word	0x20000640
 80013dc:	20000644 	.word	0x20000644

080013e0 <dsp_init>:

void dsp_init(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af02      	add	r7, sp, #8
	HAL_ADC_Start_DMA(&hadc1 , (uint32_t *) adc_buffer, ADC_BUFFER_SIZE);
 80013e6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <dsp_init+0x40>)
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <dsp_init+0x44>)
 80013ee:	f002 fa0d 	bl	800380c <HAL_ADC_Start_DMA>
	//  HAL_Delay(1);
	HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1 , (uint32_t *) dac_buffer_1, DAC_BUFFER_1_SIZE, DAC_ALIGN_12B_R);
 80013f2:	2300      	movs	r3, #0
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	23c8      	movs	r3, #200	; 0xc8
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <dsp_init+0x48>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <dsp_init+0x4c>)
 80013fe:	f003 f893 	bl	8004528 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2 , (uint32_t *) dac_buffer_2, DAC_BUFFER_2_SIZE, DAC_ALIGN_12B_R);
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	23c8      	movs	r3, #200	; 0xc8
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <dsp_init+0x50>)
 800140a:	2110      	movs	r1, #16
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <dsp_init+0x4c>)
 800140e:	f003 f88b 	bl	8004528 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001412:	4808      	ldr	r0, [pc, #32]	; (8001434 <dsp_init+0x54>)
 8001414:	f005 fd74 	bl	8006f00 <HAL_TIM_Base_Start>
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20001284 	.word	0x20001284
 8001424:	20000e00 	.word	0x20000e00
 8001428:	20000f50 	.word	0x20000f50
 800142c:	20000eac 	.word	0x20000eac
 8001430:	200010ec 	.word	0x200010ec
 8001434:	20001c80 	.word	0x20001c80

08001438 <processDSP>:

void processDSP(){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
	__NOP();
 800143e:	bf00      	nop

	//Get pitch from CV0 & CV1 input
	int16_t CV0_average =0;
 8001440:	2300      	movs	r3, #0
 8001442:	81fb      	strh	r3, [r7, #14]
	int16_t CV1_average =0;
 8001444:	2300      	movs	r3, #0
 8001446:	81bb      	strh	r3, [r7, #12]
	int16_t CV2_average =0;
 8001448:	2300      	movs	r3, #0
 800144a:	817b      	strh	r3, [r7, #10]
	for(uint8_t i=0;i!=10;i++){
 800144c:	2300      	movs	r3, #0
 800144e:	727b      	strb	r3, [r7, #9]
 8001450:	e029      	b.n	80014a6 <processDSP+0x6e>
		CV0_average +=adc_buffer[6*i+1];
 8001452:	7a7a      	ldrb	r2, [r7, #9]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	3301      	adds	r3, #1
 800145e:	4ab4      	ldr	r2, [pc, #720]	; (8001730 <processDSP+0x2f8>)
 8001460:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	4413      	add	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	81fb      	strh	r3, [r7, #14]
		CV1_average +=adc_buffer[6*i+2];
 800146c:	7a7a      	ldrb	r2, [r7, #9]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	3302      	adds	r3, #2
 8001478:	4aad      	ldr	r2, [pc, #692]	; (8001730 <processDSP+0x2f8>)
 800147a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800147e:	89bb      	ldrh	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	81bb      	strh	r3, [r7, #12]
		CV2_average +=adc_buffer[6*i+3];
 8001486:	7a7a      	ldrb	r2, [r7, #9]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	3303      	adds	r3, #3
 8001492:	4aa7      	ldr	r2, [pc, #668]	; (8001730 <processDSP+0x2f8>)
 8001494:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001498:	897b      	ldrh	r3, [r7, #10]
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	817b      	strh	r3, [r7, #10]
	for(uint8_t i=0;i!=10;i++){
 80014a0:	7a7b      	ldrb	r3, [r7, #9]
 80014a2:	3301      	adds	r3, #1
 80014a4:	727b      	strb	r3, [r7, #9]
 80014a6:	7a7b      	ldrb	r3, [r7, #9]
 80014a8:	2b0a      	cmp	r3, #10
 80014aa:	d1d2      	bne.n	8001452 <processDSP+0x1a>
	}

	//Get average
	CV0_average = CV0_average/10;
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	4aa0      	ldr	r2, [pc, #640]	; (8001734 <processDSP+0x2fc>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	1092      	asrs	r2, r2, #2
 80014b8:	17db      	asrs	r3, r3, #31
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	81fb      	strh	r3, [r7, #14]
	CV1_average = CV1_average/10;
 80014be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014c2:	4a9c      	ldr	r2, [pc, #624]	; (8001734 <processDSP+0x2fc>)
 80014c4:	fb82 1203 	smull	r1, r2, r2, r3
 80014c8:	1092      	asrs	r2, r2, #2
 80014ca:	17db      	asrs	r3, r3, #31
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	81bb      	strh	r3, [r7, #12]
	CV2_average = CV2_average/10;
 80014d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014d4:	4a97      	ldr	r2, [pc, #604]	; (8001734 <processDSP+0x2fc>)
 80014d6:	fb82 1203 	smull	r1, r2, r2, r3
 80014da:	1092      	asrs	r2, r2, #2
 80014dc:	17db      	asrs	r3, r3, #31
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	817b      	strh	r3, [r7, #10]

	//Convert from 0->3.3V (0->4096) to -10 +10 (-2048->2048)input
	CV0_average = CV0_average - 2048;
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	81fb      	strh	r3, [r7, #14]
	CV1_average = CV1_average - 2048;
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	81bb      	strh	r3, [r7, #12]
	CV2_average = CV2_average - 2048;
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	817b      	strh	r3, [r7, #10]
	//CVx value between -10 to 10 (integer)
	CV0_average = CV0_average *(10/2048);
 8001500:	2300      	movs	r3, #0
 8001502:	81fb      	strh	r3, [r7, #14]
	CV1_average = CV1_average *(10/2048);
 8001504:	2300      	movs	r3, #0
 8001506:	81bb      	strh	r3, [r7, #12]
	CV2_average = CV2_average *(10/2048);
 8001508:	2300      	movs	r3, #0
 800150a:	817b      	strh	r3, [r7, #10]

	//Change pitch
	note_index = note_index + 12*CV0_average;
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b87      	ldr	r3, [pc, #540]	; (8001738 <processDSP+0x300>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <processDSP+0x300>)
 8001524:	701a      	strb	r2, [r3, #0]
	if(note_index < 0){
		note_index = 0;
	}
	if(note_index >95){
 8001526:	4b84      	ldr	r3, [pc, #528]	; (8001738 <processDSP+0x300>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b5f      	cmp	r3, #95	; 0x5f
 800152c:	d902      	bls.n	8001534 <processDSP+0xfc>
		note_index = 95;
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <processDSP+0x300>)
 8001530:	225f      	movs	r2, #95	; 0x5f
 8001532:	701a      	strb	r2, [r3, #0]
	}
	changePitch(note_index);
 8001534:	4b80      	ldr	r3, [pc, #512]	; (8001738 <processDSP+0x300>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff21 	bl	8001380 <changePitch>

	//Change x and y
	x= x + CV1_average/10;
 800153e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001542:	4a7c      	ldr	r2, [pc, #496]	; (8001734 <processDSP+0x2fc>)
 8001544:	fb82 1203 	smull	r1, r2, r2, r3
 8001548:	1092      	asrs	r2, r2, #2
 800154a:	17db      	asrs	r3, r3, #31
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b21b      	sxth	r3, r3
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001558:	4b78      	ldr	r3, [pc, #480]	; (800173c <processDSP+0x304>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <processDSP+0x304>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
	y= y + CV2_average/10;
 8001568:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800156c:	4a71      	ldr	r2, [pc, #452]	; (8001734 <processDSP+0x2fc>)
 800156e:	fb82 1203 	smull	r1, r2, r2, r3
 8001572:	1092      	asrs	r2, r2, #2
 8001574:	17db      	asrs	r3, r3, #31
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b21b      	sxth	r3, r3
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001582:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <processDSP+0x308>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158c:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <processDSP+0x308>)
 800158e:	edc3 7a00 	vstr	s15, [r3]

	if(x <0){x =0;}
 8001592:	4b6a      	ldr	r3, [pc, #424]	; (800173c <processDSP+0x304>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d503      	bpl.n	80015aa <processDSP+0x172>
 80015a2:	4b66      	ldr	r3, [pc, #408]	; (800173c <processDSP+0x304>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
	if(x >1){x =1;}
 80015aa:	4b64      	ldr	r3, [pc, #400]	; (800173c <processDSP+0x304>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	dd03      	ble.n	80015c6 <processDSP+0x18e>
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <processDSP+0x304>)
 80015c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015c4:	601a      	str	r2, [r3, #0]
	if(y <0){y =0;}
 80015c6:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <processDSP+0x308>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	d503      	bpl.n	80015de <processDSP+0x1a6>
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <processDSP+0x308>)
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
	if(y >1){y =1;}
 80015de:	4b58      	ldr	r3, [pc, #352]	; (8001740 <processDSP+0x308>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f0:	dd03      	ble.n	80015fa <processDSP+0x1c2>
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <processDSP+0x308>)
 80015f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f8:	601a      	str	r2, [r3, #0]

	//Get amplitude of wave
	sin_amplitude = (1-x)*(1-y);
 80015fa:	4b50      	ldr	r3, [pc, #320]	; (800173c <processDSP+0x304>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <processDSP+0x308>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001612:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <processDSP+0x30c>)
 800161c:	edc3 7a00 	vstr	s15, [r3]
	triangle_amplitude = x*(1-y);
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <processDSP+0x308>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800162a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <processDSP+0x304>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <processDSP+0x310>)
 800163a:	edc3 7a00 	vstr	s15, [r3]
	square_amplitude = (1-x)*y;
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <processDSP+0x304>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164c:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <processDSP+0x308>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <processDSP+0x314>)
 8001658:	edc3 7a00 	vstr	s15, [r3]
	saw_amplitude = x*y;
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <processDSP+0x304>)
 800165e:	ed93 7a00 	vldr	s14, [r3]
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <processDSP+0x308>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <processDSP+0x318>)
 800166e:	edc3 7a00 	vstr	s15, [r3]

	//For DAC 2 (OUT_1)
	for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
 8001672:	2300      	movs	r3, #0
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	e053      	b.n	8001720 <processDSP+0x2e8>
		out_buffer_2_ptr[i] = sin_amplitude*in_buffer_ptr_1[i] + triangle_amplitude*in_buffer_ptr_2[i]+ square_amplitude*in_buffer_ptr_3[i]+in_buffer_ptr_4[i]*saw_amplitude;
 8001678:	4b36      	ldr	r3, [pc, #216]	; (8001754 <processDSP+0x31c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <processDSP+0x30c>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <processDSP+0x320>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <processDSP+0x310>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <processDSP+0x324>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <processDSP+0x314>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <processDSP+0x328>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <processDSP+0x318>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <processDSP+0x32c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001712:	ee17 2a90 	vmov	r2, s15
 8001716:	b292      	uxth	r2, r2
 8001718:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	3301      	adds	r3, #1
 800171e:	80fb      	strh	r3, [r7, #6]
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d1a8      	bne.n	8001678 <processDSP+0x240>
	//For DAC 1 (OUT_2)
	/*for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
		out_buffer_2_ptr[i] = in_buffer_ptr_1[6*i];
		out_buffer_2_ptr[i] = in_buffer_ptr_1[i];
	}*/
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20001284 	.word	0x20001284
 8001734:	66666667 	.word	0x66666667
 8001738:	200009dc 	.word	0x200009dc
 800173c:	200009e0 	.word	0x200009e0
 8001740:	200009e4 	.word	0x200009e4
 8001744:	200009cc 	.word	0x200009cc
 8001748:	200009d0 	.word	0x200009d0
 800174c:	200009d4 	.word	0x200009d4
 8001750:	200009d8 	.word	0x200009d8
 8001754:	2000127c 	.word	0x2000127c
 8001758:	200010e4 	.word	0x200010e4
 800175c:	20001be8 	.word	0x20001be8
 8001760:	20001be4 	.word	0x20001be4
 8001764:	200010e8 	.word	0x200010e8

08001768 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	__NOP();
 8001770:	bf00      	nop
	//First half ot the buffer is full
	in_buffer_ptr_adc =  &adc_buffer[0];
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8001776:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_1 =  &sin_wave[0];
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_ADC_ConvHalfCpltCallback+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_2 =  &triangle_wave[0];
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001780:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001782:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_3 =  &square_wave[0];
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001788:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_4 =  &sawtooth_wave[0];
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800178e:	601a      	str	r2, [r3, #0]
	out_buffer_1_ptr = &dac_buffer_1[DAC_BUFFER_1_HALF_SIZE];
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8001794:	601a      	str	r2, [r3, #0]
	out_buffer_2_ptr = &dac_buffer_2[DAC_BUFFER_2_HALF_SIZE];
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 800179a:	601a      	str	r2, [r3, #0]
	start_dsp = 1;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20001280 	.word	0x20001280
 80017b4:	20001284 	.word	0x20001284
 80017b8:	2000127c 	.word	0x2000127c
 80017bc:	20000000 	.word	0x20000000
 80017c0:	200010e4 	.word	0x200010e4
 80017c4:	20000190 	.word	0x20000190
 80017c8:	20001be8 	.word	0x20001be8
 80017cc:	20000320 	.word	0x20000320
 80017d0:	20001be4 	.word	0x20001be4
 80017d4:	200004b0 	.word	0x200004b0
 80017d8:	200010e0 	.word	0x200010e0
 80017dc:	20001018 	.word	0x20001018
 80017e0:	200010e8 	.word	0x200010e8
 80017e4:	200011b4 	.word	0x200011b4
 80017e8:	200009dd 	.word	0x200009dd

080017ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	__NOP();
 80017f4:	bf00      	nop
	//The buffer is now full
	in_buffer_ptr_adc = &adc_buffer[ADC_BUFFER_HALF_SIZE];
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_ADC_ConvCpltCallback+0x48>)
 80017f8:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_ADC_ConvCpltCallback+0x4c>)
 80017fa:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_1 = &sin_wave[100];
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_ADC_ConvCpltCallback+0x50>)
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_ADC_ConvCpltCallback+0x54>)
 8001800:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_2 =  &triangle_wave[100];
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_ADC_ConvCpltCallback+0x58>)
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001806:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_3 =  &square_wave[100];
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_ADC_ConvCpltCallback+0x60>)
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_ADC_ConvCpltCallback+0x64>)
 800180c:	601a      	str	r2, [r3, #0]
	in_buffer_ptr_4 =  &sawtooth_wave[100];
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_ADC_ConvCpltCallback+0x68>)
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001812:	601a      	str	r2, [r3, #0]
	out_buffer_1_ptr = &dac_buffer_1[0];
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_ADC_ConvCpltCallback+0x70>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_ADC_ConvCpltCallback+0x74>)
 8001818:	601a      	str	r2, [r3, #0]
	out_buffer_2_ptr = &dac_buffer_2[0];
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_ADC_ConvCpltCallback+0x78>)
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <HAL_ADC_ConvCpltCallback+0x7c>)
 800181e:	601a      	str	r2, [r3, #0]
	start_dsp = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_ADC_ConvCpltCallback+0x80>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20001280 	.word	0x20001280
 8001838:	20001734 	.word	0x20001734
 800183c:	2000127c 	.word	0x2000127c
 8001840:	200000c8 	.word	0x200000c8
 8001844:	200010e4 	.word	0x200010e4
 8001848:	20000258 	.word	0x20000258
 800184c:	20001be8 	.word	0x20001be8
 8001850:	200003e8 	.word	0x200003e8
 8001854:	20001be4 	.word	0x20001be4
 8001858:	20000578 	.word	0x20000578
 800185c:	200010e0 	.word	0x200010e0
 8001860:	20000f50 	.word	0x20000f50
 8001864:	200010e8 	.word	0x200010e8
 8001868:	200010ec 	.word	0x200010ec
 800186c:	200009dd 	.word	0x200009dd

08001870 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <MX_GPIO_Init+0xf8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a37      	ldr	r2, [pc, #220]	; (8001968 <MX_GPIO_Init+0xf8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <MX_GPIO_Init+0xf8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <MX_GPIO_Init+0xf8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <MX_GPIO_Init+0xf8>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <MX_GPIO_Init+0xf8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <MX_GPIO_Init+0xf8>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <MX_GPIO_Init+0xf8>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <MX_GPIO_Init+0xf8>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2108      	movs	r1, #8
 80018d2:	4826      	ldr	r0, [pc, #152]	; (800196c <MX_GPIO_Init+0xfc>)
 80018d4:	f003 fc22 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018d8:	2302      	movs	r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <MX_GPIO_Init+0x100>)
 80018de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	4820      	ldr	r0, [pc, #128]	; (800196c <MX_GPIO_Init+0xfc>)
 80018ec:	f003 fa94 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_SWITCH_Pin;
 80018f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_GPIO_Init+0x104>)
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4619      	mov	r1, r3
 8001904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001908:	f003 fa86 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800190c:	2308      	movs	r3, #8
 800190e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <MX_GPIO_Init+0xfc>)
 8001924:	f003 fa78 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_CH_A_Pin;
 8001928:	2340      	movs	r3, #64	; 0x40
 800192a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_CH_A_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4619      	mov	r1, r3
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_GPIO_Init+0xfc>)
 800193c:	f003 fa6c 	bl	8004e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2007      	movs	r0, #7
 8001946:	f002 fd96 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800194a:	2007      	movs	r0, #7
 800194c:	f002 fdaf 	bl	80044ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2101      	movs	r1, #1
 8001954:	2017      	movs	r0, #23
 8001956:	f002 fd8e 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800195a:	2017      	movs	r0, #23
 800195c:	f002 fda7 	bl	80044ae <HAL_NVIC_EnableIRQ>

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	48000400 	.word	0x48000400
 8001970:	10210000 	.word	0x10210000
 8001974:	10110000 	.word	0x10110000

08001978 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_I2C1_Init+0x7c>)
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <MX_I2C1_Init+0x80>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_I2C1_Init+0x7c>)
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <MX_I2C1_Init+0x84>)
 8001986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_I2C1_Init+0x7c>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_I2C1_Init+0x7c>)
 8001990:	2201      	movs	r2, #1
 8001992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_I2C1_Init+0x7c>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_I2C1_Init+0x7c>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_I2C1_Init+0x7c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_I2C1_Init+0x7c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C1_Init+0x7c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <MX_I2C1_Init+0x7c>)
 80019b4:	f003 fbe2 	bl	800517c <HAL_I2C_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019be:	f000 f98d 	bl	8001cdc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019c2:	2100      	movs	r1, #0
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <MX_I2C1_Init+0x7c>)
 80019c6:	f004 f801 	bl	80059cc <HAL_I2CEx_ConfigAnalogFilter>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019d0:	f000 f984 	bl	8001cdc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019d4:	2100      	movs	r1, #0
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_I2C1_Init+0x7c>)
 80019d8:	f004 f843 	bl	8005a62 <HAL_I2CEx_ConfigDigitalFilter>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019e2:	f000 f97b 	bl	8001cdc <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80019e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80019ea:	f004 f887 	bl	8005afc <HAL_I2CEx_EnableFastModePlus>

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20001c34 	.word	0x20001c34
 80019f8:	40005400 	.word	0x40005400
 80019fc:	00300f33 	.word	0x00300f33

08001a00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <HAL_I2C_MspInit+0xe4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d15b      	bne.n	8001ada <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_I2C_MspInit+0xe8>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_I2C_MspInit+0xe8>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_I2C_MspInit+0xe8>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f003 f9dd 	bl	8004e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_I2C_MspInit+0xe8>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_I2C_MspInit+0xe8>)
 8001a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_I2C_MspInit+0xe8>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a78:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_I2C_MspInit+0xf0>)
 8001a7a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a7e:	2203      	movs	r2, #3
 8001a80:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a84:	2210      	movs	r2, #16
 8001a86:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001aae:	480f      	ldr	r0, [pc, #60]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001ab0:	f002 ffba 	bl	8004a28 <HAL_DMA_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_MspInit+0xbe>
    {
      Error_Handler();
 8001aba:	f000 f90f 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac4:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_I2C_MspInit+0xec>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201f      	movs	r0, #31
 8001ad0:	f002 fcd1 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ad4:	201f      	movs	r0, #31
 8001ad6:	f002 fcea 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	20001bec 	.word	0x20001bec
 8001af0:	4002006c 	.word	0x4002006c

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af8:	f001 fae3 	bl	80030c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 f836 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b00:	f7ff feb6 	bl	8001870 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b04:	f7ff fbf0 	bl	80012e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b08:	f001 fa2e 	bl	8002f68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b0c:	f7ff ff34 	bl	8001978 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b10:	f7ff f9ca 	bl	8000ea8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001b14:	f7ff fb0c 	bl	8001130 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001b18:	f001 f9ba 	bl	8002e90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  dsp_init();
 8001b1c:	f7ff fc60 	bl	80013e0 <dsp_init>
  changePitch(note_index);
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <main+0x68>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fc2b 	bl	8001380 <changePitch>

	if(init_menu()){
 8001b2a:	f000 f8db 	bl	8001ce4 <init_menu>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <main+0x48>
		printf(" <-- Eurorack --> \r\n");
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <main+0x6c>)
 8001b36:	f006 fda3 	bl	8008680 <puts>
 8001b3a:	e002      	b.n	8001b42 <main+0x4e>
	}else{
		printf(" PB with LCD \r\n");
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <main+0x70>)
 8001b3e:	f006 fd9f 	bl	8008680 <puts>
	}

	set_home_menu();
 8001b42:	f000 f907 	bl	8001d54 <set_home_menu>
	  //printf("%ld %ld %ld\r\n", value[0],value[1],value[2]);

		  /*for (int i=0; i!= 512;i++){
			  printf("%u\r\n", adc_buffer[6*i+1]);
		  }*/
	  if(start_dsp){
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <main+0x74>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <main+0x64>
		  start_dsp = 0;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <main+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
		  processDSP();
 8001b54:	f7ff fc70 	bl	8001438 <processDSP>
	  }

	  __NOP();
 8001b58:	bf00      	nop
	  if(start_dsp){
 8001b5a:	e7f4      	b.n	8001b46 <main+0x52>
 8001b5c:	200009dc 	.word	0x200009dc
 8001b60:	0800a790 	.word	0x0800a790
 8001b64:	0800a7a4 	.word	0x0800a7a4
 8001b68:	200009dd 	.word	0x200009dd

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0ac      	sub	sp, #176	; 0xb0
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b76:	2244      	movs	r2, #68	; 0x44
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 f8a8 	bl	8007cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2254      	movs	r2, #84	; 0x54
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 f89a 	bl	8007cd0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b9c:	f003 ffce 	bl	8005b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ba0:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <SystemClock_Config+0x128>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <SystemClock_Config+0x128>)
 8001ba8:	f023 0318 	bic.w	r3, r3, #24
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bb0:	2314      	movs	r3, #20
 8001bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bc4:	2360      	movs	r3, #96	; 0x60
 8001bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001bdc:	2328      	movs	r3, #40	; 0x28
 8001bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001be2:	2307      	movs	r3, #7
 8001be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 f813 	bl	8005c24 <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c04:	f000 f86a 	bl	8001cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c20:	2104      	movs	r1, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fc1e 	bl	8006464 <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c2e:	f000 f855 	bl	8001cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001c32:	f244 0342 	movw	r3, #16450	; 0x4042
 8001c36:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c46:	2301      	movs	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c52:	2307      	movs	r3, #7
 8001c54:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c62:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fe00 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001c72:	f000 f833 	bl	8001cdc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c7a:	f003 ff7d 	bl	8005b78 <HAL_PWREx_ControlVoltageScaling>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001c84:	f000 f82a 	bl	8001cdc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c88:	f004 ffe2 	bl	8006c50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c8c:	bf00      	nop
 8001c8e:	37b0      	adds	r7, #176	; 0xb0
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_GPIO_EXTI_Callback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef* hi2c){
	__NOP();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	//Pour le switch
	if(GPIO_Pin == KNOB_SWITCH_Pin){
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca8:	d102      	bne.n	8001cb0 <HAL_GPIO_EXTI_Callback+0x18>
		//On a appuyé sur le bouton
		set_menu_SWITCH_EVENT();
 8001caa:	f000 f85f 	bl	8001d6c <set_menu_SWITCH_EVENT>
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_EXTI_Callback+0x1a>

	}else{
		__NOP();
 8001cb0:	bf00      	nop
	}
	//Pour gérer la roue codeuse
	if(GPIO_Pin == GPIO_PIN_1){
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_GPIO_EXTI_Callback+0x38>
		//Gestion de l'interruption
		if(HAL_GPIO_ReadPin(KNOB_CH_A_GPIO_Port, KNOB_CH_A_Pin)){
 8001cb8:	2140      	movs	r1, #64	; 0x40
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001cbc:	f003 fa16 	bl	80050ec <HAL_GPIO_ReadPin>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_GPIO_EXTI_Callback+0x34>
			set_menu_KNOB_EVENT_HIGH();
 8001cc6:	f000 f89d 	bl	8001e04 <set_menu_KNOB_EVENT_HIGH>
		}else{
			set_menu_KNOB_EVENT_LOW();
		}
	}
}
 8001cca:	e001      	b.n	8001cd0 <HAL_GPIO_EXTI_Callback+0x38>
			set_menu_KNOB_EVENT_LOW();
 8001ccc:	f000 f93a 	bl	8001f44 <set_menu_KNOB_EVENT_LOW>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	48000400 	.word	0x48000400

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <Error_Handler+0x6>

08001ce4 <init_menu>:
//Variables externes
extern float x;
extern float y;
extern uint8_t note_index;

uint8_t init_menu(){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	uint8_t init = SSD1306_Init();
 8001cea:	f000 fc99 	bl	8002620 <SSD1306_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	if(init != 1){
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d002      	beq.n	8001cfe <init_menu+0x1a>
		printf("ERROR INIT");
 8001cf8:	4803      	ldr	r0, [pc, #12]	; (8001d08 <init_menu+0x24>)
 8001cfa:	f006 fc4d 	bl	8008598 <iprintf>
	}
	return init;
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800a934 	.word	0x0800a934

08001d0c <verifValue>:

//Patch crade pour résoudre le problème de la range de x et y
void verifValue(){
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	if(x < 0){x = 0;}
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <verifValue+0x40>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d503      	bpl.n	8001d28 <verifValue+0x1c>
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <verifValue+0x40>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
	if(y < 0){y = 0;}
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <verifValue+0x44>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d400      	bmi.n	8001d3a <verifValue+0x2e>
}
 8001d38:	e003      	b.n	8001d42 <verifValue+0x36>
	if(y < 0){y = 0;}
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <verifValue+0x44>)
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	200009e0 	.word	0x200009e0
 8001d50:	200009e4 	.word	0x200009e4

08001d54 <set_home_menu>:

void set_home_menu(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	affichageMenu(testMenu);
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <set_home_menu+0x14>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fc21 	bl	80025a4 <affichageMenu>
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200009e8 	.word	0x200009e8

08001d6c <set_menu_SWITCH_EVENT>:

void set_menu_SWITCH_EVENT(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	if(testMenu == MENU1)
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <set_menu_SWITCH_EVENT+0x14>
				testMenu = MENUPITCH;
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e036      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENU2)
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d103      	bne.n	8001d90 <set_menu_SWITCH_EVENT+0x24>
				testMenu = MENUX;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001d8a:	2205      	movs	r2, #5
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e02e      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENU3)
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d103      	bne.n	8001da0 <set_menu_SWITCH_EVENT+0x34>
				testMenu = MENUY;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001d9a:	2206      	movs	r2, #6
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e026      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENU3BIS)
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d103      	bne.n	8001db0 <set_menu_SWITCH_EVENT+0x44>
				testMenu = MENUXBIS;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001daa:	2207      	movs	r2, #7
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e01e      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENUPITCH)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d103      	bne.n	8001dc0 <set_menu_SWITCH_EVENT+0x54>
				testMenu = MENU1;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e016      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENUX)
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d103      	bne.n	8001dd0 <set_menu_SWITCH_EVENT+0x64>
				testMenu = MENU2;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e00e      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENUY)
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d103      	bne.n	8001de0 <set_menu_SWITCH_EVENT+0x74>
				testMenu = MENU3;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e006      	b.n	8001dee <set_menu_SWITCH_EVENT+0x82>
			else if(testMenu == MENUXBIS)
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b07      	cmp	r3, #7
 8001de6:	d102      	bne.n	8001dee <set_menu_SWITCH_EVENT+0x82>
				testMenu = MENU3BIS;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001dea:	2203      	movs	r2, #3
 8001dec:	701a      	strb	r2, [r3, #0]

			verifValue();
 8001dee:	f7ff ff8d 	bl	8001d0c <verifValue>
			affichageMenu(testMenu);
 8001df2:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <set_menu_SWITCH_EVENT+0x94>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fbd4 	bl	80025a4 <affichageMenu>
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200009e8 	.word	0x200009e8

08001e04 <set_menu_KNOB_EVENT_HIGH>:

void set_menu_KNOB_EVENT_HIGH(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	if(testMenu == MENU1 || testMenu == MENU2)
 8001e08:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <set_menu_KNOB_EVENT_HIGH+0x14>
 8001e10:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10d      	bne.n	8001e34 <set_menu_KNOB_EVENT_HIGH+0x30>
	{
		testMenu ++;
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e22:	701a      	strb	r2, [r3, #0]
		verifValue();
 8001e24:	f7ff ff72 	bl	8001d0c <verifValue>
		affichageMenu(testMenu);
 8001e28:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fbb9 	bl	80025a4 <affichageMenu>
 8001e32:	e07b      	b.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
	}
	else if(testMenu == MENU3BIS)
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d10a      	bne.n	8001e52 <set_menu_KNOB_EVENT_HIGH+0x4e>
	{
		testMenu = MENU3;
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e3e:	2202      	movs	r2, #2
 8001e40:	701a      	strb	r2, [r3, #0]
		verifValue();
 8001e42:	f7ff ff63 	bl	8001d0c <verifValue>
		affichageMenu(testMenu);
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fbaa 	bl	80025a4 <affichageMenu>
				verifValue();
				affichageMenu(testMenu);
			}
		}
	}
}
 8001e50:	e06c      	b.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
	else if(testMenu == MENUX || testMenu == MENUY || testMenu == MENUXBIS || testMenu == MENUPITCH)
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d00b      	beq.n	8001e72 <set_menu_KNOB_EVENT_HIGH+0x6e>
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d007      	beq.n	8001e72 <set_menu_KNOB_EVENT_HIGH+0x6e>
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b07      	cmp	r3, #7
 8001e68:	d003      	beq.n	8001e72 <set_menu_KNOB_EVENT_HIGH+0x6e>
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d15c      	bne.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
		if(testMenu == MENUX || testMenu == MENUXBIS)
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d003      	beq.n	8001e82 <set_menu_KNOB_EVENT_HIGH+0x7e>
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b07      	cmp	r3, #7
 8001e80:	d11c      	bne.n	8001ebc <set_menu_KNOB_EVENT_HIGH+0xb8>
			if(x < 1)
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <set_menu_KNOB_EVENT_HIGH+0x130>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	d54a      	bpl.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
				x += pas;
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <set_menu_KNOB_EVENT_HIGH+0x130>)
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <set_menu_KNOB_EVENT_HIGH+0x134>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <set_menu_KNOB_EVENT_HIGH+0x130>)
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
				verifValue();
 8001eac:	f7ff ff2e 	bl	8001d0c <verifValue>
				affichageMenu(testMenu);
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fb75 	bl	80025a4 <affichageMenu>
			if(x < 1)
 8001eba:	e037      	b.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
		else if(testMenu == MENUY)
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d11d      	bne.n	8001f00 <set_menu_KNOB_EVENT_HIGH+0xfc>
			if(y < 1)
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <set_menu_KNOB_EVENT_HIGH+0x138>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	d400      	bmi.n	8001eda <set_menu_KNOB_EVENT_HIGH+0xd6>
}
 8001ed8:	e028      	b.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
				y += pas;
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <set_menu_KNOB_EVENT_HIGH+0x138>)
 8001edc:	ed93 7a00 	vldr	s14, [r3]
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <set_menu_KNOB_EVENT_HIGH+0x134>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <set_menu_KNOB_EVENT_HIGH+0x138>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
				verifValue();
 8001ef0:	f7ff ff0c 	bl	8001d0c <verifValue>
				affichageMenu(testMenu);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fb53 	bl	80025a4 <affichageMenu>
}
 8001efe:	e015      	b.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
		else if(testMenu == MENUPITCH)
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d111      	bne.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
			if(note_index < 95)
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <set_menu_KNOB_EVENT_HIGH+0x13c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b5e      	cmp	r3, #94	; 0x5e
 8001f0e:	d80d      	bhi.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
				note_index ++ ;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <set_menu_KNOB_EVENT_HIGH+0x13c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <set_menu_KNOB_EVENT_HIGH+0x13c>)
 8001f1a:	701a      	strb	r2, [r3, #0]
				verifValue();
 8001f1c:	f7ff fef6 	bl	8001d0c <verifValue>
				affichageMenu(testMenu);
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <set_menu_KNOB_EVENT_HIGH+0x12c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fb3d 	bl	80025a4 <affichageMenu>
}
 8001f2a:	e7ff      	b.n	8001f2c <set_menu_KNOB_EVENT_HIGH+0x128>
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200009e8 	.word	0x200009e8
 8001f34:	200009e0 	.word	0x200009e0
 8001f38:	200007d0 	.word	0x200007d0
 8001f3c:	200009e4 	.word	0x200009e4
 8001f40:	200009dc 	.word	0x200009dc

08001f44 <set_menu_KNOB_EVENT_LOW>:

void set_menu_KNOB_EVENT_LOW(){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	if(testMenu == MENU2 || testMenu == MENU3BIS)
 8001f48:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d003      	beq.n	8001f58 <set_menu_KNOB_EVENT_LOW+0x14>
 8001f50:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d10a      	bne.n	8001f6e <set_menu_KNOB_EVENT_LOW+0x2a>
	{
		testMenu = MENU1;
 8001f58:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
		verifValue();
 8001f5e:	f7ff fed5 	bl	8001d0c <verifValue>
		affichageMenu(testMenu);
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fb1c 	bl	80025a4 <affichageMenu>
 8001f6c:	e067      	b.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
	}
	else if(testMenu == MENU3)
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d10a      	bne.n	8001f8c <set_menu_KNOB_EVENT_LOW+0x48>
	{
		testMenu = MENU3BIS;
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f78:	2203      	movs	r2, #3
 8001f7a:	701a      	strb	r2, [r3, #0]
		verifValue();
 8001f7c:	f7ff fec6 	bl	8001d0c <verifValue>
		affichageMenu(testMenu);
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fb0d 	bl	80025a4 <affichageMenu>
				verifValue();
				affichageMenu(testMenu);
			}
		}
	}
}
 8001f8a:	e058      	b.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
		if(testMenu == MENUX || testMenu == MENUXBIS)
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d003      	beq.n	8001f9c <set_menu_KNOB_EVENT_LOW+0x58>
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	d11a      	bne.n	8001fd2 <set_menu_KNOB_EVENT_LOW+0x8e>
			if(x > 0)
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <set_menu_KNOB_EVENT_LOW+0x104>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	dd48      	ble.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
				x -= pas;
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <set_menu_KNOB_EVENT_LOW+0x104>)
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <set_menu_KNOB_EVENT_LOW+0x108>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <set_menu_KNOB_EVENT_LOW+0x104>)
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
				verifValue();
 8001fc2:	f7ff fea3 	bl	8001d0c <verifValue>
				affichageMenu(testMenu);
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 faea 	bl	80025a4 <affichageMenu>
			if(x > 0)
 8001fd0:	e035      	b.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
		else if(testMenu == MENUY)
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d11b      	bne.n	8002012 <set_menu_KNOB_EVENT_LOW+0xce>
			if(y > 0)
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <set_menu_KNOB_EVENT_LOW+0x10c>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dc00      	bgt.n	8001fec <set_menu_KNOB_EVENT_LOW+0xa8>
}
 8001fea:	e028      	b.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
				y -= pas;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <set_menu_KNOB_EVENT_LOW+0x10c>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <set_menu_KNOB_EVENT_LOW+0x108>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <set_menu_KNOB_EVENT_LOW+0x10c>)
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
				verifValue();
 8002002:	f7ff fe83 	bl	8001d0c <verifValue>
				affichageMenu(testMenu);
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 faca 	bl	80025a4 <affichageMenu>
}
 8002010:	e015      	b.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
		else if(testMenu == MENUPITCH)
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d111      	bne.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
			if(note_index > 0)
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <set_menu_KNOB_EVENT_LOW+0x110>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
				note_index -- ;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <set_menu_KNOB_EVENT_LOW+0x110>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3b01      	subs	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <set_menu_KNOB_EVENT_LOW+0x110>)
 800202c:	701a      	strb	r2, [r3, #0]
				verifValue();
 800202e:	f7ff fe6d 	bl	8001d0c <verifValue>
				affichageMenu(testMenu);
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <set_menu_KNOB_EVENT_LOW+0x100>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fab4 	bl	80025a4 <affichageMenu>
}
 800203c:	e7ff      	b.n	800203e <set_menu_KNOB_EVENT_LOW+0xfa>
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200009e8 	.word	0x200009e8
 8002048:	200009e0 	.word	0x200009e0
 800204c:	200007d0 	.word	0x200007d0
 8002050:	200009e4 	.word	0x200009e4
 8002054:	200009dc 	.word	0x200009dc

08002058 <afficherMenu1>:

void afficherMenu1(){
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
	char varX[10];
	sprintf(varX, "%f", x);
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <afficherMenu1+0x98>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa70 	bl	8000548 <__aeabi_f2d>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	f107 000c 	add.w	r0, r7, #12
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	491f      	ldr	r1, [pc, #124]	; (80020f4 <afficherMenu1+0x9c>)
 8002076:	f006 fb0b 	bl	8008690 <siprintf>
	char varPitch[10];
	sprintf(varPitch, "%s", note_name[note_index]);
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <afficherMenu1+0xa0>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <afficherMenu1+0xa4>)
 8002082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002086:	463b      	mov	r3, r7
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f006 fb20 	bl	80086d0 <strcpy>

	SSD1306_Fill(0);
 8002090:	2000      	movs	r0, #0
 8002092:	f000 fbbf 	bl	8002814 <SSD1306_Fill>
	SSD1306_GotoXY(5,5);
 8002096:	2105      	movs	r1, #5
 8002098:	2005      	movs	r0, #5
 800209a:	f000 fc33 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("PITCH", &Font_11x18, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	4917      	ldr	r1, [pc, #92]	; (8002100 <afficherMenu1+0xa8>)
 80020a2:	4818      	ldr	r0, [pc, #96]	; (8002104 <afficherMenu1+0xac>)
 80020a4:	f000 fcc4 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,5);
 80020a8:	2105      	movs	r1, #5
 80020aa:	2050      	movs	r0, #80	; 0x50
 80020ac:	f000 fc2a 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varPitch, &Font_11x18, 1);
 80020b0:	463b      	mov	r3, r7
 80020b2:	2201      	movs	r2, #1
 80020b4:	4912      	ldr	r1, [pc, #72]	; (8002100 <afficherMenu1+0xa8>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fcba 	bl	8002a30 <SSD1306_Puts>

	SSD1306_GotoXY(5,35);
 80020bc:	2123      	movs	r1, #35	; 0x23
 80020be:	2005      	movs	r0, #5
 80020c0:	f000 fc20 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("X", &Font_11x18, 1);
 80020c4:	2201      	movs	r2, #1
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <afficherMenu1+0xa8>)
 80020c8:	480f      	ldr	r0, [pc, #60]	; (8002108 <afficherMenu1+0xb0>)
 80020ca:	f000 fcb1 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,35);
 80020ce:	2123      	movs	r1, #35	; 0x23
 80020d0:	2050      	movs	r0, #80	; 0x50
 80020d2:	f000 fc17 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varX, &Font_11x18, 1);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2201      	movs	r2, #1
 80020dc:	4908      	ldr	r1, [pc, #32]	; (8002100 <afficherMenu1+0xa8>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fca6 	bl	8002a30 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80020e4:	f000 fb60 	bl	80027a8 <SSD1306_UpdateScreen>
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	200009e0 	.word	0x200009e0
 80020f4:	0800a940 	.word	0x0800a940
 80020f8:	200009dc 	.word	0x200009dc
 80020fc:	20000650 	.word	0x20000650
 8002100:	20000648 	.word	0x20000648
 8002104:	0800a944 	.word	0x0800a944
 8002108:	0800a94c 	.word	0x0800a94c

0800210c <afficherMenu2>:

void afficherMenu2()
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
	char varX[10];
	sprintf(varX, "%f", x);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <afficherMenu2+0x98>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa16 	bl	8000548 <__aeabi_f2d>
 800211c:	4603      	mov	r3, r0
 800211e:	460c      	mov	r4, r1
 8002120:	f107 000c 	add.w	r0, r7, #12
 8002124:	461a      	mov	r2, r3
 8002126:	4623      	mov	r3, r4
 8002128:	491f      	ldr	r1, [pc, #124]	; (80021a8 <afficherMenu2+0x9c>)
 800212a:	f006 fab1 	bl	8008690 <siprintf>
	char varPitch[10];
	sprintf(varPitch, "%s", note_name[note_index]);
 800212e:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <afficherMenu2+0xa0>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <afficherMenu2+0xa4>)
 8002136:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800213a:	463b      	mov	r3, r7
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f006 fac6 	bl	80086d0 <strcpy>

	SSD1306_Fill(0);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 fb65 	bl	8002814 <SSD1306_Fill>

	SSD1306_GotoXY(5,5);
 800214a:	2105      	movs	r1, #5
 800214c:	2005      	movs	r0, #5
 800214e:	f000 fbd9 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("PITCH", &Font_11x18, 1);
 8002152:	2201      	movs	r2, #1
 8002154:	4917      	ldr	r1, [pc, #92]	; (80021b4 <afficherMenu2+0xa8>)
 8002156:	4818      	ldr	r0, [pc, #96]	; (80021b8 <afficherMenu2+0xac>)
 8002158:	f000 fc6a 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,5);
 800215c:	2105      	movs	r1, #5
 800215e:	2050      	movs	r0, #80	; 0x50
 8002160:	f000 fbd0 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varPitch, &Font_11x18, 1);
 8002164:	463b      	mov	r3, r7
 8002166:	2201      	movs	r2, #1
 8002168:	4912      	ldr	r1, [pc, #72]	; (80021b4 <afficherMenu2+0xa8>)
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fc60 	bl	8002a30 <SSD1306_Puts>

	SSD1306_GotoXY(5,35);
 8002170:	2123      	movs	r1, #35	; 0x23
 8002172:	2005      	movs	r0, #5
 8002174:	f000 fbc6 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("X", &Font_11x18, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <afficherMenu2+0xa8>)
 800217c:	480f      	ldr	r0, [pc, #60]	; (80021bc <afficherMenu2+0xb0>)
 800217e:	f000 fc57 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,35);
 8002182:	2123      	movs	r1, #35	; 0x23
 8002184:	2050      	movs	r0, #80	; 0x50
 8002186:	f000 fbbd 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varX, &Font_11x18, 1);
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2201      	movs	r2, #1
 8002190:	4908      	ldr	r1, [pc, #32]	; (80021b4 <afficherMenu2+0xa8>)
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc4c 	bl	8002a30 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002198:	f000 fb06 	bl	80027a8 <SSD1306_UpdateScreen>
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	200009e0 	.word	0x200009e0
 80021a8:	0800a940 	.word	0x0800a940
 80021ac:	200009dc 	.word	0x200009dc
 80021b0:	20000650 	.word	0x20000650
 80021b4:	20000648 	.word	0x20000648
 80021b8:	0800a944 	.word	0x0800a944
 80021bc:	0800a94c 	.word	0x0800a94c

080021c0 <afficherMenu3>:
void afficherMenu3(int test)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	char varX[10];
	sprintf(varX, "%f", x);
 80021c8:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <afficherMenu3+0xfc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9bb 	bl	8000548 <__aeabi_f2d>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	f107 0014 	add.w	r0, r7, #20
 80021da:	461a      	mov	r2, r3
 80021dc:	4623      	mov	r3, r4
 80021de:	4938      	ldr	r1, [pc, #224]	; (80022c0 <afficherMenu3+0x100>)
 80021e0:	f006 fa56 	bl	8008690 <siprintf>
	char varY[10];
	sprintf(varY, "%f", y);
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <afficherMenu3+0x104>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f9ad 	bl	8000548 <__aeabi_f2d>
 80021ee:	4603      	mov	r3, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	f107 0008 	add.w	r0, r7, #8
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	4931      	ldr	r1, [pc, #196]	; (80022c0 <afficherMenu3+0x100>)
 80021fc:	f006 fa48 	bl	8008690 <siprintf>
	SSD1306_Fill(0);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 fb07 	bl	8002814 <SSD1306_Fill>
	if(test == 0)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d128      	bne.n	800225e <afficherMenu3+0x9e>
	{
		SSD1306_GotoXY(5,5);
 800220c:	2105      	movs	r1, #5
 800220e:	2005      	movs	r0, #5
 8002210:	f000 fb78 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("X", &Font_11x18, 1);
 8002214:	2201      	movs	r2, #1
 8002216:	492c      	ldr	r1, [pc, #176]	; (80022c8 <afficherMenu3+0x108>)
 8002218:	482c      	ldr	r0, [pc, #176]	; (80022cc <afficherMenu3+0x10c>)
 800221a:	f000 fc09 	bl	8002a30 <SSD1306_Puts>
		SSD1306_GotoXY(80,5);
 800221e:	2105      	movs	r1, #5
 8002220:	2050      	movs	r0, #80	; 0x50
 8002222:	f000 fb6f 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts(varX, &Font_11x18, 1);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	2201      	movs	r2, #1
 800222c:	4926      	ldr	r1, [pc, #152]	; (80022c8 <afficherMenu3+0x108>)
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fbfe 	bl	8002a30 <SSD1306_Puts>

		SSD1306_GotoXY(5,35);
 8002234:	2123      	movs	r1, #35	; 0x23
 8002236:	2005      	movs	r0, #5
 8002238:	f000 fb64 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("Y", &Font_11x18, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <afficherMenu3+0x108>)
 8002240:	4823      	ldr	r0, [pc, #140]	; (80022d0 <afficherMenu3+0x110>)
 8002242:	f000 fbf5 	bl	8002a30 <SSD1306_Puts>
		SSD1306_GotoXY(80,35);
 8002246:	2123      	movs	r1, #35	; 0x23
 8002248:	2050      	movs	r0, #80	; 0x50
 800224a:	f000 fb5b 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts(varY, &Font_11x18, 1);
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2201      	movs	r2, #1
 8002254:	491c      	ldr	r1, [pc, #112]	; (80022c8 <afficherMenu3+0x108>)
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fbea 	bl	8002a30 <SSD1306_Puts>
 800225c:	e027      	b.n	80022ae <afficherMenu3+0xee>
	}
	else
	{
		SSD1306_GotoXY(5,5);
 800225e:	2105      	movs	r1, #5
 8002260:	2005      	movs	r0, #5
 8002262:	f000 fb4f 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("X", &Font_11x18, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	4917      	ldr	r1, [pc, #92]	; (80022c8 <afficherMenu3+0x108>)
 800226a:	4818      	ldr	r0, [pc, #96]	; (80022cc <afficherMenu3+0x10c>)
 800226c:	f000 fbe0 	bl	8002a30 <SSD1306_Puts>
		SSD1306_GotoXY(80,5);
 8002270:	2105      	movs	r1, #5
 8002272:	2050      	movs	r0, #80	; 0x50
 8002274:	f000 fb46 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts(varX, &Font_11x18, 1);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2201      	movs	r2, #1
 800227e:	4912      	ldr	r1, [pc, #72]	; (80022c8 <afficherMenu3+0x108>)
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fbd5 	bl	8002a30 <SSD1306_Puts>

		SSD1306_GotoXY(5,35);
 8002286:	2123      	movs	r1, #35	; 0x23
 8002288:	2005      	movs	r0, #5
 800228a:	f000 fb3b 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("Y", &Font_11x18, 1);
 800228e:	2201      	movs	r2, #1
 8002290:	490d      	ldr	r1, [pc, #52]	; (80022c8 <afficherMenu3+0x108>)
 8002292:	480f      	ldr	r0, [pc, #60]	; (80022d0 <afficherMenu3+0x110>)
 8002294:	f000 fbcc 	bl	8002a30 <SSD1306_Puts>
		SSD1306_GotoXY(80,35);
 8002298:	2123      	movs	r1, #35	; 0x23
 800229a:	2050      	movs	r0, #80	; 0x50
 800229c:	f000 fb32 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts(varY, &Font_11x18, 1);
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	2201      	movs	r2, #1
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <afficherMenu3+0x108>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fbc1 	bl	8002a30 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 80022ae:	f000 fa7b 	bl	80027a8 <SSD1306_UpdateScreen>
}
 80022b2:	bf00      	nop
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200009e0 	.word	0x200009e0
 80022c0:	0800a940 	.word	0x0800a940
 80022c4:	200009e4 	.word	0x200009e4
 80022c8:	20000648 	.word	0x20000648
 80022cc:	0800a94c 	.word	0x0800a94c
 80022d0:	0800a950 	.word	0x0800a950

080022d4 <afficherMenuPitch>:
void afficherMenuPitch()
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
	char varX[10];
	sprintf(varX, "%f", x);
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <afficherMenuPitch+0x98>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f932 	bl	8000548 <__aeabi_f2d>
 80022e4:	4603      	mov	r3, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	f107 000c 	add.w	r0, r7, #12
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	491f      	ldr	r1, [pc, #124]	; (8002370 <afficherMenuPitch+0x9c>)
 80022f2:	f006 f9cd 	bl	8008690 <siprintf>
	char varPitch[10];
	sprintf(varPitch, "%s", note_name[note_index]);
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <afficherMenuPitch+0xa0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <afficherMenuPitch+0xa4>)
 80022fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002302:	463b      	mov	r3, r7
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f006 f9e2 	bl	80086d0 <strcpy>
	SSD1306_Fill(0);
 800230c:	2000      	movs	r0, #0
 800230e:	f000 fa81 	bl	8002814 <SSD1306_Fill>

	SSD1306_GotoXY(5,5);
 8002312:	2105      	movs	r1, #5
 8002314:	2005      	movs	r0, #5
 8002316:	f000 faf5 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("PITCH", &Font_11x18, 1);
 800231a:	2201      	movs	r2, #1
 800231c:	4917      	ldr	r1, [pc, #92]	; (800237c <afficherMenuPitch+0xa8>)
 800231e:	4818      	ldr	r0, [pc, #96]	; (8002380 <afficherMenuPitch+0xac>)
 8002320:	f000 fb86 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,5);
 8002324:	2105      	movs	r1, #5
 8002326:	2050      	movs	r0, #80	; 0x50
 8002328:	f000 faec 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varPitch, &Font_11x18, 0);
 800232c:	463b      	mov	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <afficherMenuPitch+0xa8>)
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fb7c 	bl	8002a30 <SSD1306_Puts>

	SSD1306_GotoXY(5,35);
 8002338:	2123      	movs	r1, #35	; 0x23
 800233a:	2005      	movs	r0, #5
 800233c:	f000 fae2 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("X", &Font_11x18, 1);
 8002340:	2201      	movs	r2, #1
 8002342:	490e      	ldr	r1, [pc, #56]	; (800237c <afficherMenuPitch+0xa8>)
 8002344:	480f      	ldr	r0, [pc, #60]	; (8002384 <afficherMenuPitch+0xb0>)
 8002346:	f000 fb73 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,35);
 800234a:	2123      	movs	r1, #35	; 0x23
 800234c:	2050      	movs	r0, #80	; 0x50
 800234e:	f000 fad9 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varX, &Font_11x18, 1);
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	2201      	movs	r2, #1
 8002358:	4908      	ldr	r1, [pc, #32]	; (800237c <afficherMenuPitch+0xa8>)
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fb68 	bl	8002a30 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8002360:	f000 fa22 	bl	80027a8 <SSD1306_UpdateScreen>
}
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	200009e0 	.word	0x200009e0
 8002370:	0800a940 	.word	0x0800a940
 8002374:	200009dc 	.word	0x200009dc
 8002378:	20000650 	.word	0x20000650
 800237c:	20000648 	.word	0x20000648
 8002380:	0800a944 	.word	0x0800a944
 8002384:	0800a94c 	.word	0x0800a94c

08002388 <afficherMenuX>:
void afficherMenuX()
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
	char varX[10];
	sprintf(varX, "%f", x);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <afficherMenuX+0x98>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f8d8 	bl	8000548 <__aeabi_f2d>
 8002398:	4603      	mov	r3, r0
 800239a:	460c      	mov	r4, r1
 800239c:	f107 000c 	add.w	r0, r7, #12
 80023a0:	461a      	mov	r2, r3
 80023a2:	4623      	mov	r3, r4
 80023a4:	491f      	ldr	r1, [pc, #124]	; (8002424 <afficherMenuX+0x9c>)
 80023a6:	f006 f973 	bl	8008690 <siprintf>
	char varPitch[10];
	sprintf(varPitch, "%s", note_name[note_index]);
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <afficherMenuX+0xa0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b1e      	ldr	r3, [pc, #120]	; (800242c <afficherMenuX+0xa4>)
 80023b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023b6:	463b      	mov	r3, r7
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 f988 	bl	80086d0 <strcpy>
	SSD1306_Fill(0);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f000 fa27 	bl	8002814 <SSD1306_Fill>

	SSD1306_GotoXY(5,5);
 80023c6:	2105      	movs	r1, #5
 80023c8:	2005      	movs	r0, #5
 80023ca:	f000 fa9b 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("PITCH", &Font_11x18, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	4917      	ldr	r1, [pc, #92]	; (8002430 <afficherMenuX+0xa8>)
 80023d2:	4818      	ldr	r0, [pc, #96]	; (8002434 <afficherMenuX+0xac>)
 80023d4:	f000 fb2c 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,5);
 80023d8:	2105      	movs	r1, #5
 80023da:	2050      	movs	r0, #80	; 0x50
 80023dc:	f000 fa92 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varPitch, &Font_11x18, 1);
 80023e0:	463b      	mov	r3, r7
 80023e2:	2201      	movs	r2, #1
 80023e4:	4912      	ldr	r1, [pc, #72]	; (8002430 <afficherMenuX+0xa8>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb22 	bl	8002a30 <SSD1306_Puts>

	SSD1306_GotoXY(5,35);
 80023ec:	2123      	movs	r1, #35	; 0x23
 80023ee:	2005      	movs	r0, #5
 80023f0:	f000 fa88 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("X", &Font_11x18, 1);
 80023f4:	2201      	movs	r2, #1
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <afficherMenuX+0xa8>)
 80023f8:	480f      	ldr	r0, [pc, #60]	; (8002438 <afficherMenuX+0xb0>)
 80023fa:	f000 fb19 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,35);
 80023fe:	2123      	movs	r1, #35	; 0x23
 8002400:	2050      	movs	r0, #80	; 0x50
 8002402:	f000 fa7f 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varX, &Font_11x18, 0);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2200      	movs	r2, #0
 800240c:	4908      	ldr	r1, [pc, #32]	; (8002430 <afficherMenuX+0xa8>)
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fb0e 	bl	8002a30 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8002414:	f000 f9c8 	bl	80027a8 <SSD1306_UpdateScreen>
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd90      	pop	{r4, r7, pc}
 8002420:	200009e0 	.word	0x200009e0
 8002424:	0800a940 	.word	0x0800a940
 8002428:	200009dc 	.word	0x200009dc
 800242c:	20000650 	.word	0x20000650
 8002430:	20000648 	.word	0x20000648
 8002434:	0800a944 	.word	0x0800a944
 8002438:	0800a94c 	.word	0x0800a94c

0800243c <afficherMenuXbis>:
void afficherMenuXbis()
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
	char varX[10];
	sprintf(varX, "%f", x);
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <afficherMenuXbis+0x9c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f87e 	bl	8000548 <__aeabi_f2d>
 800244c:	4603      	mov	r3, r0
 800244e:	460c      	mov	r4, r1
 8002450:	f107 000c 	add.w	r0, r7, #12
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	4920      	ldr	r1, [pc, #128]	; (80024dc <afficherMenuXbis+0xa0>)
 800245a:	f006 f919 	bl	8008690 <siprintf>
	char varY[10];
	sprintf(varY, "%f", y);
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <afficherMenuXbis+0xa4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f870 	bl	8000548 <__aeabi_f2d>
 8002468:	4603      	mov	r3, r0
 800246a:	460c      	mov	r4, r1
 800246c:	4638      	mov	r0, r7
 800246e:	461a      	mov	r2, r3
 8002470:	4623      	mov	r3, r4
 8002472:	491a      	ldr	r1, [pc, #104]	; (80024dc <afficherMenuXbis+0xa0>)
 8002474:	f006 f90c 	bl	8008690 <siprintf>
	SSD1306_Fill(0);
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f9cb 	bl	8002814 <SSD1306_Fill>

	SSD1306_GotoXY(5,5);
 800247e:	2105      	movs	r1, #5
 8002480:	2005      	movs	r0, #5
 8002482:	f000 fa3f 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("X", &Font_11x18, 1);
 8002486:	2201      	movs	r2, #1
 8002488:	4916      	ldr	r1, [pc, #88]	; (80024e4 <afficherMenuXbis+0xa8>)
 800248a:	4817      	ldr	r0, [pc, #92]	; (80024e8 <afficherMenuXbis+0xac>)
 800248c:	f000 fad0 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,5);
 8002490:	2105      	movs	r1, #5
 8002492:	2050      	movs	r0, #80	; 0x50
 8002494:	f000 fa36 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varX, &Font_11x18, 0);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2200      	movs	r2, #0
 800249e:	4911      	ldr	r1, [pc, #68]	; (80024e4 <afficherMenuXbis+0xa8>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fac5 	bl	8002a30 <SSD1306_Puts>

	SSD1306_GotoXY(5,35);
 80024a6:	2123      	movs	r1, #35	; 0x23
 80024a8:	2005      	movs	r0, #5
 80024aa:	f000 fa2b 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("Y", &Font_11x18, 1);
 80024ae:	2201      	movs	r2, #1
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <afficherMenuXbis+0xa8>)
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <afficherMenuXbis+0xb0>)
 80024b4:	f000 fabc 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,35);
 80024b8:	2123      	movs	r1, #35	; 0x23
 80024ba:	2050      	movs	r0, #80	; 0x50
 80024bc:	f000 fa22 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varY, &Font_11x18, 1);
 80024c0:	463b      	mov	r3, r7
 80024c2:	2201      	movs	r2, #1
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <afficherMenuXbis+0xa8>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fab2 	bl	8002a30 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 80024cc:	f000 f96c 	bl	80027a8 <SSD1306_UpdateScreen>
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	200009e0 	.word	0x200009e0
 80024dc:	0800a940 	.word	0x0800a940
 80024e0:	200009e4 	.word	0x200009e4
 80024e4:	20000648 	.word	0x20000648
 80024e8:	0800a94c 	.word	0x0800a94c
 80024ec:	0800a950 	.word	0x0800a950

080024f0 <afficherMenuY>:
void afficherMenuY()
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
	char varX[10];
	sprintf(varX, "%f", x);
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <afficherMenuY+0x9c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f824 	bl	8000548 <__aeabi_f2d>
 8002500:	4603      	mov	r3, r0
 8002502:	460c      	mov	r4, r1
 8002504:	f107 000c 	add.w	r0, r7, #12
 8002508:	461a      	mov	r2, r3
 800250a:	4623      	mov	r3, r4
 800250c:	4920      	ldr	r1, [pc, #128]	; (8002590 <afficherMenuY+0xa0>)
 800250e:	f006 f8bf 	bl	8008690 <siprintf>
	char varY[10];
	sprintf(varY, "%f", y);
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <afficherMenuY+0xa4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f816 	bl	8000548 <__aeabi_f2d>
 800251c:	4603      	mov	r3, r0
 800251e:	460c      	mov	r4, r1
 8002520:	4638      	mov	r0, r7
 8002522:	461a      	mov	r2, r3
 8002524:	4623      	mov	r3, r4
 8002526:	491a      	ldr	r1, [pc, #104]	; (8002590 <afficherMenuY+0xa0>)
 8002528:	f006 f8b2 	bl	8008690 <siprintf>
	SSD1306_Fill(0);
 800252c:	2000      	movs	r0, #0
 800252e:	f000 f971 	bl	8002814 <SSD1306_Fill>

	SSD1306_GotoXY(5,5);
 8002532:	2105      	movs	r1, #5
 8002534:	2005      	movs	r0, #5
 8002536:	f000 f9e5 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("X", &Font_11x18, 1);
 800253a:	2201      	movs	r2, #1
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <afficherMenuY+0xa8>)
 800253e:	4817      	ldr	r0, [pc, #92]	; (800259c <afficherMenuY+0xac>)
 8002540:	f000 fa76 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,5);
 8002544:	2105      	movs	r1, #5
 8002546:	2050      	movs	r0, #80	; 0x50
 8002548:	f000 f9dc 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varX, &Font_11x18, 1);
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	2201      	movs	r2, #1
 8002552:	4911      	ldr	r1, [pc, #68]	; (8002598 <afficherMenuY+0xa8>)
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fa6b 	bl	8002a30 <SSD1306_Puts>

	SSD1306_GotoXY(5,35);
 800255a:	2123      	movs	r1, #35	; 0x23
 800255c:	2005      	movs	r0, #5
 800255e:	f000 f9d1 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts("Y", &Font_11x18, 1);
 8002562:	2201      	movs	r2, #1
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <afficherMenuY+0xa8>)
 8002566:	480e      	ldr	r0, [pc, #56]	; (80025a0 <afficherMenuY+0xb0>)
 8002568:	f000 fa62 	bl	8002a30 <SSD1306_Puts>
	SSD1306_GotoXY(80,35);
 800256c:	2123      	movs	r1, #35	; 0x23
 800256e:	2050      	movs	r0, #80	; 0x50
 8002570:	f000 f9c8 	bl	8002904 <SSD1306_GotoXY>
	SSD1306_Puts(varY, &Font_11x18, 0);
 8002574:	463b      	mov	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <afficherMenuY+0xa8>)
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fa58 	bl	8002a30 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8002580:	f000 f912 	bl	80027a8 <SSD1306_UpdateScreen>
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	200009e0 	.word	0x200009e0
 8002590:	0800a940 	.word	0x0800a940
 8002594:	200009e4 	.word	0x200009e4
 8002598:	20000648 	.word	0x20000648
 800259c:	0800a94c 	.word	0x0800a94c
 80025a0:	0800a950 	.word	0x0800a950

080025a4 <affichageMenu>:

void affichageMenu(T_MENU menu)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
	switch(menu)
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b07      	cmp	r3, #7
 80025b2:	d82d      	bhi.n	8002610 <affichageMenu+0x6c>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <affichageMenu+0x18>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025dd 	.word	0x080025dd
 80025c0:	080025e3 	.word	0x080025e3
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	080025f1 	.word	0x080025f1
 80025cc:	0800260b 	.word	0x0800260b
 80025d0:	080025f9 	.word	0x080025f9
 80025d4:	080025ff 	.word	0x080025ff
 80025d8:	08002605 	.word	0x08002605
	{
	case MENU1 :
		afficherMenu1();
 80025dc:	f7ff fd3c 	bl	8002058 <afficherMenu1>
		break;
 80025e0:	e01a      	b.n	8002618 <affichageMenu+0x74>
	case MENU2 :
		afficherMenu2();
 80025e2:	f7ff fd93 	bl	800210c <afficherMenu2>
		break;
 80025e6:	e017      	b.n	8002618 <affichageMenu+0x74>
	case MENU3 :
		afficherMenu3(0);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff fde9 	bl	80021c0 <afficherMenu3>
		break;
 80025ee:	e013      	b.n	8002618 <affichageMenu+0x74>
	case MENU3BIS :
		afficherMenu3(1);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff fde5 	bl	80021c0 <afficherMenu3>
		break;
 80025f6:	e00f      	b.n	8002618 <affichageMenu+0x74>
	case MENUX :
		afficherMenuX();
 80025f8:	f7ff fec6 	bl	8002388 <afficherMenuX>
		break;
 80025fc:	e00c      	b.n	8002618 <affichageMenu+0x74>
	case MENUY :
		afficherMenuY();
 80025fe:	f7ff ff77 	bl	80024f0 <afficherMenuY>
		break;
 8002602:	e009      	b.n	8002618 <affichageMenu+0x74>
	case MENUXBIS :
		afficherMenuXbis();
 8002604:	f7ff ff1a 	bl	800243c <afficherMenuXbis>
		break;
 8002608:	e006      	b.n	8002618 <affichageMenu+0x74>
	case MENUPITCH :
		afficherMenuPitch();
 800260a:	f7ff fe63 	bl	80022d4 <afficherMenuPitch>
		break;
 800260e:	e003      	b.n	8002618 <affichageMenu+0x74>
	default :
		SSD1306_Clear();
 8002610:	f000 fa33 	bl	8002a7a <SSD1306_Clear>
		//SSD1306_AfficherMot("ERROR");
		SSD1306_UpdateScreen();
 8002614:	f000 f8c8 	bl	80027a8 <SSD1306_UpdateScreen>
	}
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
	/* Init I2C */
	ssd1306_I2C_Init();
 8002626:	f000 fa31 	bl	8002a8c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 800262a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800262e:	2201      	movs	r2, #1
 8002630:	2178      	movs	r1, #120	; 0x78
 8002632:	485b      	ldr	r0, [pc, #364]	; (80027a0 <SSD1306_Init+0x180>)
 8002634:	f002 ff26 	bl	8005484 <HAL_I2C_IsDeviceReady>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SSD1306_Init+0x22>
	{
		/* Return false */
		return 0;
 800263e:	2300      	movs	r3, #0
 8002640:	e0a9      	b.n	8002796 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002642:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002646:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002648:	e002      	b.n	8002650 <SSD1306_Init+0x30>
		p--;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3b01      	subs	r3, #1
 800264e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002656:	22ae      	movs	r2, #174	; 0xae
 8002658:	2100      	movs	r1, #0
 800265a:	2078      	movs	r0, #120	; 0x78
 800265c:	f000 fa78 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002660:	2220      	movs	r2, #32
 8002662:	2100      	movs	r1, #0
 8002664:	2078      	movs	r0, #120	; 0x78
 8002666:	f000 fa73 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800266a:	2210      	movs	r2, #16
 800266c:	2100      	movs	r1, #0
 800266e:	2078      	movs	r0, #120	; 0x78
 8002670:	f000 fa6e 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002674:	22b0      	movs	r2, #176	; 0xb0
 8002676:	2100      	movs	r1, #0
 8002678:	2078      	movs	r0, #120	; 0x78
 800267a:	f000 fa69 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800267e:	22c8      	movs	r2, #200	; 0xc8
 8002680:	2100      	movs	r1, #0
 8002682:	2078      	movs	r0, #120	; 0x78
 8002684:	f000 fa64 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	2078      	movs	r0, #120	; 0x78
 800268e:	f000 fa5f 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002692:	2210      	movs	r2, #16
 8002694:	2100      	movs	r1, #0
 8002696:	2078      	movs	r0, #120	; 0x78
 8002698:	f000 fa5a 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800269c:	2240      	movs	r2, #64	; 0x40
 800269e:	2100      	movs	r1, #0
 80026a0:	2078      	movs	r0, #120	; 0x78
 80026a2:	f000 fa55 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80026a6:	2281      	movs	r2, #129	; 0x81
 80026a8:	2100      	movs	r1, #0
 80026aa:	2078      	movs	r0, #120	; 0x78
 80026ac:	f000 fa50 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	2100      	movs	r1, #0
 80026b4:	2078      	movs	r0, #120	; 0x78
 80026b6:	f000 fa4b 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80026ba:	22a1      	movs	r2, #161	; 0xa1
 80026bc:	2100      	movs	r1, #0
 80026be:	2078      	movs	r0, #120	; 0x78
 80026c0:	f000 fa46 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80026c4:	22a6      	movs	r2, #166	; 0xa6
 80026c6:	2100      	movs	r1, #0
 80026c8:	2078      	movs	r0, #120	; 0x78
 80026ca:	f000 fa41 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80026ce:	22a8      	movs	r2, #168	; 0xa8
 80026d0:	2100      	movs	r1, #0
 80026d2:	2078      	movs	r0, #120	; 0x78
 80026d4:	f000 fa3c 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80026d8:	223f      	movs	r2, #63	; 0x3f
 80026da:	2100      	movs	r1, #0
 80026dc:	2078      	movs	r0, #120	; 0x78
 80026de:	f000 fa37 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026e2:	22a4      	movs	r2, #164	; 0xa4
 80026e4:	2100      	movs	r1, #0
 80026e6:	2078      	movs	r0, #120	; 0x78
 80026e8:	f000 fa32 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80026ec:	22d3      	movs	r2, #211	; 0xd3
 80026ee:	2100      	movs	r1, #0
 80026f0:	2078      	movs	r0, #120	; 0x78
 80026f2:	f000 fa2d 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2078      	movs	r0, #120	; 0x78
 80026fc:	f000 fa28 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002700:	22d5      	movs	r2, #213	; 0xd5
 8002702:	2100      	movs	r1, #0
 8002704:	2078      	movs	r0, #120	; 0x78
 8002706:	f000 fa23 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800270a:	22f0      	movs	r2, #240	; 0xf0
 800270c:	2100      	movs	r1, #0
 800270e:	2078      	movs	r0, #120	; 0x78
 8002710:	f000 fa1e 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002714:	22d9      	movs	r2, #217	; 0xd9
 8002716:	2100      	movs	r1, #0
 8002718:	2078      	movs	r0, #120	; 0x78
 800271a:	f000 fa19 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800271e:	2222      	movs	r2, #34	; 0x22
 8002720:	2100      	movs	r1, #0
 8002722:	2078      	movs	r0, #120	; 0x78
 8002724:	f000 fa14 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002728:	22da      	movs	r2, #218	; 0xda
 800272a:	2100      	movs	r1, #0
 800272c:	2078      	movs	r0, #120	; 0x78
 800272e:	f000 fa0f 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002732:	2212      	movs	r2, #18
 8002734:	2100      	movs	r1, #0
 8002736:	2078      	movs	r0, #120	; 0x78
 8002738:	f000 fa0a 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800273c:	22db      	movs	r2, #219	; 0xdb
 800273e:	2100      	movs	r1, #0
 8002740:	2078      	movs	r0, #120	; 0x78
 8002742:	f000 fa05 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002746:	2220      	movs	r2, #32
 8002748:	2100      	movs	r1, #0
 800274a:	2078      	movs	r0, #120	; 0x78
 800274c:	f000 fa00 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002750:	228d      	movs	r2, #141	; 0x8d
 8002752:	2100      	movs	r1, #0
 8002754:	2078      	movs	r0, #120	; 0x78
 8002756:	f000 f9fb 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800275a:	2214      	movs	r2, #20
 800275c:	2100      	movs	r1, #0
 800275e:	2078      	movs	r0, #120	; 0x78
 8002760:	f000 f9f6 	bl	8002b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002764:	22af      	movs	r2, #175	; 0xaf
 8002766:	2100      	movs	r1, #0
 8002768:	2078      	movs	r0, #120	; 0x78
 800276a:	f000 f9f1 	bl	8002b50 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800276e:	222e      	movs	r2, #46	; 0x2e
 8002770:	2100      	movs	r1, #0
 8002772:	2078      	movs	r0, #120	; 0x78
 8002774:	f000 f9ec 	bl	8002b50 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002778:	2000      	movs	r0, #0
 800277a:	f000 f84b 	bl	8002814 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800277e:	f000 f813 	bl	80027a8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <SSD1306_Init+0x184>)
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <SSD1306_Init+0x184>)
 800278a:	2200      	movs	r2, #0
 800278c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SSD1306_Init+0x184>)
 8002790:	2201      	movs	r2, #1
 8002792:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001c34 	.word	0x20001c34
 80027a4:	20000dec 	.word	0x20000dec

080027a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
	uint8_t m;
	uint8_t start_frame[] = {0x00,0xB0,0x00,0x00,0x00,0x10};
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <SSD1306_UpdateScreen+0x64>)
 80027b0:	463b      	mov	r3, r7
 80027b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b6:	6018      	str	r0, [r3, #0]
 80027b8:	3304      	adds	r3, #4
 80027ba:	8019      	strh	r1, [r3, #0]
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);

	}
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDR, start_frame, 6);
	ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[0], 2*SSD1306_WIDTH);*/
	for (m = 0; m < 8; m++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	e01d      	b.n	80027fe <SSD1306_UpdateScreen+0x56>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	3b50      	subs	r3, #80	; 0x50
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	2100      	movs	r1, #0
 80027cc:	2078      	movs	r0, #120	; 0x78
 80027ce:	f000 f9bf 	bl	8002b50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2078      	movs	r0, #120	; 0x78
 80027d8:	f000 f9ba 	bl	8002b50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80027dc:	2210      	movs	r2, #16
 80027de:	2100      	movs	r1, #0
 80027e0:	2078      	movs	r0, #120	; 0x78
 80027e2:	f000 f9b5 	bl	8002b50 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	01db      	lsls	r3, r3, #7
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <SSD1306_UpdateScreen+0x68>)
 80027ec:	441a      	add	r2, r3
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	2078      	movs	r0, #120	; 0x78
 80027f4:	f000 f95e 	bl	8002ab4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	3301      	adds	r3, #1
 80027fc:	71fb      	strb	r3, [r7, #7]
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b07      	cmp	r3, #7
 8002802:	d9de      	bls.n	80027c2 <SSD1306_UpdateScreen+0x1a>
	}

}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	0800a954 	.word	0x0800a954
 8002810:	200009ec 	.word	0x200009ec

08002814 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <SSD1306_Fill+0x14>
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <SSD1306_Fill+0x16>
 8002828:	23ff      	movs	r3, #255	; 0xff
 800282a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282e:	4619      	mov	r1, r3
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <SSD1306_Fill+0x2c>)
 8002832:	f005 fa4d 	bl	8007cd0 <memset>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200009ec 	.word	0x200009ec

08002844 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
 800284e:	460b      	mov	r3, r1
 8002850:	80bb      	strh	r3, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	70fb      	strb	r3, [r7, #3]
	if (
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	2b7f      	cmp	r3, #127	; 0x7f
 800285a:	d848      	bhi.n	80028ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	2b3f      	cmp	r3, #63	; 0x3f
 8002860:	d845      	bhi.n	80028ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <SSD1306_DrawPixel+0xb8>)
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d11a      	bne.n	80028b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	88bb      	ldrh	r3, [r7, #4]
 8002882:	08db      	lsrs	r3, r3, #3
 8002884:	b298      	uxth	r0, r3
 8002886:	4603      	mov	r3, r0
 8002888:	01db      	lsls	r3, r3, #7
 800288a:	4413      	add	r3, r2
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <SSD1306_DrawPixel+0xbc>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	b25a      	sxtb	r2, r3
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b259      	sxtb	r1, r3
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	4603      	mov	r3, r0
 80028a8:	01db      	lsls	r3, r3, #7
 80028aa:	4413      	add	r3, r2
 80028ac:	b2c9      	uxtb	r1, r1
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <SSD1306_DrawPixel+0xbc>)
 80028b0:	54d1      	strb	r1, [r2, r3]
 80028b2:	e01d      	b.n	80028f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	88bb      	ldrh	r3, [r7, #4]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	b298      	uxth	r0, r3
 80028bc:	4603      	mov	r3, r0
 80028be:	01db      	lsls	r3, r3, #7
 80028c0:	4413      	add	r3, r2
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <SSD1306_DrawPixel+0xbc>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	b25a      	sxtb	r2, r3
 80028c8:	88bb      	ldrh	r3, [r7, #4]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	4013      	ands	r3, r2
 80028dc:	b259      	sxtb	r1, r3
 80028de:	88fa      	ldrh	r2, [r7, #6]
 80028e0:	4603      	mov	r3, r0
 80028e2:	01db      	lsls	r3, r3, #7
 80028e4:	4413      	add	r3, r2
 80028e6:	b2c9      	uxtb	r1, r1
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <SSD1306_DrawPixel+0xbc>)
 80028ea:	54d1      	strb	r1, [r2, r3]
 80028ec:	e000      	b.n	80028f0 <SSD1306_DrawPixel+0xac>
		return;
 80028ee:	bf00      	nop
	}
}
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000dec 	.word	0x20000dec
 8002900:	200009ec 	.word	0x200009ec

08002904 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	460a      	mov	r2, r1
 800290e:	80fb      	strh	r3, [r7, #6]
 8002910:	4613      	mov	r3, r2
 8002912:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <SSD1306_GotoXY+0x28>)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800291a:	4a04      	ldr	r2, [pc, #16]	; (800292c <SSD1306_GotoXY+0x28>)
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	8053      	strh	r3, [r2, #2]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	20000dec 	.word	0x20000dec

08002930 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002940:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <SSD1306_Putc+0xfc>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
	if (
 800294c:	2b7f      	cmp	r3, #127	; 0x7f
 800294e:	dc07      	bgt.n	8002960 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <SSD1306_Putc+0xfc>)
 8002952:	885b      	ldrh	r3, [r3, #2]
 8002954:	461a      	mov	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800295c:	2b3f      	cmp	r3, #63	; 0x3f
 800295e:	dd01      	ble.n	8002964 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002960:	2300      	movs	r3, #0
 8002962:	e05e      	b.n	8002a22 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e04b      	b.n	8002a02 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	3b20      	subs	r3, #32
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	7849      	ldrb	r1, [r1, #1]
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4619      	mov	r1, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	440b      	add	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e030      	b.n	80029f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <SSD1306_Putc+0xfc>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	b298      	uxth	r0, r3
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <SSD1306_Putc+0xfc>)
 80029ac:	885a      	ldrh	r2, [r3, #2]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	79ba      	ldrb	r2, [r7, #6]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7ff ff43 	bl	8002844 <SSD1306_DrawPixel>
 80029be:	e014      	b.n	80029ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <SSD1306_Putc+0xfc>)
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	b298      	uxth	r0, r3
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <SSD1306_Putc+0xfc>)
 80029ce:	885a      	ldrh	r2, [r3, #2]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	b299      	uxth	r1, r3
 80029d8:	79bb      	ldrb	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	f7ff ff2d 	bl	8002844 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3301      	adds	r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d3c8      	bcc.n	800298e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	461a      	mov	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d3ad      	bcc.n	800296a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <SSD1306_Putc+0xfc>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <SSD1306_Putc+0xfc>)
 8002a1e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000dec 	.word	0x20000dec

08002a30 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002a3e:	e012      	b.n	8002a66 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	79fa      	ldrb	r2, [r7, #7]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff71 	bl	8002930 <SSD1306_Putc>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d002      	beq.n	8002a60 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	e008      	b.n	8002a72 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e8      	bne.n	8002a40 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	781b      	ldrb	r3, [r3, #0]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <SSD1306_Clear>:
	SSD1306_DrawFilledTriangle(122, 30, 110, 20, 110, 40, SSD1306_COLOR_WHITE);
	SSD1306_DrawFilledTriangle(5, 30, 17, 20, 17, 40, SSD1306_COLOR_WHITE);
}

void SSD1306_Clear(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7ff fec8 	bl	8002814 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002a84:	f7ff fe90 	bl	80027a8 <SSD1306_UpdateScreen>
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <ssd1306_I2C_Init>:
// |_____|____|\_____|  //
//                      //
//////////////////////////

void ssd1306_I2C_Init()
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <ssd1306_I2C_Init+0x24>)
 8002a94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a96:	e002      	b.n	8002a9e <ssd1306_I2C_Init+0x12>
		p--;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <ssd1306_I2C_Init+0xc>
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	0003d090 	.word	0x0003d090

08002ab4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b0c7      	sub	sp, #284	; 0x11c
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	4604      	mov	r4, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	4639      	mov	r1, r7
 8002ac0:	600a      	str	r2, [r1, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	1dbb      	adds	r3, r7, #6
 8002acc:	4602      	mov	r2, r0
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	1dba      	adds	r2, r7, #6
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	for(i = 0; i < count; i++){
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8002ae6:	e010      	b.n	8002b0a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8002ae8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002aec:	463a      	mov	r2, r7
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	441a      	add	r2, r3
 8002af2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002af6:	3301      	adds	r3, #1
 8002af8:	7811      	ldrb	r1, [r2, #0]
 8002afa:	f107 020c 	add.w	r2, r7, #12
 8002afe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++){
 8002b00:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002b04:	3301      	adds	r3, #1
 8002b06:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3e8      	bcc.n	8002ae8 <ssd1306_I2C_WriteMulti+0x34>
	}

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8002b16:	bf00      	nop
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <ssd1306_I2C_WriteMulti+0x98>)
 8002b1a:	f002 fdd4 	bl	80056c6 <HAL_I2C_GetState>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d1f9      	bne.n	8002b18 <ssd1306_I2C_WriteMulti+0x64>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1,10);
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b299      	uxth	r1, r3
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	b298      	uxth	r0, r3
 8002b32:	f107 020c 	add.w	r2, r7, #12
 8002b36:	230a      	movs	r3, #10
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4803      	ldr	r0, [pc, #12]	; (8002b4c <ssd1306_I2C_WriteMulti+0x98>)
 8002b3e:	f002 fbad 	bl	800529c <HAL_I2C_Master_Transmit>
}
 8002b42:	bf00      	nop
 8002b44:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}
 8002b4c:	20001c34 	.word	0x20001c34

08002b50 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	71bb      	strb	r3, [r7, #6]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002b62:	79bb      	ldrb	r3, [r7, #6]
 8002b64:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002b66:	797b      	ldrb	r3, [r7, #5]
 8002b68:	737b      	strb	r3, [r7, #13]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8002b6a:	bf00      	nop
 8002b6c:	4809      	ldr	r0, [pc, #36]	; (8002b94 <ssd1306_I2C_Write+0x44>)
 8002b6e:	f002 fdaa 	bl	80056c6 <HAL_I2C_GetState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d1f9      	bne.n	8002b6c <ssd1306_I2C_Write+0x1c>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2,10);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	b299      	uxth	r1, r3
 8002b7c:	f107 020c 	add.w	r2, r7, #12
 8002b80:	230a      	movs	r3, #10
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2302      	movs	r3, #2
 8002b86:	4803      	ldr	r0, [pc, #12]	; (8002b94 <ssd1306_I2C_Write+0x44>)
 8002b88:	f002 fb88 	bl	800529c <HAL_I2C_Master_Transmit>
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20001c34 	.word	0x20001c34

08002b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_MspInit+0x44>)
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <HAL_MspInit+0x44>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_MspInit+0x44>)
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_MspInit+0x44>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_MspInit+0x44>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_MspInit+0x44>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000

08002be0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002be8:	1d39      	adds	r1, r7, #4
 8002bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4803      	ldr	r0, [pc, #12]	; (8002c00 <__io_putchar+0x20>)
 8002bf2:	f004 fc3d 	bl	8007470 <HAL_UART_Transmit>

  return ch;
 8002bf6:	687b      	ldr	r3, [r7, #4]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20001ccc 	.word	0x20001ccc

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <HardFault_Handler+0x4>

08002c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <MemManage_Handler+0x4>

08002c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <BusFault_Handler+0x4>

08002c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <UsageFault_Handler+0x4>

08002c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f000 fa8c 	bl	800316c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f002 fa75 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <DMA1_Channel1_IRQHandler+0x10>)
 8002c6e:	f001 fff3 	bl	8004c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000e64 	.word	0x20000e64

08002c7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <DMA1_Channel3_IRQHandler+0x10>)
 8002c82:	f001 ffe9 	bl	8004c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000ec0 	.word	0x20000ec0

08002c90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <DMA1_Channel4_IRQHandler+0x10>)
 8002c96:	f001 ffdf 	bl	8004c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000f08 	.word	0x20000f08

08002ca4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA1_Channel6_IRQHandler+0x10>)
 8002caa:	f001 ffd5 	bl	8004c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20001bec 	.word	0x20001bec

08002cb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002cbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cc0:	f002 fa44 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <I2C1_EV_IRQHandler+0x10>)
 8002cce:	f002 fce0 	bl	8005692 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20001c34 	.word	0x20001c34

08002cdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e00a      	b.n	8002d04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cee:	f3af 8000 	nop.w
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	60ba      	str	r2, [r7, #8]
 8002cfa:	b2ca      	uxtb	r2, r1
 8002cfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	3301      	adds	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	dbf0      	blt.n	8002cee <_read+0x12>
	}

return len;
 8002d0c:	687b      	ldr	r3, [r7, #4]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e009      	b.n	8002d3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	60ba      	str	r2, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff55 	bl	8002be0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	dbf1      	blt.n	8002d28 <_write+0x12>
	}
	return len;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_close>:

int _close(int file)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
	return -1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d76:	605a      	str	r2, [r3, #4]
	return 0;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_isatty>:

int _isatty(int file)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
	return 0;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f004 ff48 	bl	8007c7c <__errno>
 8002dec:	4602      	mov	r2, r0
 8002dee:	230c      	movs	r3, #12
 8002df0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20010000 	.word	0x20010000
 8002e18:	00000400 	.word	0x00000400
 8002e1c:	20000df4 	.word	0x20000df4
 8002e20:	20001d58 	.word	0x20001d58

08002e24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <SystemInit+0x64>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <SystemInit+0x64>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <SystemInit+0x68>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <SystemInit+0x68>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <SystemInit+0x68>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <SystemInit+0x68>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <SystemInit+0x68>)
 8002e50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <SystemInit+0x68>)
 8002e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <SystemInit+0x68>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <SystemInit+0x68>)
 8002e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <SystemInit+0x68>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <SystemInit+0x64>)
 8002e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e7a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00
 8002e8c:	40021000 	.word	0x40021000

08002e90 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1817;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002ec4:	f240 7219 	movw	r2, #1817	; 0x719
 8002ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ed6:	4814      	ldr	r0, [pc, #80]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002ed8:	f003 ffba 	bl	8006e50 <HAL_TIM_Base_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ee2:	f7fe fefb 	bl	8001cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002ef4:	f004 f850 	bl	8006f98 <HAL_TIM_ConfigClockSource>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002efe:	f7fe feed 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f02:	2320      	movs	r3, #32
 8002f04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <MX_TIM2_Init+0x98>)
 8002f10:	f004 f9fa 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002f1a:	f7fe fedf 	bl	8001cdc <Error_Handler>
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20001c80 	.word	0x20001c80

08002f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d10b      	bne.n	8002f56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_TIM_Base_MspInit+0x38>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_TIM_Base_MspInit+0x38>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_TIM_Base_MspInit+0x38>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <MX_USART2_UART_Init+0x5c>)
 8002f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f8e:	220c      	movs	r2, #12
 8002f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_USART2_UART_Init+0x58>)
 8002fac:	f004 fa12 	bl	80073d4 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002fb6:	f7fe fe91 	bl	8001cdc <Error_Handler>
  }

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20001ccc 	.word	0x20001ccc
 8002fc4:	40004400 	.word	0x40004400

08002fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_UART_MspInit+0xa0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d13a      	bne.n	8003060 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_UART_MspInit+0xa4>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_UART_MspInit+0xa4>)
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_UART_MspInit+0xa4>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_UART_MspInit+0xa4>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4a19      	ldr	r2, [pc, #100]	; (800306c <HAL_UART_MspInit+0xa4>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_UART_MspInit+0xa4>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800301a:	2304      	movs	r3, #4
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003026:	2303      	movs	r3, #3
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800302a:	2307      	movs	r3, #7
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003038:	f001 feee 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800303c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800304e:	2303      	movs	r3, #3
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800305c:	f001 fedc 	bl	8004e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40004400 	.word	0x40004400
 800306c:	40021000 	.word	0x40021000

08003070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003074:	f7ff fed6 	bl	8002e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003078:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800307a:	e003      	b.n	8003084 <LoopCopyDataInit>

0800307c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800307e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003080:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003082:	3104      	adds	r1, #4

08003084 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003084:	480a      	ldr	r0, [pc, #40]	; (80030b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003088:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800308a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800308c:	d3f6      	bcc.n	800307c <CopyDataInit>
	ldr	r2, =_sbss
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003090:	e002      	b.n	8003098 <LoopFillZerobss>

08003092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003092:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003094:	f842 3b04 	str.w	r3, [r2], #4

08003098 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <LoopForever+0x16>)
	cmp	r2, r3
 800309a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800309c:	d3f9      	bcc.n	8003092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309e:	f004 fdf3 	bl	8007c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030a2:	f7fe fd27 	bl	8001af4 <main>

080030a6 <LoopForever>:

LoopForever:
    b LoopForever
 80030a6:	e7fe      	b.n	80030a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030a8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80030ac:	0800bb50 	.word	0x0800bb50
	ldr	r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80030b4:	200009b0 	.word	0x200009b0
	ldr	r2, =_sbss
 80030b8:	200009b0 	.word	0x200009b0
	ldr	r3, = _ebss
 80030bc:	20001d54 	.word	0x20001d54

080030c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC1_IRQHandler>

080030c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f001 f9c7 	bl	8004460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030d2:	2000      	movs	r0, #0
 80030d4:	f000 f80e 	bl	80030f4 <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	e001      	b.n	80030e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030e4:	f7ff fd58 	bl	8002b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030e8:	79fb      	ldrb	r3, [r7, #7]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_InitTick+0x6c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d023      	beq.n	8003150 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_InitTick+0x70>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_InitTick+0x6c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f001 f9d3 	bl	80044ca <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d809      	bhi.n	8003144 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003138:	f001 f99d 	bl	8004476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_InitTick+0x74>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e007      	b.n	8003154 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e004      	b.n	8003154 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	e001      	b.n	8003154 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200007dc 	.word	0x200007dc
 8003164:	200007d4 	.word	0x200007d4
 8003168:	200007d8 	.word	0x200007d8

0800316c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_IncTick+0x20>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_IncTick+0x24>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <HAL_IncTick+0x24>)
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	200007dc 	.word	0x200007dc
 8003190:	20001d4c 	.word	0x20001d4c

08003194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return uwTick;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_GetTick+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20001d4c 	.word	0x20001d4c

080031ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff ffee 	bl	8003194 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c4:	d005      	beq.n	80031d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_Delay+0x40>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031d2:	bf00      	nop
 80031d4:	f7ff ffde 	bl	8003194 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d8f7      	bhi.n	80031d4 <HAL_Delay+0x28>
  {
  }
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	200007dc 	.word	0x200007dc

080031f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <LL_ADC_SetOffset+0x44>)
 800327a:	4013      	ands	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	4313      	orrs	r3, r2
 8003288:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	03fff000 	.word	0x03fff000

080032a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3360      	adds	r3, #96	; 0x60
 80032ae:	461a      	mov	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3360      	adds	r3, #96	; 0x60
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3330      	adds	r3, #48	; 0x30
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	4413      	add	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	211f      	movs	r1, #31
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	401a      	ands	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 011f 	and.w	r1, r3, #31
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	431a      	orrs	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3314      	adds	r3, #20
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0e5b      	lsrs	r3, r3, #25
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	0d1b      	lsrs	r3, r3, #20
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2107      	movs	r1, #7
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	401a      	ands	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	0d1b      	lsrs	r3, r3, #20
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	431a      	orrs	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	43db      	mvns	r3, r3
 80033f2:	401a      	ands	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0318 	and.w	r3, r3, #24
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <LL_ADC_SetChannelSingleDiff+0x44>)
 80033fc:	40d9      	lsrs	r1, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	400b      	ands	r3, r1
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	431a      	orrs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	0007ffff 	.word	0x0007ffff

08003420 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6093      	str	r3, [r2, #8]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003458:	d101      	bne.n	800345e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800347c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003480:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a8:	d101      	bne.n	80034ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <LL_ADC_IsEnabled+0x18>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <LL_ADC_IsEnabled+0x1a>
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800351a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d101      	bne.n	800354a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d101      	bne.n	8003570 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e12a      	b.n	80037f0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fd39 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff3f 	bl	8003444 <LL_ADC_IsDeepPowerDownEnabled>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff25 	bl	8003420 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff5a 	bl	8003494 <LL_ADC_IsInternalRegulatorEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff3e 	bl	800346c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035f0:	4b81      	ldr	r3, [pc, #516]	; (80037f8 <HAL_ADC_Init+0x278>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	4a81      	ldr	r2, [pc, #516]	; (80037fc <HAL_ADC_Init+0x27c>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003600:	e002      	b.n	8003608 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3b01      	subs	r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f9      	bne.n	8003602 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff3e 	bl	8003494 <LL_ADC_IsInternalRegulatorEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff77 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80c5 	bne.w	80037de <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 80c1 	bne.w	80037de <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff37 	bl	80034e4 <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800367c:	4860      	ldr	r0, [pc, #384]	; (8003800 <HAL_ADC_Init+0x280>)
 800367e:	f7ff ff31 	bl	80034e4 <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4619      	mov	r1, r3
 800368e:	485d      	ldr	r0, [pc, #372]	; (8003804 <HAL_ADC_Init+0x284>)
 8003690:	f7ff fdae 	bl	80031f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7e5b      	ldrb	r3, [r3, #25]
 8003698:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800369e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d106      	bne.n	80036d0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	3b01      	subs	r3, #1
 80036c8:	045b      	lsls	r3, r3, #17
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	4b45      	ldr	r3, [pc, #276]	; (8003808 <HAL_ADC_Init+0x288>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff14 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 800370a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff21 	bl	8003558 <LL_ADC_INJ_IsConversionOngoing>
 8003716:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d13d      	bne.n	800379a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d13a      	bne.n	800379a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003728:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003730:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003740:	f023 0302 	bic.w	r3, r3, #2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	69b9      	ldr	r1, [r7, #24]
 800374a:	430b      	orrs	r3, r1
 800374c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003754:	2b01      	cmp	r3, #1
 8003756:	d118      	bne.n	800378a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800377a:	430a      	orrs	r2, r1
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	611a      	str	r2, [r3, #16]
 8003788:	e007      	b.n	800379a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10c      	bne.n	80037bc <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f023 010f 	bic.w	r1, r3, #15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
 80037ba:	e007      	b.n	80037cc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020f 	bic.w	r2, r2, #15
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f023 0303 	bic.w	r3, r3, #3
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
 80037dc:	e007      	b.n	80037ee <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0210 	orr.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200007d4 	.word	0x200007d4
 80037fc:	053e2d63 	.word	0x053e2d63
 8003800:	50040000 	.word	0x50040000
 8003804:	50040300 	.word	0x50040300
 8003808:	fff0c007 	.word	0xfff0c007

0800380c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fe88 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d167      	bne.n	80038f8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_ADC_Start_DMA+0x2a>
 8003832:	2302      	movs	r3, #2
 8003834:	e063      	b.n	80038fe <HAL_ADC_Start_DMA+0xf2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fc50 	bl	80040e4 <ADC_Enable>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d14f      	bne.n	80038ee <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f023 0206 	bic.w	r2, r3, #6
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58
 800387a:	e002      	b.n	8003882 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_ADC_Start_DMA+0xfc>)
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_ADC_Start_DMA+0x100>)
 8003890:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_ADC_Start_DMA+0x104>)
 8003898:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	221c      	movs	r2, #28
 80038a0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0210 	orr.w	r2, r2, #16
 80038b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3340      	adds	r3, #64	; 0x40
 80038d4:	4619      	mov	r1, r3
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f001 f95d 	bl	8004b98 <HAL_DMA_Start_IT>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fe0f 	bl	800350a <LL_ADC_REG_StartConversion>
 80038ec:	e006      	b.n	80038fc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038f6:	e001      	b.n	80038fc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
 80038fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	08004199 	.word	0x08004199
 800390c:	08004271 	.word	0x08004271
 8003910:	0800428d 	.word	0x0800428d

08003914 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b0b6      	sub	sp, #216	; 0xd8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x22>
 8003946:	2302      	movs	r3, #2
 8003948:	e3b8      	b.n	80040bc <HAL_ADC_ConfigChannel+0x794>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fdeb 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 839d 	bne.w	800409e <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b05      	cmp	r3, #5
 800396a:	d824      	bhi.n	80039b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	3b02      	subs	r3, #2
 8003972:	2b03      	cmp	r3, #3
 8003974:	d81b      	bhi.n	80039ae <HAL_ADC_ConfigChannel+0x86>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_ADC_ConfigChannel+0x54>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003995 	.word	0x08003995
 8003984:	0800399d 	.word	0x0800399d
 8003988:	080039a5 	.word	0x080039a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	220c      	movs	r2, #12
 8003990:	605a      	str	r2, [r3, #4]
          break;
 8003992:	e011      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2212      	movs	r2, #18
 8003998:	605a      	str	r2, [r3, #4]
          break;
 800399a:	e00d      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2218      	movs	r2, #24
 80039a0:	605a      	str	r2, [r3, #4]
          break;
 80039a2:	e009      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039aa:	605a      	str	r2, [r3, #4]
          break;
 80039ac:	e004      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2206      	movs	r2, #6
 80039b2:	605a      	str	r2, [r3, #4]
          break;
 80039b4:	e000      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80039b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f7ff fcaf 	bl	8003328 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fdaf 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 80039d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fdbb 	bl	8003558 <LL_ADC_INJ_IsConversionOngoing>
 80039e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 81a6 	bne.w	8003d3c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 81a1 	bne.w	8003d3c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7ff fcba 	bl	8003380 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d00a      	beq.n	8003a44 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6919      	ldr	r1, [r3, #16]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a3e:	f7ff fc0b 	bl	8003258 <LL_ADC_SetOffset>
 8003a42:	e17b      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fc28 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x148>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fc1d 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003a66:	4603      	mov	r3, r0
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	f003 021f 	and.w	r2, r3, #31
 8003a6e:	e01e      	b.n	8003aae <HAL_ADC_ConfigChannel+0x186>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fc12 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e004      	b.n	8003aac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x19e>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	0e9b      	lsrs	r3, r3, #26
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	e018      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1d0>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e004      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003aee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d106      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fbe1 	bl	80032cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fbc5 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x20e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fbba 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	0e9b      	lsrs	r3, r3, #26
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	e01e      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x24c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fbaf 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e004      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x264>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0e9b      	lsrs	r3, r3, #26
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	e018      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x296>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e004      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d106      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fb7e 	bl	80032cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fb62 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x2d4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fb57 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	f003 021f 	and.w	r2, r3, #31
 8003bfa:	e01e      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x312>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fb4c 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	e004      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x32a>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0e9b      	lsrs	r3, r3, #26
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	e016      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x358>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e004      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fb1d 	bl	80032cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2103      	movs	r1, #3
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fb01 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x396>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2103      	movs	r1, #3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff faf6 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	e017      	b.n	8003cee <HAL_ADC_ConfigChannel+0x3c6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2103      	movs	r1, #3
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff faeb 	bl	80032a0 <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x3de>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0e9b      	lsrs	r3, r3, #26
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	e011      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x402>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e003      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d106      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	2103      	movs	r1, #3
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fac8 	bl	80032cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fbcf 	bl	80034e4 <LL_ADC_IsEnabled>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 813f 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f7ff fb3c 	bl	80033d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a8e      	ldr	r2, [pc, #568]	; (8003fa0 <HAL_ADC_ConfigChannel+0x678>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	f040 8130 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x46c>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	3301      	adds	r3, #1
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2b09      	cmp	r3, #9
 8003d8a:	bf94      	ite	ls
 8003d8c:	2301      	movls	r3, #1
 8003d8e:	2300      	movhi	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e019      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x4a0>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	bf94      	ite	ls
 8003dc2:	2301      	movls	r3, #1
 8003dc4:	2300      	movhi	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d079      	beq.n	8003ec0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x4c0>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	0e9b      	lsrs	r3, r3, #26
 8003dde:	3301      	adds	r3, #1
 8003de0:	069b      	lsls	r3, r3, #26
 8003de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003de6:	e015      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x4ec>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003e00:	2320      	movs	r3, #32
 8003e02:	e003      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	069b      	lsls	r3, r3, #26
 8003e10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x50c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	3301      	adds	r3, #1
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	e017      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x53c>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e003      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	ea42 0103 	orr.w	r1, r2, r3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x562>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	051b      	lsls	r3, r3, #20
 8003e88:	e018      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x594>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	e003      	b.n	8003eae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f003 021f 	and.w	r2, r3, #31
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	e080      	b.n	8003fc2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x5b4>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	069b      	lsls	r3, r3, #26
 8003ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eda:	e015      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x5e0>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e003      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	069b      	lsls	r3, r3, #26
 8003f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x600>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	e017      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x630>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	61fb      	str	r3, [r7, #28]
  return result;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e003      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	ea42 0103 	orr.w	r1, r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x65c>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	3b1e      	subs	r3, #30
 8003f7c:	051b      	lsls	r3, r3, #20
 8003f7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f82:	e01d      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x698>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	613b      	str	r3, [r7, #16]
  return result;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d103      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	e005      	b.n	8003fac <HAL_ADC_ConfigChannel+0x684>
 8003fa0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 021f 	and.w	r2, r3, #31
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3b1e      	subs	r3, #30
 8003fba:	051b      	lsls	r3, r3, #20
 8003fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	6892      	ldr	r2, [r2, #8]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7ff f9da 	bl	8003380 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <HAL_ADC_ConfigChannel+0x79c>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d06b      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fd8:	483b      	ldr	r0, [pc, #236]	; (80040c8 <HAL_ADC_ConfigChannel+0x7a0>)
 8003fda:	f7ff f92f 	bl	800323c <LL_ADC_GetCommonPathInternalCh>
 8003fde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a39      	ldr	r2, [pc, #228]	; (80040cc <HAL_ADC_ConfigChannel+0x7a4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d126      	bne.n	800403a <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d120      	bne.n	800403a <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d156      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800400a:	4619      	mov	r1, r3
 800400c:	482e      	ldr	r0, [pc, #184]	; (80040c8 <HAL_ADC_ConfigChannel+0x7a0>)
 800400e:	f7ff f902 	bl	8003216 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004012:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	099a      	lsrs	r2, r3, #6
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800402a:	e002      	b.n	8004032 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b01      	subs	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f9      	bne.n	800402c <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004038:	e03a      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_ADC_ConfigChannel+0x7b4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d113      	bne.n	800406c <HAL_ADC_ConfigChannel+0x744>
 8004044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10d      	bne.n	800406c <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d12a      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800405a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004062:	4619      	mov	r1, r3
 8004064:	4818      	ldr	r0, [pc, #96]	; (80040c8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004066:	f7ff f8d6 	bl	8003216 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800406a:	e021      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d11c      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800407a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d116      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800408c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004094:	4619      	mov	r1, r3
 8004096:	480c      	ldr	r0, [pc, #48]	; (80040c8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004098:	f7ff f8bd 	bl	8003216 <LL_ADC_SetCommonPathInternalCh>
 800409c:	e008      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040bc:	4618      	mov	r0, r3
 80040be:	37d8      	adds	r7, #216	; 0xd8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	80080000 	.word	0x80080000
 80040c8:	50040300 	.word	0x50040300
 80040cc:	c7520000 	.word	0xc7520000
 80040d0:	50040000 	.word	0x50040000
 80040d4:	200007d4 	.word	0x200007d4
 80040d8:	053e2d63 	.word	0x053e2d63
 80040dc:	cb840000 	.word	0xcb840000
 80040e0:	80000001 	.word	0x80000001

080040e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff f9f7 	bl	80034e4 <LL_ADC_IsEnabled>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d146      	bne.n	800418a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <ADC_Enable+0xb0>)
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	f043 0210 	orr.w	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e032      	b.n	800418c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff f9c6 	bl	80034bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004130:	f7ff f830 	bl	8003194 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004136:	e021      	b.n	800417c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff f9d1 	bl	80034e4 <LL_ADC_IsEnabled>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff f9b5 	bl	80034bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004152:	f7ff f81f 	bl	8003194 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d90d      	bls.n	800417c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0210 	orr.w	r2, r3, #16
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e007      	b.n	800418c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d1d6      	bne.n	8004138 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	8000003f 	.word	0x8000003f

08004198 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d14b      	bne.n	800424a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d021      	beq.n	8004210 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff f896 	bl	8003302 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d032      	beq.n	8004242 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d12b      	bne.n	8004242 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11f      	bne.n	8004242 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
 800420e:	e018      	b.n	8004242 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d111      	bne.n	8004242 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0201 	orr.w	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7fd fad2 	bl	80017ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004248:	e00e      	b.n	8004268 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff fb5c 	bl	8003914 <HAL_ADC_ErrorCallback>
}
 800425c:	e004      	b.n	8004268 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7fd fa72 	bl	8001768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fb2e 	bl	8003914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	60d3      	str	r3, [r2, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <__NVIC_GetPriorityGrouping+0x18>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 0307 	and.w	r3, r3, #7
}
 8004316:	4618      	mov	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	2b00      	cmp	r3, #0
 8004334:	db0b      	blt.n	800434e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	f003 021f 	and.w	r2, r3, #31
 800433c:	4907      	ldr	r1, [pc, #28]	; (800435c <__NVIC_EnableIRQ+0x38>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2001      	movs	r0, #1
 8004346:	fa00 f202 	lsl.w	r2, r0, r2
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000e100 	.word	0xe000e100

08004360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	6039      	str	r1, [r7, #0]
 800436a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db0a      	blt.n	800438a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	490c      	ldr	r1, [pc, #48]	; (80043ac <__NVIC_SetPriority+0x4c>)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	440b      	add	r3, r1
 8004384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004388:	e00a      	b.n	80043a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4908      	ldr	r1, [pc, #32]	; (80043b0 <__NVIC_SetPriority+0x50>)
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	3b04      	subs	r3, #4
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	440b      	add	r3, r1
 800439e:	761a      	strb	r2, [r3, #24]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000e100 	.word	0xe000e100
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f1c3 0307 	rsb	r3, r3, #7
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	bf28      	it	cs
 80043d2:	2304      	movcs	r3, #4
 80043d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3304      	adds	r3, #4
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d902      	bls.n	80043e4 <NVIC_EncodePriority+0x30>
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3b03      	subs	r3, #3
 80043e2:	e000      	b.n	80043e6 <NVIC_EncodePriority+0x32>
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	401a      	ands	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	43d9      	mvns	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800440c:	4313      	orrs	r3, r2
         );
}
 800440e:	4618      	mov	r0, r3
 8004410:	3724      	adds	r7, #36	; 0x24
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800442c:	d301      	bcc.n	8004432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800442e:	2301      	movs	r3, #1
 8004430:	e00f      	b.n	8004452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <SysTick_Config+0x40>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800443a:	210f      	movs	r1, #15
 800443c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004440:	f7ff ff8e 	bl	8004360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <SysTick_Config+0x40>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <SysTick_Config+0x40>)
 800444c:	2207      	movs	r2, #7
 800444e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	e000e010 	.word	0xe000e010

08004460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff29 	bl	80042c0 <__NVIC_SetPriorityGrouping>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	4603      	mov	r3, r0
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004488:	f7ff ff3e 	bl	8004308 <__NVIC_GetPriorityGrouping>
 800448c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7ff ff8e 	bl	80043b4 <NVIC_EncodePriority>
 8004498:	4602      	mov	r2, r0
 800449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff5d 	bl	8004360 <__NVIC_SetPriority>
}
 80044a6:	bf00      	nop
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff31 	bl	8004324 <__NVIC_EnableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ffa2 	bl	800441c <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e014      	b.n	800451e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	791b      	ldrb	r3, [r3, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fc fe51 	bl	80011ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	795b      	ldrb	r3, [r3, #5]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_DAC_Start_DMA+0x1e>
 8004542:	2302      	movs	r3, #2
 8004544:	e09e      	b.n	8004684 <HAL_DAC_Start_DMA+0x15c>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2202      	movs	r2, #2
 8004550:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d12a      	bne.n	80045ae <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a4b      	ldr	r2, [pc, #300]	; (800468c <HAL_DAC_Start_DMA+0x164>)
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a4a      	ldr	r2, [pc, #296]	; (8004690 <HAL_DAC_Start_DMA+0x168>)
 8004566:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a49      	ldr	r2, [pc, #292]	; (8004694 <HAL_DAC_Start_DMA+0x16c>)
 800456e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800457e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d009      	beq.n	800459a <HAL_DAC_Start_DMA+0x72>
 8004586:	2b08      	cmp	r3, #8
 8004588:	d00c      	beq.n	80045a4 <HAL_DAC_Start_DMA+0x7c>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d000      	beq.n	8004590 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800458e:	e039      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3308      	adds	r3, #8
 8004596:	613b      	str	r3, [r7, #16]
        break;
 8004598:	e034      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	613b      	str	r3, [r7, #16]
        break;
 80045a2:	e02f      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3310      	adds	r3, #16
 80045aa:	613b      	str	r3, [r7, #16]
        break;
 80045ac:	e02a      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4a39      	ldr	r2, [pc, #228]	; (8004698 <HAL_DAC_Start_DMA+0x170>)
 80045b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4a38      	ldr	r2, [pc, #224]	; (800469c <HAL_DAC_Start_DMA+0x174>)
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4a37      	ldr	r2, [pc, #220]	; (80046a0 <HAL_DAC_Start_DMA+0x178>)
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d009      	beq.n	80045f0 <HAL_DAC_Start_DMA+0xc8>
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d00c      	beq.n	80045fa <HAL_DAC_Start_DMA+0xd2>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d000      	beq.n	80045e6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80045e4:	e00e      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	613b      	str	r3, [r7, #16]
        break;
 80045ee:	e009      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3318      	adds	r3, #24
 80045f6:	613b      	str	r3, [r7, #16]
        break;
 80045f8:	e004      	b.n	8004604 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	331c      	adds	r3, #28
 8004600:	613b      	str	r3, [r7, #16]
        break;
 8004602:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d111      	bne.n	800462e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004618:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6898      	ldr	r0, [r3, #8]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	f000 fab8 	bl	8004b98 <HAL_DMA_Start_IT>
 8004628:	4603      	mov	r3, r0
 800462a:	75fb      	strb	r3, [r7, #23]
 800462c:	e010      	b.n	8004650 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800463c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	68d8      	ldr	r0, [r3, #12]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	f000 faa6 	bl	8004b98 <HAL_DMA_Start_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10c      	bne.n	8004676 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e005      	b.n	8004682 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004682:	7dfb      	ldrb	r3, [r7, #23]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	08004915 	.word	0x08004915
 8004690:	08004937 	.word	0x08004937
 8004694:	08004953 	.word	0x08004953
 8004698:	080049bd 	.word	0x080049bd
 800469c:	080049df 	.word	0x080049df
 80046a0:	080049fb 	.word	0x080049fb

080046a4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	795b      	ldrb	r3, [r3, #5]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_DAC_ConfigChannel+0x1c>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e107      	b.n	800490c <HAL_DAC_ConfigChannel+0x22c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d174      	bne.n	80047fa <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004710:	f7fe fd40 	bl	8003194 <HAL_GetTick>
 8004714:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d134      	bne.n	8004786 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800471c:	e011      	b.n	8004742 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800471e:	f7fe fd39 	bl	8003194 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d90a      	bls.n	8004742 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f043 0208 	orr.w	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2203      	movs	r2, #3
 800473c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0e4      	b.n	800490c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004750:	2001      	movs	r0, #1
 8004752:	f7fe fd2b 	bl	80031ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	6992      	ldr	r2, [r2, #24]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
 8004760:	e01e      	b.n	80047a0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004762:	f7fe fd17 	bl	8003194 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d90a      	bls.n	8004786 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f043 0208 	orr.w	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2203      	movs	r2, #3
 8004780:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0c2      	b.n	800490c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	dbe8      	blt.n	8004762 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004790:	2001      	movs	r0, #1
 8004792:	f7fe fd0b 	bl	80031ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	6992      	ldr	r2, [r2, #24]
 800479e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	ea02 0103 	and.w	r1, r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	409a      	lsls	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	21ff      	movs	r1, #255	; 0xff
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	ea02 0103 	and.w	r1, r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	409a      	lsls	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d11d      	bne.n	800483e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	221f      	movs	r2, #31
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2207      	movs	r2, #7
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	431a      	orrs	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	400a      	ands	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	22c0      	movs	r2, #192	; 0xc0
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43da      	mvns	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	400a      	ands	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff febe 	bl	80046a4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	711a      	strb	r2, [r3, #4]
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff feb7 	bl	80046b8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fead 	bl	80046cc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	711a      	strb	r2, [r3, #4]
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff ffd8 	bl	8004980 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	711a      	strb	r2, [r3, #4]
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ffd1 	bl	8004994 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f043 0204 	orr.w	r2, r3, #4
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff ffc7 	bl	80049a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	711a      	strb	r2, [r3, #4]
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e098      	b.n	8004b6c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4b4d      	ldr	r3, [pc, #308]	; (8004b78 <HAL_DMA_Init+0x150>)
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d80f      	bhi.n	8004a66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b4b      	ldr	r3, [pc, #300]	; (8004b7c <HAL_DMA_Init+0x154>)
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a4b      	ldr	r2, [pc, #300]	; (8004b80 <HAL_DMA_Init+0x158>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	009a      	lsls	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a48      	ldr	r2, [pc, #288]	; (8004b84 <HAL_DMA_Init+0x15c>)
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
 8004a64:	e00e      	b.n	8004a84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4b46      	ldr	r3, [pc, #280]	; (8004b88 <HAL_DMA_Init+0x160>)
 8004a6e:	4413      	add	r3, r2
 8004a70:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <HAL_DMA_Init+0x158>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	009a      	lsls	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a42      	ldr	r2, [pc, #264]	; (8004b8c <HAL_DMA_Init+0x164>)
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ade:	d039      	beq.n	8004b54 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <HAL_DMA_Init+0x15c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d11a      	bne.n	8004b20 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_DMA_Init+0x168>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	f003 031c 	and.w	r3, r3, #28
 8004af6:	210f      	movs	r1, #15
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	4924      	ldr	r1, [pc, #144]	; (8004b90 <HAL_DMA_Init+0x168>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b04:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_DMA_Init+0x168>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b10:	f003 031c 	and.w	r3, r3, #28
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	491d      	ldr	r1, [pc, #116]	; (8004b90 <HAL_DMA_Init+0x168>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
 8004b1e:	e019      	b.n	8004b54 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b20:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <HAL_DMA_Init+0x16c>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f003 031c 	and.w	r3, r3, #28
 8004b2c:	210f      	movs	r1, #15
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	4917      	ldr	r1, [pc, #92]	; (8004b94 <HAL_DMA_Init+0x16c>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <HAL_DMA_Init+0x16c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6859      	ldr	r1, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f003 031c 	and.w	r3, r3, #28
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	4911      	ldr	r1, [pc, #68]	; (8004b94 <HAL_DMA_Init+0x16c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40020407 	.word	0x40020407
 8004b7c:	bffdfff8 	.word	0xbffdfff8
 8004b80:	cccccccd 	.word	0xcccccccd
 8004b84:	40020000 	.word	0x40020000
 8004b88:	bffdfbf8 	.word	0xbffdfbf8
 8004b8c:	40020400 	.word	0x40020400
 8004b90:	400200a8 	.word	0x400200a8
 8004b94:	400204a8 	.word	0x400204a8

08004b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_DMA_Start_IT+0x20>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e04b      	b.n	8004c50 <HAL_DMA_Start_IT+0xb8>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d13a      	bne.n	8004c42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f8e0 	bl	8004db6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 020e 	orr.w	r2, r2, #14
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e00f      	b.n	8004c30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 020a 	orr.w	r2, r2, #10
 8004c2e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e005      	b.n	8004c4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	f003 031c 	and.w	r3, r3, #28
 8004c78:	2204      	movs	r2, #4
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d026      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x7a>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d021      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0204 	bic.w	r2, r2, #4
 8004caa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f003 021c 	and.w	r2, r3, #28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2104      	movs	r1, #4
 8004cba:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d071      	beq.n	8004dac <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004cd0:	e06c      	b.n	8004dac <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	f003 031c 	and.w	r3, r3, #28
 8004cda:	2202      	movs	r2, #2
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d02e      	beq.n	8004d44 <HAL_DMA_IRQHandler+0xec>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d029      	beq.n	8004d44 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 020a 	bic.w	r2, r2, #10
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f003 021c 	and.w	r2, r3, #28
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2102      	movs	r1, #2
 8004d24:	fa01 f202 	lsl.w	r2, r1, r2
 8004d28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d038      	beq.n	8004dac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d42:	e033      	b.n	8004dac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	f003 031c 	and.w	r3, r3, #28
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02a      	beq.n	8004dae <HAL_DMA_IRQHandler+0x156>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d025      	beq.n	8004dae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 020e 	bic.w	r2, r2, #14
 8004d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f003 021c 	and.w	r2, r3, #28
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f202 	lsl.w	r2, r1, r2
 8004d84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
}
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	f003 021c 	and.w	r2, r3, #28
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d108      	bne.n	8004dfa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004df8:	e007      	b.n	8004e0a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e26:	e148      	b.n	80050ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 813a 	beq.w	80050b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d00b      	beq.n	8004e60 <HAL_GPIO_Init+0x48>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d007      	beq.n	8004e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e54:	2b11      	cmp	r3, #17
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b12      	cmp	r3, #18
 8004e5e:	d130      	bne.n	8004ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4013      	ands	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e96:	2201      	movs	r2, #1
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	091b      	lsrs	r3, r3, #4
 8004eac:	f003 0201 	and.w	r2, r3, #1
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	2203      	movs	r2, #3
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0xea>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b12      	cmp	r3, #18
 8004f00:	d123      	bne.n	8004f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	08da      	lsrs	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3208      	adds	r2, #8
 8004f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	220f      	movs	r2, #15
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	08da      	lsrs	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3208      	adds	r2, #8
 8004f44:	6939      	ldr	r1, [r7, #16]
 8004f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	2203      	movs	r2, #3
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 0203 	and.w	r2, r3, #3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8094 	beq.w	80050b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8c:	4b52      	ldr	r3, [pc, #328]	; (80050d8 <HAL_GPIO_Init+0x2c0>)
 8004f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f90:	4a51      	ldr	r2, [pc, #324]	; (80050d8 <HAL_GPIO_Init+0x2c0>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6613      	str	r3, [r2, #96]	; 0x60
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_GPIO_Init+0x2c0>)
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fa4:	4a4d      	ldr	r2, [pc, #308]	; (80050dc <HAL_GPIO_Init+0x2c4>)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	089b      	lsrs	r3, r3, #2
 8004faa:	3302      	adds	r3, #2
 8004fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	220f      	movs	r2, #15
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fce:	d00d      	beq.n	8004fec <HAL_GPIO_Init+0x1d4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a43      	ldr	r2, [pc, #268]	; (80050e0 <HAL_GPIO_Init+0x2c8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <HAL_GPIO_Init+0x1d0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a42      	ldr	r2, [pc, #264]	; (80050e4 <HAL_GPIO_Init+0x2cc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_GPIO_Init+0x1cc>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e004      	b.n	8004fee <HAL_GPIO_Init+0x1d6>
 8004fe4:	2307      	movs	r3, #7
 8004fe6:	e002      	b.n	8004fee <HAL_GPIO_Init+0x1d6>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_GPIO_Init+0x1d6>
 8004fec:	2300      	movs	r3, #0
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	f002 0203 	and.w	r2, r2, #3
 8004ff4:	0092      	lsls	r2, r2, #2
 8004ff6:	4093      	lsls	r3, r2
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ffe:	4937      	ldr	r1, [pc, #220]	; (80050dc <HAL_GPIO_Init+0x2c4>)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	3302      	adds	r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	43db      	mvns	r3, r3
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4013      	ands	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005030:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	43db      	mvns	r3, r3
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4013      	ands	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800505a:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005060:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	43db      	mvns	r3, r3
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4013      	ands	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005084:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800508a:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43db      	mvns	r3, r3
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4013      	ands	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050ae:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <HAL_GPIO_Init+0x2d0>)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f aeaf 	bne.w	8004e28 <HAL_GPIO_Init+0x10>
  }
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40010000 	.word	0x40010000
 80050e0:	48000400 	.word	0x48000400
 80050e4:	48000800 	.word	0x48000800
 80050e8:	40010400 	.word	0x40010400

080050ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e001      	b.n	800510e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	4613      	mov	r3, r2
 800512a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005138:	e002      	b.n	8005140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005162:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fc fd94 	bl	8001c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40010400 	.word	0x40010400

0800517c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e081      	b.n	8005292 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fc2c 	bl	8001a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	; 0x24
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	e006      	b.n	8005204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d104      	bne.n	8005216 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	ea42 0103 	orr.w	r1, r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	461a      	mov	r2, r3
 80052a8:	460b      	mov	r3, r1
 80052aa:	817b      	strh	r3, [r7, #10]
 80052ac:	4613      	mov	r3, r2
 80052ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	f040 80da 	bne.w	8005472 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_I2C_Master_Transmit+0x30>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e0d3      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1d8>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052d4:	f7fd ff5e 	bl	8003194 <HAL_GetTick>
 80052d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa1f 	bl	800572a <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0be      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	; 0x21
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2210      	movs	r2, #16
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	893a      	ldrh	r2, [r7, #8]
 8005316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	2bff      	cmp	r3, #255	; 0xff
 8005326:	d90e      	bls.n	8005346 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	22ff      	movs	r2, #255	; 0xff
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	b2da      	uxtb	r2, r3
 8005334:	8979      	ldrh	r1, [r7, #10]
 8005336:	4b51      	ldr	r3, [pc, #324]	; (800547c <HAL_I2C_Master_Transmit+0x1e0>)
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fb16 	bl	8005970 <I2C_TransferConfig>
 8005344:	e06c      	b.n	8005420 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	b2da      	uxtb	r2, r3
 8005356:	8979      	ldrh	r1, [r7, #10]
 8005358:	4b48      	ldr	r3, [pc, #288]	; (800547c <HAL_I2C_Master_Transmit+0x1e0>)
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fb05 	bl	8005970 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005366:	e05b      	b.n	8005420 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	6a39      	ldr	r1, [r7, #32]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fa1c 	bl	80057aa <I2C_WaitOnTXISFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e07b      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d034      	beq.n	8005420 <HAL_I2C_Master_Transmit+0x184>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d130      	bne.n	8005420 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2180      	movs	r1, #128	; 0x80
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f9ae 	bl	800572a <I2C_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e04d      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2bff      	cmp	r3, #255	; 0xff
 80053e0:	d90e      	bls.n	8005400 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	22ff      	movs	r2, #255	; 0xff
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	8979      	ldrh	r1, [r7, #10]
 80053f0:	2300      	movs	r3, #0
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fab9 	bl	8005970 <I2C_TransferConfig>
 80053fe:	e00f      	b.n	8005420 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540e:	b2da      	uxtb	r2, r3
 8005410:	8979      	ldrh	r1, [r7, #10]
 8005412:	2300      	movs	r3, #0
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 faa8 	bl	8005970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d19e      	bne.n	8005368 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f9fb 	bl	800582a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e01a      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2220      	movs	r2, #32
 8005444:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_I2C_Master_Transmit+0x1e4>)
 8005452:	400b      	ands	r3, r1
 8005454:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	80002000 	.word	0x80002000
 8005480:	fe00e800 	.word	0xfe00e800

08005484 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	460b      	mov	r3, r1
 8005492:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	f040 80f1 	bne.w	8005688 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d101      	bne.n	80054ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	e0e7      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_I2C_IsDeviceReady+0x44>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e0e0      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2224      	movs	r2, #36	; 0x24
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_I2C_IsDeviceReady+0x72>
 80054e6:	897b      	ldrh	r3, [r7, #10]
 80054e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054f4:	e004      	b.n	8005500 <HAL_I2C_IsDeviceReady+0x7c>
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005506:	f7fd fe45 	bl	8003194 <HAL_GetTick>
 800550a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b20      	cmp	r3, #32
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005538:	e034      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005540:	d01a      	beq.n	8005578 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fd fe27 	bl	8003194 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <HAL_I2C_IsDeviceReady+0xd4>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10f      	bne.n	8005578 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e088      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b10      	cmp	r3, #16
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055a4:	7ffb      	ldrb	r3, [r7, #31]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <HAL_I2C_IsDeviceReady+0x12c>
 80055aa:	7fbb      	ldrb	r3, [r7, #30]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0c4      	beq.n	800553a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b10      	cmp	r3, #16
 80055bc:	d01a      	beq.n	80055f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2120      	movs	r1, #32
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f8ae 	bl	800572a <I2C_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e058      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2220      	movs	r2, #32
 80055de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e04a      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	2120      	movs	r1, #32
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f893 	bl	800572a <I2C_WaitOnFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e03d      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2210      	movs	r2, #16
 8005614:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2220      	movs	r2, #32
 800561c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d118      	bne.n	8005658 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005634:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	2120      	movs	r1, #32
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f872 	bl	800572a <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e01c      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2220      	movs	r2, #32
 8005656:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3301      	adds	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	f63f af3b 	bhi.w	80054de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	68f9      	ldr	r1, [r7, #12]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
  }
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d4:	b2db      	uxtb	r3, r3
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d103      	bne.n	8005700 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d007      	beq.n	800571e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	619a      	str	r2, [r3, #24]
  }
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800573a:	e022      	b.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005742:	d01e      	beq.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7fd fd26 	bl	8003194 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d113      	bne.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e00f      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	429a      	cmp	r2, r3
 800579e:	d0cd      	beq.n	800573c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057b6:	e02c      	b.n	8005812 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f871 	bl	80058a4 <I2C_IsAcknowledgeFailed>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e02a      	b.n	8005822 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d2:	d01e      	beq.n	8005812 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d4:	f7fd fcde 	bl	8003194 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d302      	bcc.n	80057ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d113      	bne.n	8005812 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e007      	b.n	8005822 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d1cb      	bne.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005836:	e028      	b.n	800588a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f831 	bl	80058a4 <I2C_IsAcknowledgeFailed>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e026      	b.n	800589a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fd fca2 	bl	8003194 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d113      	bne.n	800588a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e007      	b.n	800589a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b20      	cmp	r3, #32
 8005896:	d1cf      	bne.n	8005838 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d151      	bne.n	8005962 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058be:	e022      	b.n	8005906 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c6:	d01e      	beq.n	8005906 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c8:	f7fd fc64 	bl	8003194 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <I2C_IsAcknowledgeFailed+0x3a>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d113      	bne.n	8005906 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e02e      	b.n	8005964 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b20      	cmp	r3, #32
 8005912:	d1d5      	bne.n	80058c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2210      	movs	r2, #16
 800591a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2220      	movs	r2, #32
 8005922:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fedc 	bl	80056e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6859      	ldr	r1, [r3, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <I2C_IsAcknowledgeFailed+0xc8>)
 8005936:	400b      	ands	r3, r1
 8005938:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	f043 0204 	orr.w	r2, r3, #4
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	fe00e800 	.word	0xfe00e800

08005970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	817b      	strh	r3, [r7, #10]
 800597e:	4613      	mov	r3, r2
 8005980:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	0d5b      	lsrs	r3, r3, #21
 800598c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005990:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <I2C_TransferConfig+0x58>)
 8005992:	430b      	orrs	r3, r1
 8005994:	43db      	mvns	r3, r3
 8005996:	ea02 0103 	and.w	r1, r2, r3
 800599a:	897b      	ldrh	r3, [r7, #10]
 800599c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059a0:	7a7b      	ldrb	r3, [r7, #9]
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	03ff63ff 	.word	0x03ff63ff

080059cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d138      	bne.n	8005a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e032      	b.n	8005a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2224      	movs	r2, #36	; 0x24
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e000      	b.n	8005a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
  }
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d139      	bne.n	8005aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e033      	b.n	8005aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2224      	movs	r2, #36	; 0x24
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b08:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8005b10:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4905      	ldr	r1, [pc, #20]	; (8005b38 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40010000 	.word	0x40010000

08005b3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40007000 	.word	0x40007000

08005b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40007000 	.word	0x40007000

08005b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b86:	d130      	bne.n	8005bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b88:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d038      	beq.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ba6:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2232      	movs	r2, #50	; 0x32
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0c9b      	lsrs	r3, r3, #18
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bbc:	e002      	b.n	8005bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bc4:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	d102      	bne.n	8005bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f2      	bne.n	8005bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d110      	bne.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e00f      	b.n	8005c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf6:	d007      	beq.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c00:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40007000 	.word	0x40007000
 8005c1c:	200007d4 	.word	0x200007d4
 8005c20:	431bde83 	.word	0x431bde83

08005c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f000 bc11 	b.w	800645a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c38:	4ba0      	ldr	r3, [pc, #640]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c42:	4b9e      	ldr	r3, [pc, #632]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80e4 	beq.w	8005e22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_RCC_OscConfig+0x4c>
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	f040 808b 	bne.w	8005d7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	f040 8087 	bne.w	8005d7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c70:	4b92      	ldr	r3, [pc, #584]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_OscConfig+0x64>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e3e8      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	4b8b      	ldr	r3, [pc, #556]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x7e>
 8005c98:	4b88      	ldr	r3, [pc, #544]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca0:	e005      	b.n	8005cae <HAL_RCC_OscConfig+0x8a>
 8005ca2:	4b86      	ldr	r3, [pc, #536]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d223      	bcs.n	8005cfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fd78 	bl	80067ac <RCC_SetFlashLatencyFromMSIRange>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e3c9      	b.n	800645a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cc6:	4b7d      	ldr	r3, [pc, #500]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a7c      	ldr	r2, [pc, #496]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005ccc:	f043 0308 	orr.w	r3, r3, #8
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4b7a      	ldr	r3, [pc, #488]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	4977      	ldr	r1, [pc, #476]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce4:	4b75      	ldr	r3, [pc, #468]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	4972      	ldr	r1, [pc, #456]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	604b      	str	r3, [r1, #4]
 8005cf8:	e025      	b.n	8005d46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cfa:	4b70      	ldr	r3, [pc, #448]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6f      	ldr	r2, [pc, #444]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d00:	f043 0308 	orr.w	r3, r3, #8
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	4b6d      	ldr	r3, [pc, #436]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	496a      	ldr	r1, [pc, #424]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d18:	4b68      	ldr	r3, [pc, #416]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	4965      	ldr	r1, [pc, #404]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fd38 	bl	80067ac <RCC_SetFlashLatencyFromMSIRange>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e389      	b.n	800645a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d46:	f000 fc6f 	bl	8006628 <HAL_RCC_GetSysClockFreq>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4b5b      	ldr	r3, [pc, #364]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	4a5a      	ldr	r2, [pc, #360]	; (8005ec0 <HAL_RCC_OscConfig+0x29c>)
 8005d58:	5cd3      	ldrb	r3, [r2, r3]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d62:	4a58      	ldr	r2, [pc, #352]	; (8005ec4 <HAL_RCC_OscConfig+0x2a0>)
 8005d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d66:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <HAL_RCC_OscConfig+0x2a4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd f9c2 	bl	80030f4 <HAL_InitTick>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d052      	beq.n	8005e20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	e36d      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d032      	beq.n	8005dec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d86:	4b4d      	ldr	r3, [pc, #308]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a4c      	ldr	r2, [pc, #304]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d92:	f7fd f9ff 	bl	8003194 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d9a:	f7fd f9fb 	bl	8003194 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e356      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dac:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005db8:	4b40      	ldr	r3, [pc, #256]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dbe:	f043 0308 	orr.w	r3, r3, #8
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b3d      	ldr	r3, [pc, #244]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	493a      	ldr	r1, [pc, #232]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dd6:	4b39      	ldr	r3, [pc, #228]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	4935      	ldr	r1, [pc, #212]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	604b      	str	r3, [r1, #4]
 8005dea:	e01a      	b.n	8005e22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005dec:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a32      	ldr	r2, [pc, #200]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005df8:	f7fd f9cc 	bl	8003194 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e00:	f7fd f9c8 	bl	8003194 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e323      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e12:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1dc>
 8005e1e:	e000      	b.n	8005e22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d073      	beq.n	8005f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d005      	beq.n	8005e40 <HAL_RCC_OscConfig+0x21c>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d10e      	bne.n	8005e58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d10b      	bne.n	8005e58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e40:	4b1e      	ldr	r3, [pc, #120]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d063      	beq.n	8005f14 <HAL_RCC_OscConfig+0x2f0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d15f      	bne.n	8005f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e300      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e60:	d106      	bne.n	8005e70 <HAL_RCC_OscConfig+0x24c>
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e01d      	b.n	8005eac <HAL_RCC_OscConfig+0x288>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e78:	d10c      	bne.n	8005e94 <HAL_RCC_OscConfig+0x270>
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a0f      	ldr	r2, [pc, #60]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	e00b      	b.n	8005eac <HAL_RCC_OscConfig+0x288>
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <HAL_RCC_OscConfig+0x298>)
 8005ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01b      	beq.n	8005eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fd f96e 	bl	8003194 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eba:	e010      	b.n	8005ede <HAL_RCC_OscConfig+0x2ba>
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	0800b838 	.word	0x0800b838
 8005ec4:	200007d4 	.word	0x200007d4
 8005ec8:	200007d8 	.word	0x200007d8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ecc:	f7fd f962 	bl	8003194 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e2bd      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ede:	4baf      	ldr	r3, [pc, #700]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0x2a8>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eec:	f7fd f952 	bl	8003194 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fd f94e 	bl	8003194 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e2a9      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f06:	4ba5      	ldr	r3, [pc, #660]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x2d0>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d060      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_OscConfig+0x310>
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	d119      	bne.n	8005f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d116      	bne.n	8005f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f34:	4b99      	ldr	r3, [pc, #612]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_OscConfig+0x328>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e286      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4c:	4b93      	ldr	r3, [pc, #588]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	061b      	lsls	r3, r3, #24
 8005f5a:	4990      	ldr	r1, [pc, #576]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f60:	e040      	b.n	8005fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d023      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f6a:	4b8c      	ldr	r3, [pc, #560]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a8b      	ldr	r2, [pc, #556]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f76:	f7fd f90d 	bl	8003194 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f7e:	f7fd f909 	bl	8003194 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e264      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f90:	4b82      	ldr	r3, [pc, #520]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b7f      	ldr	r3, [pc, #508]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	497c      	ldr	r1, [pc, #496]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]
 8005fb0:	e018      	b.n	8005fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb2:	4b7a      	ldr	r3, [pc, #488]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a79      	ldr	r2, [pc, #484]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbe:	f7fd f8e9 	bl	8003194 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc6:	f7fd f8e5 	bl	8003194 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e240      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fd8:	4b70      	ldr	r3, [pc, #448]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d03c      	beq.n	800606a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01c      	beq.n	8006032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff8:	4b68      	ldr	r3, [pc, #416]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8005ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffe:	4a67      	ldr	r2, [pc, #412]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006008:	f7fd f8c4 	bl	8003194 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006010:	f7fd f8c0 	bl	8003194 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e21b      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006022:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0ef      	beq.n	8006010 <HAL_RCC_OscConfig+0x3ec>
 8006030:	e01b      	b.n	800606a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006032:	4b5a      	ldr	r3, [pc, #360]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006038:	4a58      	ldr	r2, [pc, #352]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006042:	f7fd f8a7 	bl	8003194 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800604a:	f7fd f8a3 	bl	8003194 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e1fe      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800605c:	4b4f      	ldr	r3, [pc, #316]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1ef      	bne.n	800604a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80a6 	beq.w	80061c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800607c:	4b47      	ldr	r3, [pc, #284]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b44      	ldr	r3, [pc, #272]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	4a43      	ldr	r2, [pc, #268]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	6593      	str	r3, [r2, #88]	; 0x58
 8006094:	4b41      	ldr	r3, [pc, #260]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060a0:	2301      	movs	r3, #1
 80060a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a4:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <HAL_RCC_OscConfig+0x57c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d118      	bne.n	80060e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060b0:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <HAL_RCC_OscConfig+0x57c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a3a      	ldr	r2, [pc, #232]	; (80061a0 <HAL_RCC_OscConfig+0x57c>)
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060bc:	f7fd f86a 	bl	8003194 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fd f866 	bl	8003194 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e1c1      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060d6:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <HAL_RCC_OscConfig+0x57c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d108      	bne.n	80060fc <HAL_RCC_OscConfig+0x4d8>
 80060ea:	4b2c      	ldr	r3, [pc, #176]	; (800619c <HAL_RCC_OscConfig+0x578>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f0:	4a2a      	ldr	r2, [pc, #168]	; (800619c <HAL_RCC_OscConfig+0x578>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060fa:	e024      	b.n	8006146 <HAL_RCC_OscConfig+0x522>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b05      	cmp	r3, #5
 8006102:	d110      	bne.n	8006126 <HAL_RCC_OscConfig+0x502>
 8006104:	4b25      	ldr	r3, [pc, #148]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	4a24      	ldr	r2, [pc, #144]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800610c:	f043 0304 	orr.w	r3, r3, #4
 8006110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006114:	4b21      	ldr	r3, [pc, #132]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	4a20      	ldr	r2, [pc, #128]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006124:	e00f      	b.n	8006146 <HAL_RCC_OscConfig+0x522>
 8006126:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006136:	4b19      	ldr	r3, [pc, #100]	; (800619c <HAL_RCC_OscConfig+0x578>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800613e:	f023 0304 	bic.w	r3, r3, #4
 8006142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d016      	beq.n	800617c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614e:	f7fd f821 	bl	8003194 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006154:	e00a      	b.n	800616c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006156:	f7fd f81d 	bl	8003194 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f241 3288 	movw	r2, #5000	; 0x1388
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e176      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_OscConfig+0x578>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ed      	beq.n	8006156 <HAL_RCC_OscConfig+0x532>
 800617a:	e01a      	b.n	80061b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617c:	f7fd f80a 	bl	8003194 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006182:	e00f      	b.n	80061a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f7fd f806 	bl	8003194 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	4293      	cmp	r3, r2
 8006194:	d906      	bls.n	80061a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e15f      	b.n	800645a <HAL_RCC_OscConfig+0x836>
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
 80061a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061a4:	4baa      	ldr	r3, [pc, #680]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e8      	bne.n	8006184 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b8:	4ba5      	ldr	r3, [pc, #660]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	4aa4      	ldr	r2, [pc, #656]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80061be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d03c      	beq.n	800624a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01c      	beq.n	8006212 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061d8:	4b9d      	ldr	r3, [pc, #628]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80061da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061de:	4a9c      	ldr	r2, [pc, #624]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e8:	f7fc ffd4 	bl	8003194 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f0:	f7fc ffd0 	bl	8003194 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e12b      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006202:	4b93      	ldr	r3, [pc, #588]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ef      	beq.n	80061f0 <HAL_RCC_OscConfig+0x5cc>
 8006210:	e01b      	b.n	800624a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006212:	4b8f      	ldr	r3, [pc, #572]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006218:	4a8d      	ldr	r2, [pc, #564]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006222:	f7fc ffb7 	bl	8003194 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800622a:	f7fc ffb3 	bl	8003194 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e10e      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800623c:	4b84      	ldr	r3, [pc, #528]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800623e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1ef      	bne.n	800622a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8102 	beq.w	8006458 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	2b02      	cmp	r3, #2
 800625a:	f040 80c5 	bne.w	80063e8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800625e:	4b7c      	ldr	r3, [pc, #496]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f003 0203 	and.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	429a      	cmp	r2, r3
 8006270:	d12c      	bne.n	80062cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	3b01      	subs	r3, #1
 800627e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006280:	429a      	cmp	r2, r3
 8006282:	d123      	bne.n	80062cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006290:	429a      	cmp	r2, r3
 8006292:	d11b      	bne.n	80062cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d113      	bne.n	80062cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	3b01      	subs	r3, #1
 80062b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d109      	bne.n	80062cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	3b01      	subs	r3, #1
 80062c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d067      	beq.n	800639c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b0c      	cmp	r3, #12
 80062d0:	d062      	beq.n	8006398 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80062d2:	4b5f      	ldr	r3, [pc, #380]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e0bb      	b.n	800645a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80062e2:	4b5b      	ldr	r3, [pc, #364]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5a      	ldr	r2, [pc, #360]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80062e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062ee:	f7fc ff51 	bl	8003194 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fc ff4d 	bl	8003194 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e0a8      	b.n	800645a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	4b51      	ldr	r3, [pc, #324]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f0      	bne.n	80062f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006314:	4b4e      	ldr	r3, [pc, #312]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	4b4e      	ldr	r3, [pc, #312]	; (8006454 <HAL_RCC_OscConfig+0x830>)
 800631a:	4013      	ands	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006324:	3a01      	subs	r2, #1
 8006326:	0112      	lsls	r2, r2, #4
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800632e:	0212      	lsls	r2, r2, #8
 8006330:	4311      	orrs	r1, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006336:	0852      	lsrs	r2, r2, #1
 8006338:	3a01      	subs	r2, #1
 800633a:	0552      	lsls	r2, r2, #21
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006342:	0852      	lsrs	r2, r2, #1
 8006344:	3a01      	subs	r2, #1
 8006346:	0652      	lsls	r2, r2, #25
 8006348:	4311      	orrs	r1, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800634e:	06d2      	lsls	r2, r2, #27
 8006350:	430a      	orrs	r2, r1
 8006352:	493f      	ldr	r1, [pc, #252]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006354:	4313      	orrs	r3, r2
 8006356:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006358:	4b3d      	ldr	r3, [pc, #244]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a3c      	ldr	r2, [pc, #240]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006364:	4b3a      	ldr	r3, [pc, #232]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4a39      	ldr	r2, [pc, #228]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800636a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006370:	f7fc ff10 	bl	8003194 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006378:	f7fc ff0c 	bl	8003194 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e067      	b.n	800645a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006396:	e05f      	b.n	8006458 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e05e      	b.n	800645a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639c:	4b2c      	ldr	r3, [pc, #176]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d157      	bne.n	8006458 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063a8:	4b29      	ldr	r3, [pc, #164]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063b4:	4b26      	ldr	r3, [pc, #152]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063c0:	f7fc fee8 	bl	8003194 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c8:	f7fc fee4 	bl	8003194 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e03f      	b.n	800645a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063da:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0x7a4>
 80063e6:	e037      	b.n	8006458 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d02d      	beq.n	800644a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ee:	4b18      	ldr	r3, [pc, #96]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a17      	ldr	r2, [pc, #92]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063fa:	4b15      	ldr	r3, [pc, #84]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d105      	bne.n	8006412 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006406:	4b12      	ldr	r3, [pc, #72]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a11      	ldr	r2, [pc, #68]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800640c:	f023 0303 	bic.w	r3, r3, #3
 8006410:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006412:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	4a0e      	ldr	r2, [pc, #56]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 8006418:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800641c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006420:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006422:	f7fc feb7 	bl	8003194 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800642a:	f7fc feb3 	bl	8003194 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e00e      	b.n	800645a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800643c:	4b04      	ldr	r3, [pc, #16]	; (8006450 <HAL_RCC_OscConfig+0x82c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f0      	bne.n	800642a <HAL_RCC_OscConfig+0x806>
 8006448:	e006      	b.n	8006458 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e005      	b.n	800645a <HAL_RCC_OscConfig+0x836>
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0c8      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006478:	4b66      	ldr	r3, [pc, #408]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d910      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b63      	ldr	r3, [pc, #396]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 0207 	bic.w	r2, r3, #7
 800648e:	4961      	ldr	r1, [pc, #388]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b5f      	ldr	r3, [pc, #380]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b0      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d04c      	beq.n	800654e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d107      	bne.n	80064cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064bc:	4b56      	ldr	r3, [pc, #344]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d121      	bne.n	800650c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e09e      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d107      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064d4:	4b50      	ldr	r3, [pc, #320]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e092      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d107      	bne.n	80064fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064ec:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e086      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064fc:	4b46      	ldr	r3, [pc, #280]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e07e      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800650c:	4b42      	ldr	r3, [pc, #264]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f023 0203 	bic.w	r2, r3, #3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	493f      	ldr	r1, [pc, #252]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651e:	f7fc fe39 	bl	8003194 <HAL_GetTick>
 8006522:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006524:	e00a      	b.n	800653c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006526:	f7fc fe35 	bl	8003194 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	f241 3288 	movw	r2, #5000	; 0x1388
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e066      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 020c 	and.w	r2, r3, #12
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	429a      	cmp	r2, r3
 800654c:	d1eb      	bne.n	8006526 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655a:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	492c      	ldr	r1, [pc, #176]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 8006568:	4313      	orrs	r3, r2
 800656a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800656c:	4b29      	ldr	r3, [pc, #164]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d210      	bcs.n	800659c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b26      	ldr	r3, [pc, #152]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 0207 	bic.w	r2, r3, #7
 8006582:	4924      	ldr	r1, [pc, #144]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	4313      	orrs	r3, r2
 8006588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658a:	4b22      	ldr	r3, [pc, #136]	; (8006614 <HAL_RCC_ClockConfig+0x1b0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d001      	beq.n	800659c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e036      	b.n	800660a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4918      	ldr	r1, [pc, #96]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4910      	ldr	r1, [pc, #64]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065da:	f000 f825 	bl	8006628 <HAL_RCC_GetSysClockFreq>
 80065de:	4601      	mov	r1, r0
 80065e0:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <HAL_RCC_ClockConfig+0x1b4>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	091b      	lsrs	r3, r3, #4
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	4a0c      	ldr	r2, [pc, #48]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	5cd3      	ldrb	r3, [r2, r3]
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	fa21 f303 	lsr.w	r3, r1, r3
 80065f6:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <HAL_RCC_ClockConfig+0x1c0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc fd78 	bl	80030f4 <HAL_InitTick>
 8006604:	4603      	mov	r3, r0
 8006606:	72fb      	strb	r3, [r7, #11]

  return status;
 8006608:	7afb      	ldrb	r3, [r7, #11]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40022000 	.word	0x40022000
 8006618:	40021000 	.word	0x40021000
 800661c:	0800b838 	.word	0x0800b838
 8006620:	200007d4 	.word	0x200007d4
 8006624:	200007d8 	.word	0x200007d8

08006628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006628:	b480      	push	{r7}
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	2300      	movs	r3, #0
 8006634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006636:	4b3d      	ldr	r3, [pc, #244]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 030c 	and.w	r3, r3, #12
 800663e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006640:	4b3a      	ldr	r3, [pc, #232]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_GetSysClockFreq+0x34>
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b0c      	cmp	r3, #12
 8006654:	d121      	bne.n	800669a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d11e      	bne.n	800669a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800665c:	4b33      	ldr	r3, [pc, #204]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006668:	4b30      	ldr	r3, [pc, #192]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 800666a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	e005      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006678:	4b2c      	ldr	r3, [pc, #176]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006684:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <HAL_RCC_GetSysClockFreq+0x108>)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10d      	bne.n	80066b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006698:	e00a      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b04      	cmp	r3, #4
 800669e:	d102      	bne.n	80066a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066a0:	4b24      	ldr	r3, [pc, #144]	; (8006734 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e004      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d101      	bne.n	80066b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <HAL_RCC_GetSysClockFreq+0x110>)
 80066ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d133      	bne.n	800671e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d002      	beq.n	80066cc <HAL_RCC_GetSysClockFreq+0xa4>
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d003      	beq.n	80066d2 <HAL_RCC_GetSysClockFreq+0xaa>
 80066ca:	e005      	b.n	80066d8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80066cc:	4b19      	ldr	r3, [pc, #100]	; (8006734 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066ce:	617b      	str	r3, [r7, #20]
      break;
 80066d0:	e005      	b.n	80066de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80066d2:	4b19      	ldr	r3, [pc, #100]	; (8006738 <HAL_RCC_GetSysClockFreq+0x110>)
 80066d4:	617b      	str	r3, [r7, #20]
      break;
 80066d6:	e002      	b.n	80066de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	617b      	str	r3, [r7, #20]
      break;
 80066dc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	3301      	adds	r3, #1
 80066ea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	fb02 f203 	mul.w	r2, r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006702:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006704:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_RCC_GetSysClockFreq+0x104>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	0e5b      	lsrs	r3, r3, #25
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	3301      	adds	r3, #1
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800671e:	69bb      	ldr	r3, [r7, #24]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3724      	adds	r7, #36	; 0x24
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40021000 	.word	0x40021000
 8006730:	0800b850 	.word	0x0800b850
 8006734:	00f42400 	.word	0x00f42400
 8006738:	007a1200 	.word	0x007a1200

0800673c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006740:	4b03      	ldr	r3, [pc, #12]	; (8006750 <HAL_RCC_GetHCLKFreq+0x14>)
 8006742:	681b      	ldr	r3, [r3, #0]
}
 8006744:	4618      	mov	r0, r3
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	200007d4 	.word	0x200007d4

08006754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006758:	f7ff fff0 	bl	800673c <HAL_RCC_GetHCLKFreq>
 800675c:	4601      	mov	r1, r0
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	0a1b      	lsrs	r3, r3, #8
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <HAL_RCC_GetPCLK1Freq+0x28>)
 800676a:	5cd3      	ldrb	r3, [r2, r3]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40021000 	.word	0x40021000
 800677c:	0800b848 	.word	0x0800b848

08006780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006784:	f7ff ffda 	bl	800673c <HAL_RCC_GetHCLKFreq>
 8006788:	4601      	mov	r1, r0
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0adb      	lsrs	r3, r3, #11
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4a04      	ldr	r2, [pc, #16]	; (80067a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006796:	5cd3      	ldrb	r3, [r2, r3]
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40021000 	.word	0x40021000
 80067a8:	0800b848 	.word	0x0800b848

080067ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067b8:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80067c4:	f7ff f9ca 	bl	8005b5c <HAL_PWREx_GetVoltageRange>
 80067c8:	6178      	str	r0, [r7, #20]
 80067ca:	e014      	b.n	80067f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80067cc:	4b25      	ldr	r3, [pc, #148]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	4a24      	ldr	r2, [pc, #144]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d6:	6593      	str	r3, [r2, #88]	; 0x58
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80067e4:	f7ff f9ba 	bl	8005b5c <HAL_PWREx_GetVoltageRange>
 80067e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80067ea:	4b1e      	ldr	r3, [pc, #120]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ee:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d10b      	bne.n	8006816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b80      	cmp	r3, #128	; 0x80
 8006802:	d919      	bls.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2ba0      	cmp	r3, #160	; 0xa0
 8006808:	d902      	bls.n	8006810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800680a:	2302      	movs	r3, #2
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e013      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006810:	2301      	movs	r3, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	e010      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b80      	cmp	r3, #128	; 0x80
 800681a:	d902      	bls.n	8006822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800681c:	2303      	movs	r3, #3
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	e00a      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b80      	cmp	r3, #128	; 0x80
 8006826:	d102      	bne.n	800682e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006828:	2302      	movs	r3, #2
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	e004      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b70      	cmp	r3, #112	; 0x70
 8006832:	d101      	bne.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006834:	2301      	movs	r3, #1
 8006836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f023 0207 	bic.w	r2, r3, #7
 8006840:	4909      	ldr	r1, [pc, #36]	; (8006868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006848:	4b07      	ldr	r3, [pc, #28]	; (8006868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	d001      	beq.n	800685a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40021000 	.word	0x40021000
 8006868:	40022000 	.word	0x40022000

0800686c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006874:	2300      	movs	r3, #0
 8006876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006878:	2300      	movs	r3, #0
 800687a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006884:	2b00      	cmp	r3, #0
 8006886:	d02f      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006890:	d005      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006892:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006896:	d015      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 800689c:	e00f      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800689e:	4bac      	ldr	r3, [pc, #688]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	4aab      	ldr	r2, [pc, #684]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068aa:	e00c      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 f9dc 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	74fb      	strb	r3, [r7, #19]
      break;
 80068c2:	e000      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80068c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c6:	7cfb      	ldrb	r3, [r7, #19]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068cc:	4ba0      	ldr	r3, [pc, #640]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	499d      	ldr	r1, [pc, #628]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068e2:	e001      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e4:	7cfb      	ldrb	r3, [r7, #19]
 80068e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8099 	beq.w	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068f6:	2300      	movs	r3, #0
 80068f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068fa:	4b95      	ldr	r3, [pc, #596]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006910:	4b8f      	ldr	r3, [pc, #572]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	4a8e      	ldr	r2, [pc, #568]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691a:	6593      	str	r3, [r2, #88]	; 0x58
 800691c:	4b8c      	ldr	r3, [pc, #560]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006928:	2301      	movs	r3, #1
 800692a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800692c:	4b89      	ldr	r3, [pc, #548]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a88      	ldr	r2, [pc, #544]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006938:	f7fc fc2c 	bl	8003194 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800693e:	e009      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006940:	f7fc fc28 	bl	8003194 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d902      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	74fb      	strb	r3, [r7, #19]
        break;
 8006952:	e005      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006954:	4b7f      	ldr	r3, [pc, #508]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0ef      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8006960:	7cfb      	ldrb	r3, [r7, #19]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d155      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006966:	4b7a      	ldr	r3, [pc, #488]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	429a      	cmp	r2, r3
 8006980:	d019      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006982:	4b73      	ldr	r3, [pc, #460]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800698e:	4b70      	ldr	r3, [pc, #448]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006994:	4a6e      	ldr	r2, [pc, #440]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800699e:	4b6c      	ldr	r3, [pc, #432]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	4a6a      	ldr	r2, [pc, #424]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069ae:	4a68      	ldr	r2, [pc, #416]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d016      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fc fbe8 	bl	8003194 <HAL_GetTick>
 80069c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069c6:	e00b      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fc fbe4 	bl	8003194 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d902      	bls.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	74fb      	strb	r3, [r7, #19]
            break;
 80069de:	e006      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e0:	4b5b      	ldr	r3, [pc, #364]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0ec      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80069ee:	7cfb      	ldrb	r3, [r7, #19]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10b      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f4:	4b56      	ldr	r3, [pc, #344]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a02:	4953      	ldr	r1, [pc, #332]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a0a:	e004      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a0c:	7cfb      	ldrb	r3, [r7, #19]
 8006a0e:	74bb      	strb	r3, [r7, #18]
 8006a10:	e001      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
 8006a14:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a16:	7c7b      	ldrb	r3, [r7, #17]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d105      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1c:	4b4c      	ldr	r3, [pc, #304]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a20:	4a4b      	ldr	r2, [pc, #300]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a34:	4b46      	ldr	r3, [pc, #280]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	f023 0203 	bic.w	r2, r3, #3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4943      	ldr	r1, [pc, #268]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a56:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	f023 020c 	bic.w	r2, r3, #12
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	493a      	ldr	r1, [pc, #232]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a78:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	4932      	ldr	r1, [pc, #200]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a9a:	4b2d      	ldr	r3, [pc, #180]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	4929      	ldr	r1, [pc, #164]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006abc:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	4921      	ldr	r1, [pc, #132]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ade:	4b1c      	ldr	r3, [pc, #112]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4918      	ldr	r1, [pc, #96]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	4910      	ldr	r1, [pc, #64]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02c      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	4907      	ldr	r1, [pc, #28]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b40:	d10a      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b42:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	4a02      	ldr	r2, [pc, #8]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b4c:	60d3      	str	r3, [r2, #12]
 8006b4e:	e015      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006b50:	40021000 	.word	0x40021000
 8006b54:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	2101      	movs	r1, #1
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f881 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d028      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b88:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	492d      	ldr	r1, [pc, #180]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ba8:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb2:	60d3      	str	r3, [r2, #12]
 8006bb4:	e011      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bbe:	d10c      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f852 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bd0:	7cfb      	ldrb	r3, [r7, #19]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01c      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006be6:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf4:	4915      	ldr	r1, [pc, #84]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f82f 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c16:	7cfb      	ldrb	r3, [r7, #19]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
 8006c1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c2c:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3a:	4904      	ldr	r1, [pc, #16]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c42:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40021000 	.word	0x40021000

08006c50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c5a:	f043 0304 	orr.w	r3, r3, #4
 8006c5e:	6013      	str	r3, [r2, #0]
}
 8006c60:	bf00      	nop
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000

08006c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c7e:	4b73      	ldr	r3, [pc, #460]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d018      	beq.n	8006cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c8a:	4b70      	ldr	r3, [pc, #448]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f003 0203 	and.w	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10d      	bne.n	8006cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ca2:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d044      	beq.n	8006d40 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	73fb      	strb	r3, [r7, #15]
 8006cba:	e041      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d00c      	beq.n	8006cde <RCCEx_PLLSAI1_Config+0x6e>
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d013      	beq.n	8006cf0 <RCCEx_PLLSAI1_Config+0x80>
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d120      	bne.n	8006d0e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ccc:	4b5f      	ldr	r3, [pc, #380]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11d      	bne.n	8006d14 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cdc:	e01a      	b.n	8006d14 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cde:	4b5b      	ldr	r3, [pc, #364]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d116      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cee:	e013      	b.n	8006d18 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cf0:	4b56      	ldr	r3, [pc, #344]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10f      	bne.n	8006d1c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cfc:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d0c:	e006      	b.n	8006d1c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	73fb      	strb	r3, [r7, #15]
      break;
 8006d12:	e004      	b.n	8006d1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006d1c:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10d      	bne.n	8006d40 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d24:	4b49      	ldr	r3, [pc, #292]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	4944      	ldr	r1, [pc, #272]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d17c      	bne.n	8006e40 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d52:	f7fc fa1f 	bl	8003194 <HAL_GetTick>
 8006d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d58:	e009      	b.n	8006d6e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d5a:	f7fc fa1b 	bl	8003194 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d902      	bls.n	8006d6e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	73fb      	strb	r3, [r7, #15]
        break;
 8006d6c:	e005      	b.n	8006d7a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d6e:	4b37      	ldr	r3, [pc, #220]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ef      	bne.n	8006d5a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d15f      	bne.n	8006e40 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d110      	bne.n	8006da8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d86:	4b31      	ldr	r3, [pc, #196]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006d8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	0211      	lsls	r1, r2, #8
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68d2      	ldr	r2, [r2, #12]
 8006d9c:	06d2      	lsls	r2, r2, #27
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	492a      	ldr	r1, [pc, #168]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	610b      	str	r3, [r1, #16]
 8006da6:	e027      	b.n	8006df8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d112      	bne.n	8006dd4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dae:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006db6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6892      	ldr	r2, [r2, #8]
 8006dbe:	0211      	lsls	r1, r2, #8
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6912      	ldr	r2, [r2, #16]
 8006dc4:	0852      	lsrs	r2, r2, #1
 8006dc6:	3a01      	subs	r2, #1
 8006dc8:	0552      	lsls	r2, r2, #21
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	491f      	ldr	r1, [pc, #124]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	610b      	str	r3, [r1, #16]
 8006dd2:	e011      	b.n	8006df8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ddc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6892      	ldr	r2, [r2, #8]
 8006de4:	0211      	lsls	r1, r2, #8
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6952      	ldr	r2, [r2, #20]
 8006dea:	0852      	lsrs	r2, r2, #1
 8006dec:	3a01      	subs	r2, #1
 8006dee:	0652      	lsls	r2, r2, #25
 8006df0:	430a      	orrs	r2, r1
 8006df2:	4916      	ldr	r1, [pc, #88]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006dfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e04:	f7fc f9c6 	bl	8003194 <HAL_GetTick>
 8006e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e0a:	e009      	b.n	8006e20 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e0c:	f7fc f9c2 	bl	8003194 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d902      	bls.n	8006e20 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8006e1e:	e005      	b.n	8006e2c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0ef      	beq.n	8006e0c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e32:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	4904      	ldr	r1, [pc, #16]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40021000 	.word	0x40021000

08006e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e049      	b.n	8006ef6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc f858 	bl	8002f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4610      	mov	r0, r2
 8006e90:	f000 f93c 	bl	800710c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d001      	beq.n	8006f18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e033      	b.n	8006f80 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <HAL_TIM_Base_Start+0x8c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <HAL_TIM_Base_Start+0x3e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f32:	d004      	beq.n	8006f3e <HAL_TIM_Base_Start+0x3e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <HAL_TIM_Base_Start+0x90>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d115      	bne.n	8006f6a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <HAL_TIM_Base_Start+0x94>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b06      	cmp	r3, #6
 8006f4e:	d015      	beq.n	8006f7c <HAL_TIM_Base_Start+0x7c>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f56:	d011      	beq.n	8006f7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f68:	e008      	b.n	8006f7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e000      	b.n	8006f7e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40014000 	.word	0x40014000
 8006f94:	00010007 	.word	0x00010007

08006f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_ConfigClockSource+0x18>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0a8      	b.n	8007102 <HAL_TIM_ConfigClockSource+0x16a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d067      	beq.n	80070bc <HAL_TIM_ConfigClockSource+0x124>
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d80b      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x70>
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d073      	beq.n	80070dc <HAL_TIM_ConfigClockSource+0x144>
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d802      	bhi.n	8006ffe <HAL_TIM_ConfigClockSource+0x66>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d06f      	beq.n	80070dc <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ffc:	e078      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d06c      	beq.n	80070dc <HAL_TIM_ConfigClockSource+0x144>
 8007002:	2b30      	cmp	r3, #48	; 0x30
 8007004:	d06a      	beq.n	80070dc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007006:	e073      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007008:	2b70      	cmp	r3, #112	; 0x70
 800700a:	d00d      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0x90>
 800700c:	2b70      	cmp	r3, #112	; 0x70
 800700e:	d804      	bhi.n	800701a <HAL_TIM_ConfigClockSource+0x82>
 8007010:	2b50      	cmp	r3, #80	; 0x50
 8007012:	d033      	beq.n	800707c <HAL_TIM_ConfigClockSource+0xe4>
 8007014:	2b60      	cmp	r3, #96	; 0x60
 8007016:	d041      	beq.n	800709c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007018:	e06a      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d066      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x156>
 8007020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007024:	d017      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007026:	e063      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6899      	ldr	r1, [r3, #8]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f000 f946 	bl	80072c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800704a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	609a      	str	r2, [r3, #8]
      break;
 8007054:	e04c      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6899      	ldr	r1, [r3, #8]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f000 f92f 	bl	80072c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007078:	609a      	str	r2, [r3, #8]
      break;
 800707a:	e039      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	461a      	mov	r2, r3
 800708a:	f000 f8a3 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2150      	movs	r1, #80	; 0x50
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f8fc 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800709a:	e029      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6859      	ldr	r1, [r3, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	461a      	mov	r2, r3
 80070aa:	f000 f8c2 	bl	8007232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2160      	movs	r1, #96	; 0x60
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 f8ec 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 80070ba:	e019      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	461a      	mov	r2, r3
 80070ca:	f000 f883 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2140      	movs	r1, #64	; 0x40
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f8dc 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 80070da:	e009      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f000 f8d3 	bl	8007292 <TIM_ITRx_SetConfig>
        break;
 80070ec:	e000      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80070ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a2a      	ldr	r2, [pc, #168]	; (80071c8 <TIM_Base_SetConfig+0xbc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_Base_SetConfig+0x20>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d108      	bne.n	800713e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a21      	ldr	r2, [pc, #132]	; (80071c8 <TIM_Base_SetConfig+0xbc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <TIM_Base_SetConfig+0x52>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714c:	d007      	beq.n	800715e <TIM_Base_SetConfig+0x52>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <TIM_Base_SetConfig+0xc0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_Base_SetConfig+0x52>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <TIM_Base_SetConfig+0xc4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d108      	bne.n	8007170 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a0c      	ldr	r2, [pc, #48]	; (80071c8 <TIM_Base_SetConfig+0xbc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_Base_SetConfig+0xa0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <TIM_Base_SetConfig+0xc0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0xa0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a0a      	ldr	r2, [pc, #40]	; (80071d0 <TIM_Base_SetConfig+0xc4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400

080071d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 030a 	bic.w	r3, r3, #10
 8007210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f023 0210 	bic.w	r2, r3, #16
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800725c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	031b      	lsls	r3, r3, #12
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800726e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f043 0307 	orr.w	r3, r3, #7
 80072b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	609a      	str	r2, [r3, #8]
}
 80072bc:	bf00      	nop
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	609a      	str	r2, [r3, #8]
}
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e04f      	b.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a21      	ldr	r2, [pc, #132]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007350:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a14      	ldr	r2, [pc, #80]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007388:	d004      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10c      	bne.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40014000 	.word	0x40014000

080073d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e040      	b.n	8007468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fb fde6 	bl	8002fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2224      	movs	r2, #36	; 0x24
 8007400:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f8c0 	bl	8007598 <UART_SetConfig>
 8007418:	4603      	mov	r3, r0
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e022      	b.n	8007468 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fac4 	bl	80079b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800743e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800744e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fb4b 	bl	8007afc <UART_CheckIdleState>
 8007466:	4603      	mov	r3, r0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08a      	sub	sp, #40	; 0x28
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4613      	mov	r3, r2
 800747e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007484:	2b20      	cmp	r3, #32
 8007486:	f040 8081 	bne.w	800758c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_UART_Transmit+0x26>
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e079      	b.n	800758e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Transmit+0x38>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e072      	b.n	800758e <HAL_UART_Transmit+0x11e>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2221      	movs	r2, #33	; 0x21
 80074ba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80074bc:	f7fb fe6a 	bl	8003194 <HAL_GetTick>
 80074c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	88fa      	ldrh	r2, [r7, #6]
 80074c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d108      	bne.n	80074ee <HAL_UART_Transmit+0x7e>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	e003      	b.n	80074f6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80074fe:	e02d      	b.n	800755c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	2180      	movs	r1, #128	; 0x80
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fb3b 	bl	8007b86 <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e039      	b.n	800758e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	881a      	ldrh	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752c:	b292      	uxth	r2, r2
 800752e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	3302      	adds	r3, #2
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e008      	b.n	800754a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	b292      	uxth	r2, r2
 8007542:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	3301      	adds	r3, #1
 8007548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1cb      	bne.n	8007500 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2200      	movs	r2, #0
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fb07 	bl	8007b86 <UART_WaitOnFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e005      	b.n	800758e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800758c:	2302      	movs	r3, #2
  }
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007598:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800759c:	b088      	sub	sp, #32
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4bb0      	ldr	r3, [pc, #704]	; (8007888 <UART_SetConfig+0x2f0>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	69f9      	ldr	r1, [r7, #28]
 80075ce:	430b      	orrs	r3, r1
 80075d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4aa6      	ldr	r2, [pc, #664]	; (800788c <UART_SetConfig+0x2f4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	4313      	orrs	r3, r2
 8007600:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a9d      	ldr	r2, [pc, #628]	; (8007890 <UART_SetConfig+0x2f8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d121      	bne.n	8007664 <UART_SetConfig+0xcc>
 8007620:	4b9c      	ldr	r3, [pc, #624]	; (8007894 <UART_SetConfig+0x2fc>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d816      	bhi.n	800765c <UART_SetConfig+0xc4>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <UART_SetConfig+0x9c>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007645 	.word	0x08007645
 8007638:	08007651 	.word	0x08007651
 800763c:	0800764b 	.word	0x0800764b
 8007640:	08007657 	.word	0x08007657
 8007644:	2301      	movs	r3, #1
 8007646:	76fb      	strb	r3, [r7, #27]
 8007648:	e072      	b.n	8007730 <UART_SetConfig+0x198>
 800764a:	2302      	movs	r3, #2
 800764c:	76fb      	strb	r3, [r7, #27]
 800764e:	e06f      	b.n	8007730 <UART_SetConfig+0x198>
 8007650:	2304      	movs	r3, #4
 8007652:	76fb      	strb	r3, [r7, #27]
 8007654:	e06c      	b.n	8007730 <UART_SetConfig+0x198>
 8007656:	2308      	movs	r3, #8
 8007658:	76fb      	strb	r3, [r7, #27]
 800765a:	e069      	b.n	8007730 <UART_SetConfig+0x198>
 800765c:	2310      	movs	r3, #16
 800765e:	76fb      	strb	r3, [r7, #27]
 8007660:	bf00      	nop
 8007662:	e065      	b.n	8007730 <UART_SetConfig+0x198>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a8b      	ldr	r2, [pc, #556]	; (8007898 <UART_SetConfig+0x300>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d134      	bne.n	80076d8 <UART_SetConfig+0x140>
 800766e:	4b89      	ldr	r3, [pc, #548]	; (8007894 <UART_SetConfig+0x2fc>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f003 030c 	and.w	r3, r3, #12
 8007678:	2b0c      	cmp	r3, #12
 800767a:	d829      	bhi.n	80076d0 <UART_SetConfig+0x138>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <UART_SetConfig+0xec>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	080076b9 	.word	0x080076b9
 8007688:	080076d1 	.word	0x080076d1
 800768c:	080076d1 	.word	0x080076d1
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076c5 	.word	0x080076c5
 8007698:	080076d1 	.word	0x080076d1
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	080076bf 	.word	0x080076bf
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d1 	.word	0x080076d1
 80076b4:	080076cb 	.word	0x080076cb
 80076b8:	2300      	movs	r3, #0
 80076ba:	76fb      	strb	r3, [r7, #27]
 80076bc:	e038      	b.n	8007730 <UART_SetConfig+0x198>
 80076be:	2302      	movs	r3, #2
 80076c0:	76fb      	strb	r3, [r7, #27]
 80076c2:	e035      	b.n	8007730 <UART_SetConfig+0x198>
 80076c4:	2304      	movs	r3, #4
 80076c6:	76fb      	strb	r3, [r7, #27]
 80076c8:	e032      	b.n	8007730 <UART_SetConfig+0x198>
 80076ca:	2308      	movs	r3, #8
 80076cc:	76fb      	strb	r3, [r7, #27]
 80076ce:	e02f      	b.n	8007730 <UART_SetConfig+0x198>
 80076d0:	2310      	movs	r3, #16
 80076d2:	76fb      	strb	r3, [r7, #27]
 80076d4:	bf00      	nop
 80076d6:	e02b      	b.n	8007730 <UART_SetConfig+0x198>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6b      	ldr	r2, [pc, #428]	; (800788c <UART_SetConfig+0x2f4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d124      	bne.n	800772c <UART_SetConfig+0x194>
 80076e2:	4b6c      	ldr	r3, [pc, #432]	; (8007894 <UART_SetConfig+0x2fc>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f0:	d012      	beq.n	8007718 <UART_SetConfig+0x180>
 80076f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f6:	d802      	bhi.n	80076fe <UART_SetConfig+0x166>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <UART_SetConfig+0x174>
 80076fc:	e012      	b.n	8007724 <UART_SetConfig+0x18c>
 80076fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007702:	d006      	beq.n	8007712 <UART_SetConfig+0x17a>
 8007704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007708:	d009      	beq.n	800771e <UART_SetConfig+0x186>
 800770a:	e00b      	b.n	8007724 <UART_SetConfig+0x18c>
 800770c:	2300      	movs	r3, #0
 800770e:	76fb      	strb	r3, [r7, #27]
 8007710:	e00e      	b.n	8007730 <UART_SetConfig+0x198>
 8007712:	2302      	movs	r3, #2
 8007714:	76fb      	strb	r3, [r7, #27]
 8007716:	e00b      	b.n	8007730 <UART_SetConfig+0x198>
 8007718:	2304      	movs	r3, #4
 800771a:	76fb      	strb	r3, [r7, #27]
 800771c:	e008      	b.n	8007730 <UART_SetConfig+0x198>
 800771e:	2308      	movs	r3, #8
 8007720:	76fb      	strb	r3, [r7, #27]
 8007722:	e005      	b.n	8007730 <UART_SetConfig+0x198>
 8007724:	2310      	movs	r3, #16
 8007726:	76fb      	strb	r3, [r7, #27]
 8007728:	bf00      	nop
 800772a:	e001      	b.n	8007730 <UART_SetConfig+0x198>
 800772c:	2310      	movs	r3, #16
 800772e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a55      	ldr	r2, [pc, #340]	; (800788c <UART_SetConfig+0x2f4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d174      	bne.n	8007824 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800773a:	7efb      	ldrb	r3, [r7, #27]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d824      	bhi.n	800778a <UART_SetConfig+0x1f2>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x1b0>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	0800776d 	.word	0x0800776d
 800774c:	0800778b 	.word	0x0800778b
 8007750:	08007775 	.word	0x08007775
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800777b 	.word	0x0800777b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	0800778b 	.word	0x0800778b
 8007764:	0800778b 	.word	0x0800778b
 8007768:	08007783 	.word	0x08007783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800776c:	f7fe fff2 	bl	8006754 <HAL_RCC_GetPCLK1Freq>
 8007770:	6178      	str	r0, [r7, #20]
        break;
 8007772:	e00f      	b.n	8007794 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b49      	ldr	r3, [pc, #292]	; (800789c <UART_SetConfig+0x304>)
 8007776:	617b      	str	r3, [r7, #20]
        break;
 8007778:	e00c      	b.n	8007794 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fe ff55 	bl	8006628 <HAL_RCC_GetSysClockFreq>
 800777e:	6178      	str	r0, [r7, #20]
        break;
 8007780:	e008      	b.n	8007794 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007786:	617b      	str	r3, [r7, #20]
        break;
 8007788:	e004      	b.n	8007794 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	76bb      	strb	r3, [r7, #26]
        break;
 8007792:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8100 	beq.w	800799c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	4413      	add	r3, r2
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d305      	bcc.n	80077b8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d902      	bls.n	80077be <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	76bb      	strb	r3, [r7, #26]
 80077bc:	e0ee      	b.n	800799c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	4619      	mov	r1, r3
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	f04f 0300 	mov.w	r3, #0
 80077ca:	f04f 0400 	mov.w	r4, #0
 80077ce:	0214      	lsls	r4, r2, #8
 80077d0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80077d4:	020b      	lsls	r3, r1, #8
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6852      	ldr	r2, [r2, #4]
 80077da:	0852      	lsrs	r2, r2, #1
 80077dc:	4611      	mov	r1, r2
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	eb13 0b01 	adds.w	fp, r3, r1
 80077e6:	eb44 0c02 	adc.w	ip, r4, r2
 80077ea:	4658      	mov	r0, fp
 80077ec:	4661      	mov	r1, ip
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f04f 0400 	mov.w	r4, #0
 80077f6:	461a      	mov	r2, r3
 80077f8:	4623      	mov	r3, r4
 80077fa:	f7f9 f9d5 	bl	8000ba8 <__aeabi_uldivmod>
 80077fe:	4603      	mov	r3, r0
 8007800:	460c      	mov	r4, r1
 8007802:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780a:	d308      	bcc.n	800781e <UART_SetConfig+0x286>
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007812:	d204      	bcs.n	800781e <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	60da      	str	r2, [r3, #12]
 800781c:	e0be      	b.n	800799c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	76bb      	strb	r3, [r7, #26]
 8007822:	e0bb      	b.n	800799c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782c:	d169      	bne.n	8007902 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 800782e:	7efb      	ldrb	r3, [r7, #27]
 8007830:	2b08      	cmp	r3, #8
 8007832:	d835      	bhi.n	80078a0 <UART_SetConfig+0x308>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <UART_SetConfig+0x2a4>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	08007861 	.word	0x08007861
 8007840:	08007869 	.word	0x08007869
 8007844:	08007871 	.word	0x08007871
 8007848:	080078a1 	.word	0x080078a1
 800784c:	08007877 	.word	0x08007877
 8007850:	080078a1 	.word	0x080078a1
 8007854:	080078a1 	.word	0x080078a1
 8007858:	080078a1 	.word	0x080078a1
 800785c:	0800787f 	.word	0x0800787f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007860:	f7fe ff78 	bl	8006754 <HAL_RCC_GetPCLK1Freq>
 8007864:	6178      	str	r0, [r7, #20]
        break;
 8007866:	e020      	b.n	80078aa <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007868:	f7fe ff8a 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 800786c:	6178      	str	r0, [r7, #20]
        break;
 800786e:	e01c      	b.n	80078aa <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <UART_SetConfig+0x304>)
 8007872:	617b      	str	r3, [r7, #20]
        break;
 8007874:	e019      	b.n	80078aa <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007876:	f7fe fed7 	bl	8006628 <HAL_RCC_GetSysClockFreq>
 800787a:	6178      	str	r0, [r7, #20]
        break;
 800787c:	e015      	b.n	80078aa <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007882:	617b      	str	r3, [r7, #20]
        break;
 8007884:	e011      	b.n	80078aa <UART_SetConfig+0x312>
 8007886:	bf00      	nop
 8007888:	efff69f3 	.word	0xefff69f3
 800788c:	40008000 	.word	0x40008000
 8007890:	40013800 	.word	0x40013800
 8007894:	40021000 	.word	0x40021000
 8007898:	40004400 	.word	0x40004400
 800789c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	76bb      	strb	r3, [r7, #26]
        break;
 80078a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d075      	beq.n	800799c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	005a      	lsls	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	441a      	add	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b0f      	cmp	r3, #15
 80078cc:	d916      	bls.n	80078fc <UART_SetConfig+0x364>
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d4:	d212      	bcs.n	80078fc <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f023 030f 	bic.w	r3, r3, #15
 80078de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	89fa      	ldrh	r2, [r7, #14]
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	e04f      	b.n	800799c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	76bb      	strb	r3, [r7, #26]
 8007900:	e04c      	b.n	800799c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007902:	7efb      	ldrb	r3, [r7, #27]
 8007904:	2b08      	cmp	r3, #8
 8007906:	d828      	bhi.n	800795a <UART_SetConfig+0x3c2>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x378>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007935 	.word	0x08007935
 8007914:	0800793d 	.word	0x0800793d
 8007918:	08007945 	.word	0x08007945
 800791c:	0800795b 	.word	0x0800795b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800795b 	.word	0x0800795b
 8007928:	0800795b 	.word	0x0800795b
 800792c:	0800795b 	.word	0x0800795b
 8007930:	08007953 	.word	0x08007953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007934:	f7fe ff0e 	bl	8006754 <HAL_RCC_GetPCLK1Freq>
 8007938:	6178      	str	r0, [r7, #20]
        break;
 800793a:	e013      	b.n	8007964 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800793c:	f7fe ff20 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 8007940:	6178      	str	r0, [r7, #20]
        break;
 8007942:	e00f      	b.n	8007964 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007944:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <UART_SetConfig+0x41c>)
 8007946:	617b      	str	r3, [r7, #20]
        break;
 8007948:	e00c      	b.n	8007964 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800794a:	f7fe fe6d 	bl	8006628 <HAL_RCC_GetSysClockFreq>
 800794e:	6178      	str	r0, [r7, #20]
        break;
 8007950:	e008      	b.n	8007964 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007956:	617b      	str	r3, [r7, #20]
        break;
 8007958:	e004      	b.n	8007964 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	76bb      	strb	r3, [r7, #26]
        break;
 8007962:	bf00      	nop
    }

    if (pclk != 0U)
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d018      	beq.n	800799c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	085a      	lsrs	r2, r3, #1
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	441a      	add	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	fbb2 f3f3 	udiv	r3, r2, r3
 800797c:	b29b      	uxth	r3, r3
 800797e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d908      	bls.n	8007998 <UART_SetConfig+0x400>
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d204      	bcs.n	8007998 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e001      	b.n	800799c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80079a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80079b4:	00f42400 	.word	0x00f42400

080079b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01a      	beq.n	8007ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab6:	d10a      	bne.n	8007ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b0a:	f7fb fb43 	bl	8003194 <HAL_GetTick>
 8007b0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d10e      	bne.n	8007b3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f82a 	bl	8007b86 <UART_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e020      	b.n	8007b7e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d10e      	bne.n	8007b68 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f814 	bl	8007b86 <UART_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e00a      	b.n	8007b7e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	4613      	mov	r3, r2
 8007b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b96:	e05d      	b.n	8007c54 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9e:	d059      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba0:	f7fb faf8 	bl	8003194 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d11b      	bne.n	8007bee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bc4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e042      	b.n	8007c74 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02b      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0a:	d123      	bne.n	8007c54 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c24:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e00f      	b.n	8007c74 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d092      	beq.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <__errno>:
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <__errno+0x8>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	200007e0 	.word	0x200007e0

08007c88 <__libc_init_array>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4e0d      	ldr	r6, [pc, #52]	; (8007cc0 <__libc_init_array+0x38>)
 8007c8c:	4c0d      	ldr	r4, [pc, #52]	; (8007cc4 <__libc_init_array+0x3c>)
 8007c8e:	1ba4      	subs	r4, r4, r6
 8007c90:	10a4      	asrs	r4, r4, #2
 8007c92:	2500      	movs	r5, #0
 8007c94:	42a5      	cmp	r5, r4
 8007c96:	d109      	bne.n	8007cac <__libc_init_array+0x24>
 8007c98:	4e0b      	ldr	r6, [pc, #44]	; (8007cc8 <__libc_init_array+0x40>)
 8007c9a:	4c0c      	ldr	r4, [pc, #48]	; (8007ccc <__libc_init_array+0x44>)
 8007c9c:	f002 fd6c 	bl	800a778 <_init>
 8007ca0:	1ba4      	subs	r4, r4, r6
 8007ca2:	10a4      	asrs	r4, r4, #2
 8007ca4:	2500      	movs	r5, #0
 8007ca6:	42a5      	cmp	r5, r4
 8007ca8:	d105      	bne.n	8007cb6 <__libc_init_array+0x2e>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cb0:	4798      	blx	r3
 8007cb2:	3501      	adds	r5, #1
 8007cb4:	e7ee      	b.n	8007c94 <__libc_init_array+0xc>
 8007cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cba:	4798      	blx	r3
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	e7f2      	b.n	8007ca6 <__libc_init_array+0x1e>
 8007cc0:	0800bb48 	.word	0x0800bb48
 8007cc4:	0800bb48 	.word	0x0800bb48
 8007cc8:	0800bb48 	.word	0x0800bb48
 8007ccc:	0800bb4c 	.word	0x0800bb4c

08007cd0 <memset>:
 8007cd0:	4402      	add	r2, r0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d100      	bne.n	8007cda <memset+0xa>
 8007cd8:	4770      	bx	lr
 8007cda:	f803 1b01 	strb.w	r1, [r3], #1
 8007cde:	e7f9      	b.n	8007cd4 <memset+0x4>

08007ce0 <__cvt>:
 8007ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	ec55 4b10 	vmov	r4, r5, d0
 8007ce8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007cea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cee:	2d00      	cmp	r5, #0
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	4691      	mov	r9, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	bfb8      	it	lt
 8007cf8:	4622      	movlt	r2, r4
 8007cfa:	462b      	mov	r3, r5
 8007cfc:	f027 0720 	bic.w	r7, r7, #32
 8007d00:	bfbb      	ittet	lt
 8007d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d06:	461d      	movlt	r5, r3
 8007d08:	2300      	movge	r3, #0
 8007d0a:	232d      	movlt	r3, #45	; 0x2d
 8007d0c:	bfb8      	it	lt
 8007d0e:	4614      	movlt	r4, r2
 8007d10:	2f46      	cmp	r7, #70	; 0x46
 8007d12:	700b      	strb	r3, [r1, #0]
 8007d14:	d004      	beq.n	8007d20 <__cvt+0x40>
 8007d16:	2f45      	cmp	r7, #69	; 0x45
 8007d18:	d100      	bne.n	8007d1c <__cvt+0x3c>
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	e000      	b.n	8007d22 <__cvt+0x42>
 8007d20:	2103      	movs	r1, #3
 8007d22:	ab03      	add	r3, sp, #12
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	ab02      	add	r3, sp, #8
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	ec45 4b10 	vmov	d0, r4, r5
 8007d32:	f000 fe21 	bl	8008978 <_dtoa_r>
 8007d36:	2f47      	cmp	r7, #71	; 0x47
 8007d38:	4680      	mov	r8, r0
 8007d3a:	d102      	bne.n	8007d42 <__cvt+0x62>
 8007d3c:	f019 0f01 	tst.w	r9, #1
 8007d40:	d026      	beq.n	8007d90 <__cvt+0xb0>
 8007d42:	2f46      	cmp	r7, #70	; 0x46
 8007d44:	eb08 0906 	add.w	r9, r8, r6
 8007d48:	d111      	bne.n	8007d6e <__cvt+0x8e>
 8007d4a:	f898 3000 	ldrb.w	r3, [r8]
 8007d4e:	2b30      	cmp	r3, #48	; 0x30
 8007d50:	d10a      	bne.n	8007d68 <__cvt+0x88>
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	4620      	mov	r0, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7f8 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d5e:	b918      	cbnz	r0, 8007d68 <__cvt+0x88>
 8007d60:	f1c6 0601 	rsb	r6, r6, #1
 8007d64:	f8ca 6000 	str.w	r6, [sl]
 8007d68:	f8da 3000 	ldr.w	r3, [sl]
 8007d6c:	4499      	add	r9, r3
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	4620      	mov	r0, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	f7f8 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d7a:	b938      	cbnz	r0, 8007d8c <__cvt+0xac>
 8007d7c:	2230      	movs	r2, #48	; 0x30
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	454b      	cmp	r3, r9
 8007d82:	d205      	bcs.n	8007d90 <__cvt+0xb0>
 8007d84:	1c59      	adds	r1, r3, #1
 8007d86:	9103      	str	r1, [sp, #12]
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	e7f8      	b.n	8007d7e <__cvt+0x9e>
 8007d8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d94:	eba3 0308 	sub.w	r3, r3, r8
 8007d98:	4640      	mov	r0, r8
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	b004      	add	sp, #16
 8007d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007da2 <__exponent>:
 8007da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da4:	2900      	cmp	r1, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	bfba      	itte	lt
 8007daa:	4249      	neglt	r1, r1
 8007dac:	232d      	movlt	r3, #45	; 0x2d
 8007dae:	232b      	movge	r3, #43	; 0x2b
 8007db0:	2909      	cmp	r1, #9
 8007db2:	f804 2b02 	strb.w	r2, [r4], #2
 8007db6:	7043      	strb	r3, [r0, #1]
 8007db8:	dd20      	ble.n	8007dfc <__exponent+0x5a>
 8007dba:	f10d 0307 	add.w	r3, sp, #7
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	260a      	movs	r6, #10
 8007dc2:	fb91 f5f6 	sdiv	r5, r1, r6
 8007dc6:	fb06 1115 	mls	r1, r6, r5, r1
 8007dca:	3130      	adds	r1, #48	; 0x30
 8007dcc:	2d09      	cmp	r5, #9
 8007dce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007dd2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	dc09      	bgt.n	8007dee <__exponent+0x4c>
 8007dda:	3130      	adds	r1, #48	; 0x30
 8007ddc:	3b02      	subs	r3, #2
 8007dde:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007de2:	42bb      	cmp	r3, r7
 8007de4:	4622      	mov	r2, r4
 8007de6:	d304      	bcc.n	8007df2 <__exponent+0x50>
 8007de8:	1a10      	subs	r0, r2, r0
 8007dea:	b003      	add	sp, #12
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dee:	4613      	mov	r3, r2
 8007df0:	e7e7      	b.n	8007dc2 <__exponent+0x20>
 8007df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df6:	f804 2b01 	strb.w	r2, [r4], #1
 8007dfa:	e7f2      	b.n	8007de2 <__exponent+0x40>
 8007dfc:	2330      	movs	r3, #48	; 0x30
 8007dfe:	4419      	add	r1, r3
 8007e00:	7083      	strb	r3, [r0, #2]
 8007e02:	1d02      	adds	r2, r0, #4
 8007e04:	70c1      	strb	r1, [r0, #3]
 8007e06:	e7ef      	b.n	8007de8 <__exponent+0x46>

08007e08 <_printf_float>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	b08d      	sub	sp, #52	; 0x34
 8007e0e:	460c      	mov	r4, r1
 8007e10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e14:	4616      	mov	r6, r2
 8007e16:	461f      	mov	r7, r3
 8007e18:	4605      	mov	r5, r0
 8007e1a:	f001 fcdf 	bl	80097dc <_localeconv_r>
 8007e1e:	6803      	ldr	r3, [r0, #0]
 8007e20:	9304      	str	r3, [sp, #16]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7f8 f9d4 	bl	80001d0 <strlen>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e30:	9005      	str	r0, [sp, #20]
 8007e32:	3307      	adds	r3, #7
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	f103 0208 	add.w	r2, r3, #8
 8007e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e40:	f8d4 b000 	ldr.w	fp, [r4]
 8007e44:	f8c8 2000 	str.w	r2, [r8]
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e62:	4ba7      	ldr	r3, [pc, #668]	; (8008100 <_printf_float+0x2f8>)
 8007e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e68:	f7f8 fe60 	bl	8000b2c <__aeabi_dcmpun>
 8007e6c:	bb70      	cbnz	r0, 8007ecc <_printf_float+0xc4>
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e72:	4ba3      	ldr	r3, [pc, #652]	; (8008100 <_printf_float+0x2f8>)
 8007e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e78:	f7f8 fe3a 	bl	8000af0 <__aeabi_dcmple>
 8007e7c:	bb30      	cbnz	r0, 8007ecc <_printf_float+0xc4>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2300      	movs	r3, #0
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	f7f8 fe29 	bl	8000adc <__aeabi_dcmplt>
 8007e8a:	b110      	cbz	r0, 8007e92 <_printf_float+0x8a>
 8007e8c:	232d      	movs	r3, #45	; 0x2d
 8007e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e92:	4a9c      	ldr	r2, [pc, #624]	; (8008104 <_printf_float+0x2fc>)
 8007e94:	4b9c      	ldr	r3, [pc, #624]	; (8008108 <_printf_float+0x300>)
 8007e96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e9a:	bf8c      	ite	hi
 8007e9c:	4690      	movhi	r8, r2
 8007e9e:	4698      	movls	r8, r3
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	f02b 0204 	bic.w	r2, fp, #4
 8007ea6:	6123      	str	r3, [r4, #16]
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	f04f 0900 	mov.w	r9, #0
 8007eae:	9700      	str	r7, [sp, #0]
 8007eb0:	4633      	mov	r3, r6
 8007eb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f9e6 	bl	8008288 <_printf_common>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	f040 808d 	bne.w	8007fdc <_printf_float+0x1d4>
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ec6:	b00d      	add	sp, #52	; 0x34
 8007ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	4642      	mov	r2, r8
 8007ece:	464b      	mov	r3, r9
 8007ed0:	4640      	mov	r0, r8
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	f7f8 fe2a 	bl	8000b2c <__aeabi_dcmpun>
 8007ed8:	b110      	cbz	r0, 8007ee0 <_printf_float+0xd8>
 8007eda:	4a8c      	ldr	r2, [pc, #560]	; (800810c <_printf_float+0x304>)
 8007edc:	4b8c      	ldr	r3, [pc, #560]	; (8008110 <_printf_float+0x308>)
 8007ede:	e7da      	b.n	8007e96 <_printf_float+0x8e>
 8007ee0:	6861      	ldr	r1, [r4, #4]
 8007ee2:	1c4b      	adds	r3, r1, #1
 8007ee4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ee8:	a80a      	add	r0, sp, #40	; 0x28
 8007eea:	d13e      	bne.n	8007f6a <_printf_float+0x162>
 8007eec:	2306      	movs	r3, #6
 8007eee:	6063      	str	r3, [r4, #4]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ef6:	ab09      	add	r3, sp, #36	; 0x24
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	ec49 8b10 	vmov	d0, r8, r9
 8007efe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f02:	6022      	str	r2, [r4, #0]
 8007f04:	f8cd a004 	str.w	sl, [sp, #4]
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f7ff fee8 	bl	8007ce0 <__cvt>
 8007f10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f14:	2b47      	cmp	r3, #71	; 0x47
 8007f16:	4680      	mov	r8, r0
 8007f18:	d109      	bne.n	8007f2e <_printf_float+0x126>
 8007f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1c:	1cd8      	adds	r0, r3, #3
 8007f1e:	db02      	blt.n	8007f26 <_printf_float+0x11e>
 8007f20:	6862      	ldr	r2, [r4, #4]
 8007f22:	4293      	cmp	r3, r2
 8007f24:	dd47      	ble.n	8007fb6 <_printf_float+0x1ae>
 8007f26:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f2a:	fa5f fa8a 	uxtb.w	sl, sl
 8007f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f34:	d824      	bhi.n	8007f80 <_printf_float+0x178>
 8007f36:	3901      	subs	r1, #1
 8007f38:	4652      	mov	r2, sl
 8007f3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f3e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f40:	f7ff ff2f 	bl	8007da2 <__exponent>
 8007f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f46:	1813      	adds	r3, r2, r0
 8007f48:	2a01      	cmp	r2, #1
 8007f4a:	4681      	mov	r9, r0
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	dc02      	bgt.n	8007f56 <_printf_float+0x14e>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	07d1      	lsls	r1, r2, #31
 8007f54:	d501      	bpl.n	8007f5a <_printf_float+0x152>
 8007f56:	3301      	adds	r3, #1
 8007f58:	6123      	str	r3, [r4, #16]
 8007f5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0a5      	beq.n	8007eae <_printf_float+0xa6>
 8007f62:	232d      	movs	r3, #45	; 0x2d
 8007f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f68:	e7a1      	b.n	8007eae <_printf_float+0xa6>
 8007f6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f6e:	f000 8177 	beq.w	8008260 <_printf_float+0x458>
 8007f72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f76:	d1bb      	bne.n	8007ef0 <_printf_float+0xe8>
 8007f78:	2900      	cmp	r1, #0
 8007f7a:	d1b9      	bne.n	8007ef0 <_printf_float+0xe8>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e7b6      	b.n	8007eee <_printf_float+0xe6>
 8007f80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f84:	d119      	bne.n	8007fba <_printf_float+0x1b2>
 8007f86:	2900      	cmp	r1, #0
 8007f88:	6863      	ldr	r3, [r4, #4]
 8007f8a:	dd0c      	ble.n	8007fa6 <_printf_float+0x19e>
 8007f8c:	6121      	str	r1, [r4, #16]
 8007f8e:	b913      	cbnz	r3, 8007f96 <_printf_float+0x18e>
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	07d2      	lsls	r2, r2, #31
 8007f94:	d502      	bpl.n	8007f9c <_printf_float+0x194>
 8007f96:	3301      	adds	r3, #1
 8007f98:	440b      	add	r3, r1
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fa0:	f04f 0900 	mov.w	r9, #0
 8007fa4:	e7d9      	b.n	8007f5a <_printf_float+0x152>
 8007fa6:	b913      	cbnz	r3, 8007fae <_printf_float+0x1a6>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	07d0      	lsls	r0, r2, #31
 8007fac:	d501      	bpl.n	8007fb2 <_printf_float+0x1aa>
 8007fae:	3302      	adds	r3, #2
 8007fb0:	e7f3      	b.n	8007f9a <_printf_float+0x192>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e7f1      	b.n	8007f9a <_printf_float+0x192>
 8007fb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007fba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	db05      	blt.n	8007fce <_printf_float+0x1c6>
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	07d1      	lsls	r1, r2, #31
 8007fc8:	d5e8      	bpl.n	8007f9c <_printf_float+0x194>
 8007fca:	3301      	adds	r3, #1
 8007fcc:	e7e5      	b.n	8007f9a <_printf_float+0x192>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bfd4      	ite	le
 8007fd2:	f1c3 0302 	rsble	r3, r3, #2
 8007fd6:	2301      	movgt	r3, #1
 8007fd8:	4413      	add	r3, r2
 8007fda:	e7de      	b.n	8007f9a <_printf_float+0x192>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	055a      	lsls	r2, r3, #21
 8007fe0:	d407      	bmi.n	8007ff2 <_printf_float+0x1ea>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	d12b      	bne.n	8008048 <_printf_float+0x240>
 8007ff0:	e767      	b.n	8007ec2 <_printf_float+0xba>
 8007ff2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ff6:	f240 80dc 	bls.w	80081b2 <_printf_float+0x3aa>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008002:	f7f8 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008006:	2800      	cmp	r0, #0
 8008008:	d033      	beq.n	8008072 <_printf_float+0x26a>
 800800a:	2301      	movs	r3, #1
 800800c:	4a41      	ldr	r2, [pc, #260]	; (8008114 <_printf_float+0x30c>)
 800800e:	4631      	mov	r1, r6
 8008010:	4628      	mov	r0, r5
 8008012:	47b8      	blx	r7
 8008014:	3001      	adds	r0, #1
 8008016:	f43f af54 	beq.w	8007ec2 <_printf_float+0xba>
 800801a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800801e:	429a      	cmp	r2, r3
 8008020:	db02      	blt.n	8008028 <_printf_float+0x220>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	07d8      	lsls	r0, r3, #31
 8008026:	d50f      	bpl.n	8008048 <_printf_float+0x240>
 8008028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	47b8      	blx	r7
 8008032:	3001      	adds	r0, #1
 8008034:	f43f af45 	beq.w	8007ec2 <_printf_float+0xba>
 8008038:	f04f 0800 	mov.w	r8, #0
 800803c:	f104 091a 	add.w	r9, r4, #26
 8008040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008042:	3b01      	subs	r3, #1
 8008044:	4543      	cmp	r3, r8
 8008046:	dc09      	bgt.n	800805c <_printf_float+0x254>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	079b      	lsls	r3, r3, #30
 800804c:	f100 8103 	bmi.w	8008256 <_printf_float+0x44e>
 8008050:	68e0      	ldr	r0, [r4, #12]
 8008052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008054:	4298      	cmp	r0, r3
 8008056:	bfb8      	it	lt
 8008058:	4618      	movlt	r0, r3
 800805a:	e734      	b.n	8007ec6 <_printf_float+0xbe>
 800805c:	2301      	movs	r3, #1
 800805e:	464a      	mov	r2, r9
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f af2b 	beq.w	8007ec2 <_printf_float+0xba>
 800806c:	f108 0801 	add.w	r8, r8, #1
 8008070:	e7e6      	b.n	8008040 <_printf_float+0x238>
 8008072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc2b      	bgt.n	80080d0 <_printf_float+0x2c8>
 8008078:	2301      	movs	r3, #1
 800807a:	4a26      	ldr	r2, [pc, #152]	; (8008114 <_printf_float+0x30c>)
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f af1d 	beq.w	8007ec2 <_printf_float+0xba>
 8008088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808a:	b923      	cbnz	r3, 8008096 <_printf_float+0x28e>
 800808c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808e:	b913      	cbnz	r3, 8008096 <_printf_float+0x28e>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	07d9      	lsls	r1, r3, #31
 8008094:	d5d8      	bpl.n	8008048 <_printf_float+0x240>
 8008096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f af0e 	beq.w	8007ec2 <_printf_float+0xba>
 80080a6:	f04f 0900 	mov.w	r9, #0
 80080aa:	f104 0a1a 	add.w	sl, r4, #26
 80080ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b0:	425b      	negs	r3, r3
 80080b2:	454b      	cmp	r3, r9
 80080b4:	dc01      	bgt.n	80080ba <_printf_float+0x2b2>
 80080b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b8:	e794      	b.n	8007fe4 <_printf_float+0x1dc>
 80080ba:	2301      	movs	r3, #1
 80080bc:	4652      	mov	r2, sl
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f aefc 	beq.w	8007ec2 <_printf_float+0xba>
 80080ca:	f109 0901 	add.w	r9, r9, #1
 80080ce:	e7ee      	b.n	80080ae <_printf_float+0x2a6>
 80080d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080d4:	429a      	cmp	r2, r3
 80080d6:	bfa8      	it	ge
 80080d8:	461a      	movge	r2, r3
 80080da:	2a00      	cmp	r2, #0
 80080dc:	4691      	mov	r9, r2
 80080de:	dd07      	ble.n	80080f0 <_printf_float+0x2e8>
 80080e0:	4613      	mov	r3, r2
 80080e2:	4631      	mov	r1, r6
 80080e4:	4642      	mov	r2, r8
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f aee9 	beq.w	8007ec2 <_printf_float+0xba>
 80080f0:	f104 031a 	add.w	r3, r4, #26
 80080f4:	f04f 0b00 	mov.w	fp, #0
 80080f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080fc:	9306      	str	r3, [sp, #24]
 80080fe:	e015      	b.n	800812c <_printf_float+0x324>
 8008100:	7fefffff 	.word	0x7fefffff
 8008104:	0800b888 	.word	0x0800b888
 8008108:	0800b884 	.word	0x0800b884
 800810c:	0800b890 	.word	0x0800b890
 8008110:	0800b88c 	.word	0x0800b88c
 8008114:	0800b894 	.word	0x0800b894
 8008118:	2301      	movs	r3, #1
 800811a:	9a06      	ldr	r2, [sp, #24]
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f aecd 	beq.w	8007ec2 <_printf_float+0xba>
 8008128:	f10b 0b01 	add.w	fp, fp, #1
 800812c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008130:	ebaa 0309 	sub.w	r3, sl, r9
 8008134:	455b      	cmp	r3, fp
 8008136:	dcef      	bgt.n	8008118 <_printf_float+0x310>
 8008138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800813c:	429a      	cmp	r2, r3
 800813e:	44d0      	add	r8, sl
 8008140:	db15      	blt.n	800816e <_printf_float+0x366>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	07da      	lsls	r2, r3, #31
 8008146:	d412      	bmi.n	800816e <_printf_float+0x366>
 8008148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814c:	eba3 020a 	sub.w	r2, r3, sl
 8008150:	eba3 0a01 	sub.w	sl, r3, r1
 8008154:	4592      	cmp	sl, r2
 8008156:	bfa8      	it	ge
 8008158:	4692      	movge	sl, r2
 800815a:	f1ba 0f00 	cmp.w	sl, #0
 800815e:	dc0e      	bgt.n	800817e <_printf_float+0x376>
 8008160:	f04f 0800 	mov.w	r8, #0
 8008164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008168:	f104 091a 	add.w	r9, r4, #26
 800816c:	e019      	b.n	80081a2 <_printf_float+0x39a>
 800816e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	d1e5      	bne.n	8008148 <_printf_float+0x340>
 800817c:	e6a1      	b.n	8007ec2 <_printf_float+0xba>
 800817e:	4653      	mov	r3, sl
 8008180:	4642      	mov	r2, r8
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	d1e9      	bne.n	8008160 <_printf_float+0x358>
 800818c:	e699      	b.n	8007ec2 <_printf_float+0xba>
 800818e:	2301      	movs	r3, #1
 8008190:	464a      	mov	r2, r9
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f ae92 	beq.w	8007ec2 <_printf_float+0xba>
 800819e:	f108 0801 	add.w	r8, r8, #1
 80081a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	eba3 030a 	sub.w	r3, r3, sl
 80081ac:	4543      	cmp	r3, r8
 80081ae:	dcee      	bgt.n	800818e <_printf_float+0x386>
 80081b0:	e74a      	b.n	8008048 <_printf_float+0x240>
 80081b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b4:	2a01      	cmp	r2, #1
 80081b6:	dc01      	bgt.n	80081bc <_printf_float+0x3b4>
 80081b8:	07db      	lsls	r3, r3, #31
 80081ba:	d53a      	bpl.n	8008232 <_printf_float+0x42a>
 80081bc:	2301      	movs	r3, #1
 80081be:	4642      	mov	r2, r8
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	f43f ae7b 	beq.w	8007ec2 <_printf_float+0xba>
 80081cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	f108 0801 	add.w	r8, r8, #1
 80081dc:	f43f ae71 	beq.w	8007ec2 <_printf_float+0xba>
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	2200      	movs	r2, #0
 80081e4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80081e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081ec:	2300      	movs	r3, #0
 80081ee:	f7f8 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80081f2:	b9c8      	cbnz	r0, 8008228 <_printf_float+0x420>
 80081f4:	4653      	mov	r3, sl
 80081f6:	4642      	mov	r2, r8
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	d10e      	bne.n	8008220 <_printf_float+0x418>
 8008202:	e65e      	b.n	8007ec2 <_printf_float+0xba>
 8008204:	2301      	movs	r3, #1
 8008206:	4652      	mov	r2, sl
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f ae57 	beq.w	8007ec2 <_printf_float+0xba>
 8008214:	f108 0801 	add.w	r8, r8, #1
 8008218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821a:	3b01      	subs	r3, #1
 800821c:	4543      	cmp	r3, r8
 800821e:	dcf1      	bgt.n	8008204 <_printf_float+0x3fc>
 8008220:	464b      	mov	r3, r9
 8008222:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008226:	e6de      	b.n	8007fe6 <_printf_float+0x1de>
 8008228:	f04f 0800 	mov.w	r8, #0
 800822c:	f104 0a1a 	add.w	sl, r4, #26
 8008230:	e7f2      	b.n	8008218 <_printf_float+0x410>
 8008232:	2301      	movs	r3, #1
 8008234:	e7df      	b.n	80081f6 <_printf_float+0x3ee>
 8008236:	2301      	movs	r3, #1
 8008238:	464a      	mov	r2, r9
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f ae3e 	beq.w	8007ec2 <_printf_float+0xba>
 8008246:	f108 0801 	add.w	r8, r8, #1
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	4543      	cmp	r3, r8
 8008252:	dcf0      	bgt.n	8008236 <_printf_float+0x42e>
 8008254:	e6fc      	b.n	8008050 <_printf_float+0x248>
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	f104 0919 	add.w	r9, r4, #25
 800825e:	e7f4      	b.n	800824a <_printf_float+0x442>
 8008260:	2900      	cmp	r1, #0
 8008262:	f43f ae8b 	beq.w	8007f7c <_printf_float+0x174>
 8008266:	2300      	movs	r3, #0
 8008268:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800826c:	ab09      	add	r3, sp, #36	; 0x24
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	ec49 8b10 	vmov	d0, r8, r9
 8008274:	6022      	str	r2, [r4, #0]
 8008276:	f8cd a004 	str.w	sl, [sp, #4]
 800827a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800827e:	4628      	mov	r0, r5
 8008280:	f7ff fd2e 	bl	8007ce0 <__cvt>
 8008284:	4680      	mov	r8, r0
 8008286:	e648      	b.n	8007f1a <_printf_float+0x112>

08008288 <_printf_common>:
 8008288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	4691      	mov	r9, r2
 800828e:	461f      	mov	r7, r3
 8008290:	688a      	ldr	r2, [r1, #8]
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008298:	4293      	cmp	r3, r2
 800829a:	bfb8      	it	lt
 800829c:	4613      	movlt	r3, r2
 800829e:	f8c9 3000 	str.w	r3, [r9]
 80082a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a6:	4606      	mov	r6, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	b112      	cbz	r2, 80082b2 <_printf_common+0x2a>
 80082ac:	3301      	adds	r3, #1
 80082ae:	f8c9 3000 	str.w	r3, [r9]
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	0699      	lsls	r1, r3, #26
 80082b6:	bf42      	ittt	mi
 80082b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082bc:	3302      	addmi	r3, #2
 80082be:	f8c9 3000 	strmi.w	r3, [r9]
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	f015 0506 	ands.w	r5, r5, #6
 80082c8:	d107      	bne.n	80082da <_printf_common+0x52>
 80082ca:	f104 0a19 	add.w	sl, r4, #25
 80082ce:	68e3      	ldr	r3, [r4, #12]
 80082d0:	f8d9 2000 	ldr.w	r2, [r9]
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	42ab      	cmp	r3, r5
 80082d8:	dc28      	bgt.n	800832c <_printf_common+0xa4>
 80082da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	3300      	adds	r3, #0
 80082e2:	bf18      	it	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	0692      	lsls	r2, r2, #26
 80082e8:	d42d      	bmi.n	8008346 <_printf_common+0xbe>
 80082ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ee:	4639      	mov	r1, r7
 80082f0:	4630      	mov	r0, r6
 80082f2:	47c0      	blx	r8
 80082f4:	3001      	adds	r0, #1
 80082f6:	d020      	beq.n	800833a <_printf_common+0xb2>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	68e5      	ldr	r5, [r4, #12]
 80082fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008300:	f003 0306 	and.w	r3, r3, #6
 8008304:	2b04      	cmp	r3, #4
 8008306:	bf08      	it	eq
 8008308:	1aad      	subeq	r5, r5, r2
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	bf0c      	ite	eq
 8008310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008314:	2500      	movne	r5, #0
 8008316:	4293      	cmp	r3, r2
 8008318:	bfc4      	itt	gt
 800831a:	1a9b      	subgt	r3, r3, r2
 800831c:	18ed      	addgt	r5, r5, r3
 800831e:	f04f 0900 	mov.w	r9, #0
 8008322:	341a      	adds	r4, #26
 8008324:	454d      	cmp	r5, r9
 8008326:	d11a      	bne.n	800835e <_printf_common+0xd6>
 8008328:	2000      	movs	r0, #0
 800832a:	e008      	b.n	800833e <_printf_common+0xb6>
 800832c:	2301      	movs	r3, #1
 800832e:	4652      	mov	r2, sl
 8008330:	4639      	mov	r1, r7
 8008332:	4630      	mov	r0, r6
 8008334:	47c0      	blx	r8
 8008336:	3001      	adds	r0, #1
 8008338:	d103      	bne.n	8008342 <_printf_common+0xba>
 800833a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008342:	3501      	adds	r5, #1
 8008344:	e7c3      	b.n	80082ce <_printf_common+0x46>
 8008346:	18e1      	adds	r1, r4, r3
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	2030      	movs	r0, #48	; 0x30
 800834c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008350:	4422      	add	r2, r4
 8008352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800835a:	3302      	adds	r3, #2
 800835c:	e7c5      	b.n	80082ea <_printf_common+0x62>
 800835e:	2301      	movs	r3, #1
 8008360:	4622      	mov	r2, r4
 8008362:	4639      	mov	r1, r7
 8008364:	4630      	mov	r0, r6
 8008366:	47c0      	blx	r8
 8008368:	3001      	adds	r0, #1
 800836a:	d0e6      	beq.n	800833a <_printf_common+0xb2>
 800836c:	f109 0901 	add.w	r9, r9, #1
 8008370:	e7d8      	b.n	8008324 <_printf_common+0x9c>
	...

08008374 <_printf_i>:
 8008374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800837c:	460c      	mov	r4, r1
 800837e:	7e09      	ldrb	r1, [r1, #24]
 8008380:	b085      	sub	sp, #20
 8008382:	296e      	cmp	r1, #110	; 0x6e
 8008384:	4617      	mov	r7, r2
 8008386:	4606      	mov	r6, r0
 8008388:	4698      	mov	r8, r3
 800838a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800838c:	f000 80b3 	beq.w	80084f6 <_printf_i+0x182>
 8008390:	d822      	bhi.n	80083d8 <_printf_i+0x64>
 8008392:	2963      	cmp	r1, #99	; 0x63
 8008394:	d036      	beq.n	8008404 <_printf_i+0x90>
 8008396:	d80a      	bhi.n	80083ae <_printf_i+0x3a>
 8008398:	2900      	cmp	r1, #0
 800839a:	f000 80b9 	beq.w	8008510 <_printf_i+0x19c>
 800839e:	2958      	cmp	r1, #88	; 0x58
 80083a0:	f000 8083 	beq.w	80084aa <_printf_i+0x136>
 80083a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80083ac:	e032      	b.n	8008414 <_printf_i+0xa0>
 80083ae:	2964      	cmp	r1, #100	; 0x64
 80083b0:	d001      	beq.n	80083b6 <_printf_i+0x42>
 80083b2:	2969      	cmp	r1, #105	; 0x69
 80083b4:	d1f6      	bne.n	80083a4 <_printf_i+0x30>
 80083b6:	6820      	ldr	r0, [r4, #0]
 80083b8:	6813      	ldr	r3, [r2, #0]
 80083ba:	0605      	lsls	r5, r0, #24
 80083bc:	f103 0104 	add.w	r1, r3, #4
 80083c0:	d52a      	bpl.n	8008418 <_printf_i+0xa4>
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da03      	bge.n	80083d2 <_printf_i+0x5e>
 80083ca:	222d      	movs	r2, #45	; 0x2d
 80083cc:	425b      	negs	r3, r3
 80083ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80083d2:	486f      	ldr	r0, [pc, #444]	; (8008590 <_printf_i+0x21c>)
 80083d4:	220a      	movs	r2, #10
 80083d6:	e039      	b.n	800844c <_printf_i+0xd8>
 80083d8:	2973      	cmp	r1, #115	; 0x73
 80083da:	f000 809d 	beq.w	8008518 <_printf_i+0x1a4>
 80083de:	d808      	bhi.n	80083f2 <_printf_i+0x7e>
 80083e0:	296f      	cmp	r1, #111	; 0x6f
 80083e2:	d020      	beq.n	8008426 <_printf_i+0xb2>
 80083e4:	2970      	cmp	r1, #112	; 0x70
 80083e6:	d1dd      	bne.n	80083a4 <_printf_i+0x30>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	f043 0320 	orr.w	r3, r3, #32
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	e003      	b.n	80083fa <_printf_i+0x86>
 80083f2:	2975      	cmp	r1, #117	; 0x75
 80083f4:	d017      	beq.n	8008426 <_printf_i+0xb2>
 80083f6:	2978      	cmp	r1, #120	; 0x78
 80083f8:	d1d4      	bne.n	80083a4 <_printf_i+0x30>
 80083fa:	2378      	movs	r3, #120	; 0x78
 80083fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008400:	4864      	ldr	r0, [pc, #400]	; (8008594 <_printf_i+0x220>)
 8008402:	e055      	b.n	80084b0 <_printf_i+0x13c>
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	1d19      	adds	r1, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6011      	str	r1, [r2, #0]
 800840c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008414:	2301      	movs	r3, #1
 8008416:	e08c      	b.n	8008532 <_printf_i+0x1be>
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6011      	str	r1, [r2, #0]
 800841c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008420:	bf18      	it	ne
 8008422:	b21b      	sxthne	r3, r3
 8008424:	e7cf      	b.n	80083c6 <_printf_i+0x52>
 8008426:	6813      	ldr	r3, [r2, #0]
 8008428:	6825      	ldr	r5, [r4, #0]
 800842a:	1d18      	adds	r0, r3, #4
 800842c:	6010      	str	r0, [r2, #0]
 800842e:	0628      	lsls	r0, r5, #24
 8008430:	d501      	bpl.n	8008436 <_printf_i+0xc2>
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	e002      	b.n	800843c <_printf_i+0xc8>
 8008436:	0668      	lsls	r0, r5, #25
 8008438:	d5fb      	bpl.n	8008432 <_printf_i+0xbe>
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	4854      	ldr	r0, [pc, #336]	; (8008590 <_printf_i+0x21c>)
 800843e:	296f      	cmp	r1, #111	; 0x6f
 8008440:	bf14      	ite	ne
 8008442:	220a      	movne	r2, #10
 8008444:	2208      	moveq	r2, #8
 8008446:	2100      	movs	r1, #0
 8008448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800844c:	6865      	ldr	r5, [r4, #4]
 800844e:	60a5      	str	r5, [r4, #8]
 8008450:	2d00      	cmp	r5, #0
 8008452:	f2c0 8095 	blt.w	8008580 <_printf_i+0x20c>
 8008456:	6821      	ldr	r1, [r4, #0]
 8008458:	f021 0104 	bic.w	r1, r1, #4
 800845c:	6021      	str	r1, [r4, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d13d      	bne.n	80084de <_printf_i+0x16a>
 8008462:	2d00      	cmp	r5, #0
 8008464:	f040 808e 	bne.w	8008584 <_printf_i+0x210>
 8008468:	4665      	mov	r5, ip
 800846a:	2a08      	cmp	r2, #8
 800846c:	d10b      	bne.n	8008486 <_printf_i+0x112>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	07db      	lsls	r3, r3, #31
 8008472:	d508      	bpl.n	8008486 <_printf_i+0x112>
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	6862      	ldr	r2, [r4, #4]
 8008478:	429a      	cmp	r2, r3
 800847a:	bfde      	ittt	le
 800847c:	2330      	movle	r3, #48	; 0x30
 800847e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008482:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008486:	ebac 0305 	sub.w	r3, ip, r5
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	f8cd 8000 	str.w	r8, [sp]
 8008490:	463b      	mov	r3, r7
 8008492:	aa03      	add	r2, sp, #12
 8008494:	4621      	mov	r1, r4
 8008496:	4630      	mov	r0, r6
 8008498:	f7ff fef6 	bl	8008288 <_printf_common>
 800849c:	3001      	adds	r0, #1
 800849e:	d14d      	bne.n	800853c <_printf_i+0x1c8>
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a4:	b005      	add	sp, #20
 80084a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084aa:	4839      	ldr	r0, [pc, #228]	; (8008590 <_printf_i+0x21c>)
 80084ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80084b0:	6813      	ldr	r3, [r2, #0]
 80084b2:	6821      	ldr	r1, [r4, #0]
 80084b4:	1d1d      	adds	r5, r3, #4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6015      	str	r5, [r2, #0]
 80084ba:	060a      	lsls	r2, r1, #24
 80084bc:	d50b      	bpl.n	80084d6 <_printf_i+0x162>
 80084be:	07ca      	lsls	r2, r1, #31
 80084c0:	bf44      	itt	mi
 80084c2:	f041 0120 	orrmi.w	r1, r1, #32
 80084c6:	6021      	strmi	r1, [r4, #0]
 80084c8:	b91b      	cbnz	r3, 80084d2 <_printf_i+0x15e>
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	f022 0220 	bic.w	r2, r2, #32
 80084d0:	6022      	str	r2, [r4, #0]
 80084d2:	2210      	movs	r2, #16
 80084d4:	e7b7      	b.n	8008446 <_printf_i+0xd2>
 80084d6:	064d      	lsls	r5, r1, #25
 80084d8:	bf48      	it	mi
 80084da:	b29b      	uxthmi	r3, r3
 80084dc:	e7ef      	b.n	80084be <_printf_i+0x14a>
 80084de:	4665      	mov	r5, ip
 80084e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80084e4:	fb02 3311 	mls	r3, r2, r1, r3
 80084e8:	5cc3      	ldrb	r3, [r0, r3]
 80084ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80084ee:	460b      	mov	r3, r1
 80084f0:	2900      	cmp	r1, #0
 80084f2:	d1f5      	bne.n	80084e0 <_printf_i+0x16c>
 80084f4:	e7b9      	b.n	800846a <_printf_i+0xf6>
 80084f6:	6813      	ldr	r3, [r2, #0]
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	6961      	ldr	r1, [r4, #20]
 80084fc:	1d18      	adds	r0, r3, #4
 80084fe:	6010      	str	r0, [r2, #0]
 8008500:	0628      	lsls	r0, r5, #24
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	d501      	bpl.n	800850a <_printf_i+0x196>
 8008506:	6019      	str	r1, [r3, #0]
 8008508:	e002      	b.n	8008510 <_printf_i+0x19c>
 800850a:	066a      	lsls	r2, r5, #25
 800850c:	d5fb      	bpl.n	8008506 <_printf_i+0x192>
 800850e:	8019      	strh	r1, [r3, #0]
 8008510:	2300      	movs	r3, #0
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	4665      	mov	r5, ip
 8008516:	e7b9      	b.n	800848c <_printf_i+0x118>
 8008518:	6813      	ldr	r3, [r2, #0]
 800851a:	1d19      	adds	r1, r3, #4
 800851c:	6011      	str	r1, [r2, #0]
 800851e:	681d      	ldr	r5, [r3, #0]
 8008520:	6862      	ldr	r2, [r4, #4]
 8008522:	2100      	movs	r1, #0
 8008524:	4628      	mov	r0, r5
 8008526:	f7f7 fe5b 	bl	80001e0 <memchr>
 800852a:	b108      	cbz	r0, 8008530 <_printf_i+0x1bc>
 800852c:	1b40      	subs	r0, r0, r5
 800852e:	6060      	str	r0, [r4, #4]
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	6123      	str	r3, [r4, #16]
 8008534:	2300      	movs	r3, #0
 8008536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800853a:	e7a7      	b.n	800848c <_printf_i+0x118>
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	462a      	mov	r2, r5
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d0aa      	beq.n	80084a0 <_printf_i+0x12c>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	079b      	lsls	r3, r3, #30
 800854e:	d413      	bmi.n	8008578 <_printf_i+0x204>
 8008550:	68e0      	ldr	r0, [r4, #12]
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	4298      	cmp	r0, r3
 8008556:	bfb8      	it	lt
 8008558:	4618      	movlt	r0, r3
 800855a:	e7a3      	b.n	80084a4 <_printf_i+0x130>
 800855c:	2301      	movs	r3, #1
 800855e:	464a      	mov	r2, r9
 8008560:	4639      	mov	r1, r7
 8008562:	4630      	mov	r0, r6
 8008564:	47c0      	blx	r8
 8008566:	3001      	adds	r0, #1
 8008568:	d09a      	beq.n	80084a0 <_printf_i+0x12c>
 800856a:	3501      	adds	r5, #1
 800856c:	68e3      	ldr	r3, [r4, #12]
 800856e:	9a03      	ldr	r2, [sp, #12]
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	42ab      	cmp	r3, r5
 8008574:	dcf2      	bgt.n	800855c <_printf_i+0x1e8>
 8008576:	e7eb      	b.n	8008550 <_printf_i+0x1dc>
 8008578:	2500      	movs	r5, #0
 800857a:	f104 0919 	add.w	r9, r4, #25
 800857e:	e7f5      	b.n	800856c <_printf_i+0x1f8>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ac      	bne.n	80084de <_printf_i+0x16a>
 8008584:	7803      	ldrb	r3, [r0, #0]
 8008586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800858a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800858e:	e76c      	b.n	800846a <_printf_i+0xf6>
 8008590:	0800b896 	.word	0x0800b896
 8008594:	0800b8a7 	.word	0x0800b8a7

08008598 <iprintf>:
 8008598:	b40f      	push	{r0, r1, r2, r3}
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <iprintf+0x2c>)
 800859c:	b513      	push	{r0, r1, r4, lr}
 800859e:	681c      	ldr	r4, [r3, #0]
 80085a0:	b124      	cbz	r4, 80085ac <iprintf+0x14>
 80085a2:	69a3      	ldr	r3, [r4, #24]
 80085a4:	b913      	cbnz	r3, 80085ac <iprintf+0x14>
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 f88e 	bl	80096c8 <__sinit>
 80085ac:	ab05      	add	r3, sp, #20
 80085ae:	9a04      	ldr	r2, [sp, #16]
 80085b0:	68a1      	ldr	r1, [r4, #8]
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	4620      	mov	r0, r4
 80085b6:	f001 fea3 	bl	800a300 <_vfiprintf_r>
 80085ba:	b002      	add	sp, #8
 80085bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c0:	b004      	add	sp, #16
 80085c2:	4770      	bx	lr
 80085c4:	200007e0 	.word	0x200007e0

080085c8 <_puts_r>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	460e      	mov	r6, r1
 80085cc:	4605      	mov	r5, r0
 80085ce:	b118      	cbz	r0, 80085d8 <_puts_r+0x10>
 80085d0:	6983      	ldr	r3, [r0, #24]
 80085d2:	b90b      	cbnz	r3, 80085d8 <_puts_r+0x10>
 80085d4:	f001 f878 	bl	80096c8 <__sinit>
 80085d8:	69ab      	ldr	r3, [r5, #24]
 80085da:	68ac      	ldr	r4, [r5, #8]
 80085dc:	b913      	cbnz	r3, 80085e4 <_puts_r+0x1c>
 80085de:	4628      	mov	r0, r5
 80085e0:	f001 f872 	bl	80096c8 <__sinit>
 80085e4:	4b23      	ldr	r3, [pc, #140]	; (8008674 <_puts_r+0xac>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d117      	bne.n	800861a <_puts_r+0x52>
 80085ea:	686c      	ldr	r4, [r5, #4]
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	071b      	lsls	r3, r3, #28
 80085f0:	d51d      	bpl.n	800862e <_puts_r+0x66>
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	b1db      	cbz	r3, 800862e <_puts_r+0x66>
 80085f6:	3e01      	subs	r6, #1
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085fe:	3b01      	subs	r3, #1
 8008600:	60a3      	str	r3, [r4, #8]
 8008602:	b9e9      	cbnz	r1, 8008640 <_puts_r+0x78>
 8008604:	2b00      	cmp	r3, #0
 8008606:	da2e      	bge.n	8008666 <_puts_r+0x9e>
 8008608:	4622      	mov	r2, r4
 800860a:	210a      	movs	r1, #10
 800860c:	4628      	mov	r0, r5
 800860e:	f000 f867 	bl	80086e0 <__swbuf_r>
 8008612:	3001      	adds	r0, #1
 8008614:	d011      	beq.n	800863a <_puts_r+0x72>
 8008616:	200a      	movs	r0, #10
 8008618:	e011      	b.n	800863e <_puts_r+0x76>
 800861a:	4b17      	ldr	r3, [pc, #92]	; (8008678 <_puts_r+0xb0>)
 800861c:	429c      	cmp	r4, r3
 800861e:	d101      	bne.n	8008624 <_puts_r+0x5c>
 8008620:	68ac      	ldr	r4, [r5, #8]
 8008622:	e7e3      	b.n	80085ec <_puts_r+0x24>
 8008624:	4b15      	ldr	r3, [pc, #84]	; (800867c <_puts_r+0xb4>)
 8008626:	429c      	cmp	r4, r3
 8008628:	bf08      	it	eq
 800862a:	68ec      	ldreq	r4, [r5, #12]
 800862c:	e7de      	b.n	80085ec <_puts_r+0x24>
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 f8a7 	bl	8008784 <__swsetup_r>
 8008636:	2800      	cmp	r0, #0
 8008638:	d0dd      	beq.n	80085f6 <_puts_r+0x2e>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	2b00      	cmp	r3, #0
 8008642:	da04      	bge.n	800864e <_puts_r+0x86>
 8008644:	69a2      	ldr	r2, [r4, #24]
 8008646:	429a      	cmp	r2, r3
 8008648:	dc06      	bgt.n	8008658 <_puts_r+0x90>
 800864a:	290a      	cmp	r1, #10
 800864c:	d004      	beq.n	8008658 <_puts_r+0x90>
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	6022      	str	r2, [r4, #0]
 8008654:	7019      	strb	r1, [r3, #0]
 8008656:	e7cf      	b.n	80085f8 <_puts_r+0x30>
 8008658:	4622      	mov	r2, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f840 	bl	80086e0 <__swbuf_r>
 8008660:	3001      	adds	r0, #1
 8008662:	d1c9      	bne.n	80085f8 <_puts_r+0x30>
 8008664:	e7e9      	b.n	800863a <_puts_r+0x72>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	200a      	movs	r0, #10
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	7018      	strb	r0, [r3, #0]
 8008670:	e7e5      	b.n	800863e <_puts_r+0x76>
 8008672:	bf00      	nop
 8008674:	0800b8e8 	.word	0x0800b8e8
 8008678:	0800b908 	.word	0x0800b908
 800867c:	0800b8c8 	.word	0x0800b8c8

08008680 <puts>:
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <puts+0xc>)
 8008682:	4601      	mov	r1, r0
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	f7ff bf9f 	b.w	80085c8 <_puts_r>
 800868a:	bf00      	nop
 800868c:	200007e0 	.word	0x200007e0

08008690 <siprintf>:
 8008690:	b40e      	push	{r1, r2, r3}
 8008692:	b500      	push	{lr}
 8008694:	b09c      	sub	sp, #112	; 0x70
 8008696:	ab1d      	add	r3, sp, #116	; 0x74
 8008698:	9002      	str	r0, [sp, #8]
 800869a:	9006      	str	r0, [sp, #24]
 800869c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086a0:	4809      	ldr	r0, [pc, #36]	; (80086c8 <siprintf+0x38>)
 80086a2:	9107      	str	r1, [sp, #28]
 80086a4:	9104      	str	r1, [sp, #16]
 80086a6:	4909      	ldr	r1, [pc, #36]	; (80086cc <siprintf+0x3c>)
 80086a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ac:	9105      	str	r1, [sp, #20]
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	a902      	add	r1, sp, #8
 80086b4:	f001 fd02 	bl	800a0bc <_svfiprintf_r>
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	b01c      	add	sp, #112	; 0x70
 80086c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c4:	b003      	add	sp, #12
 80086c6:	4770      	bx	lr
 80086c8:	200007e0 	.word	0x200007e0
 80086cc:	ffff0208 	.word	0xffff0208

080086d0 <strcpy>:
 80086d0:	4603      	mov	r3, r0
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2b01 	strb.w	r2, [r3], #1
 80086da:	2a00      	cmp	r2, #0
 80086dc:	d1f9      	bne.n	80086d2 <strcpy+0x2>
 80086de:	4770      	bx	lr

080086e0 <__swbuf_r>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	460e      	mov	r6, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	4605      	mov	r5, r0
 80086e8:	b118      	cbz	r0, 80086f2 <__swbuf_r+0x12>
 80086ea:	6983      	ldr	r3, [r0, #24]
 80086ec:	b90b      	cbnz	r3, 80086f2 <__swbuf_r+0x12>
 80086ee:	f000 ffeb 	bl	80096c8 <__sinit>
 80086f2:	4b21      	ldr	r3, [pc, #132]	; (8008778 <__swbuf_r+0x98>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d12a      	bne.n	800874e <__swbuf_r+0x6e>
 80086f8:	686c      	ldr	r4, [r5, #4]
 80086fa:	69a3      	ldr	r3, [r4, #24]
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	071a      	lsls	r2, r3, #28
 8008702:	d52e      	bpl.n	8008762 <__swbuf_r+0x82>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	b363      	cbz	r3, 8008762 <__swbuf_r+0x82>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	6820      	ldr	r0, [r4, #0]
 800870c:	1ac0      	subs	r0, r0, r3
 800870e:	6963      	ldr	r3, [r4, #20]
 8008710:	b2f6      	uxtb	r6, r6
 8008712:	4283      	cmp	r3, r0
 8008714:	4637      	mov	r7, r6
 8008716:	dc04      	bgt.n	8008722 <__swbuf_r+0x42>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 ff6a 	bl	80095f4 <_fflush_r>
 8008720:	bb28      	cbnz	r0, 800876e <__swbuf_r+0x8e>
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	701e      	strb	r6, [r3, #0]
 8008730:	6963      	ldr	r3, [r4, #20]
 8008732:	3001      	adds	r0, #1
 8008734:	4283      	cmp	r3, r0
 8008736:	d004      	beq.n	8008742 <__swbuf_r+0x62>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	07db      	lsls	r3, r3, #31
 800873c:	d519      	bpl.n	8008772 <__swbuf_r+0x92>
 800873e:	2e0a      	cmp	r6, #10
 8008740:	d117      	bne.n	8008772 <__swbuf_r+0x92>
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f000 ff55 	bl	80095f4 <_fflush_r>
 800874a:	b190      	cbz	r0, 8008772 <__swbuf_r+0x92>
 800874c:	e00f      	b.n	800876e <__swbuf_r+0x8e>
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <__swbuf_r+0x9c>)
 8008750:	429c      	cmp	r4, r3
 8008752:	d101      	bne.n	8008758 <__swbuf_r+0x78>
 8008754:	68ac      	ldr	r4, [r5, #8]
 8008756:	e7d0      	b.n	80086fa <__swbuf_r+0x1a>
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <__swbuf_r+0xa0>)
 800875a:	429c      	cmp	r4, r3
 800875c:	bf08      	it	eq
 800875e:	68ec      	ldreq	r4, [r5, #12]
 8008760:	e7cb      	b.n	80086fa <__swbuf_r+0x1a>
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 f80d 	bl	8008784 <__swsetup_r>
 800876a:	2800      	cmp	r0, #0
 800876c:	d0cc      	beq.n	8008708 <__swbuf_r+0x28>
 800876e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008772:	4638      	mov	r0, r7
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008776:	bf00      	nop
 8008778:	0800b8e8 	.word	0x0800b8e8
 800877c:	0800b908 	.word	0x0800b908
 8008780:	0800b8c8 	.word	0x0800b8c8

08008784 <__swsetup_r>:
 8008784:	4b32      	ldr	r3, [pc, #200]	; (8008850 <__swsetup_r+0xcc>)
 8008786:	b570      	push	{r4, r5, r6, lr}
 8008788:	681d      	ldr	r5, [r3, #0]
 800878a:	4606      	mov	r6, r0
 800878c:	460c      	mov	r4, r1
 800878e:	b125      	cbz	r5, 800879a <__swsetup_r+0x16>
 8008790:	69ab      	ldr	r3, [r5, #24]
 8008792:	b913      	cbnz	r3, 800879a <__swsetup_r+0x16>
 8008794:	4628      	mov	r0, r5
 8008796:	f000 ff97 	bl	80096c8 <__sinit>
 800879a:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <__swsetup_r+0xd0>)
 800879c:	429c      	cmp	r4, r3
 800879e:	d10f      	bne.n	80087c0 <__swsetup_r+0x3c>
 80087a0:	686c      	ldr	r4, [r5, #4]
 80087a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	0715      	lsls	r5, r2, #28
 80087aa:	d42c      	bmi.n	8008806 <__swsetup_r+0x82>
 80087ac:	06d0      	lsls	r0, r2, #27
 80087ae:	d411      	bmi.n	80087d4 <__swsetup_r+0x50>
 80087b0:	2209      	movs	r2, #9
 80087b2:	6032      	str	r2, [r6, #0]
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087be:	e03e      	b.n	800883e <__swsetup_r+0xba>
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <__swsetup_r+0xd4>)
 80087c2:	429c      	cmp	r4, r3
 80087c4:	d101      	bne.n	80087ca <__swsetup_r+0x46>
 80087c6:	68ac      	ldr	r4, [r5, #8]
 80087c8:	e7eb      	b.n	80087a2 <__swsetup_r+0x1e>
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <__swsetup_r+0xd8>)
 80087cc:	429c      	cmp	r4, r3
 80087ce:	bf08      	it	eq
 80087d0:	68ec      	ldreq	r4, [r5, #12]
 80087d2:	e7e6      	b.n	80087a2 <__swsetup_r+0x1e>
 80087d4:	0751      	lsls	r1, r2, #29
 80087d6:	d512      	bpl.n	80087fe <__swsetup_r+0x7a>
 80087d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087da:	b141      	cbz	r1, 80087ee <__swsetup_r+0x6a>
 80087dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087e0:	4299      	cmp	r1, r3
 80087e2:	d002      	beq.n	80087ea <__swsetup_r+0x66>
 80087e4:	4630      	mov	r0, r6
 80087e6:	f001 fb67 	bl	8009eb8 <_free_r>
 80087ea:	2300      	movs	r3, #0
 80087ec:	6363      	str	r3, [r4, #52]	; 0x34
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	2300      	movs	r3, #0
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f043 0308 	orr.w	r3, r3, #8
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	b94b      	cbnz	r3, 800881e <__swsetup_r+0x9a>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008814:	d003      	beq.n	800881e <__swsetup_r+0x9a>
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
 800881a:	f001 f811 	bl	8009840 <__smakebuf_r>
 800881e:	89a2      	ldrh	r2, [r4, #12]
 8008820:	f012 0301 	ands.w	r3, r2, #1
 8008824:	d00c      	beq.n	8008840 <__swsetup_r+0xbc>
 8008826:	2300      	movs	r3, #0
 8008828:	60a3      	str	r3, [r4, #8]
 800882a:	6963      	ldr	r3, [r4, #20]
 800882c:	425b      	negs	r3, r3
 800882e:	61a3      	str	r3, [r4, #24]
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	b953      	cbnz	r3, 800884a <__swsetup_r+0xc6>
 8008834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008838:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800883c:	d1ba      	bne.n	80087b4 <__swsetup_r+0x30>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	0792      	lsls	r2, r2, #30
 8008842:	bf58      	it	pl
 8008844:	6963      	ldrpl	r3, [r4, #20]
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	e7f2      	b.n	8008830 <__swsetup_r+0xac>
 800884a:	2000      	movs	r0, #0
 800884c:	e7f7      	b.n	800883e <__swsetup_r+0xba>
 800884e:	bf00      	nop
 8008850:	200007e0 	.word	0x200007e0
 8008854:	0800b8e8 	.word	0x0800b8e8
 8008858:	0800b908 	.word	0x0800b908
 800885c:	0800b8c8 	.word	0x0800b8c8

08008860 <quorem>:
 8008860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	6903      	ldr	r3, [r0, #16]
 8008866:	690c      	ldr	r4, [r1, #16]
 8008868:	42a3      	cmp	r3, r4
 800886a:	4680      	mov	r8, r0
 800886c:	f2c0 8082 	blt.w	8008974 <quorem+0x114>
 8008870:	3c01      	subs	r4, #1
 8008872:	f101 0714 	add.w	r7, r1, #20
 8008876:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800887a:	f100 0614 	add.w	r6, r0, #20
 800887e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008882:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008886:	eb06 030c 	add.w	r3, r6, ip
 800888a:	3501      	adds	r5, #1
 800888c:	eb07 090c 	add.w	r9, r7, ip
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	fbb0 f5f5 	udiv	r5, r0, r5
 8008896:	b395      	cbz	r5, 80088fe <quorem+0x9e>
 8008898:	f04f 0a00 	mov.w	sl, #0
 800889c:	4638      	mov	r0, r7
 800889e:	46b6      	mov	lr, r6
 80088a0:	46d3      	mov	fp, sl
 80088a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80088a6:	b293      	uxth	r3, r2
 80088a8:	fb05 a303 	mla	r3, r5, r3, sl
 80088ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	ebab 0303 	sub.w	r3, fp, r3
 80088b6:	0c12      	lsrs	r2, r2, #16
 80088b8:	f8de b000 	ldr.w	fp, [lr]
 80088bc:	fb05 a202 	mla	r2, r5, r2, sl
 80088c0:	fa13 f38b 	uxtah	r3, r3, fp
 80088c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80088c8:	fa1f fb82 	uxth.w	fp, r2
 80088cc:	f8de 2000 	ldr.w	r2, [lr]
 80088d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80088d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088d8:	b29b      	uxth	r3, r3
 80088da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088de:	4581      	cmp	r9, r0
 80088e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80088e4:	f84e 3b04 	str.w	r3, [lr], #4
 80088e8:	d2db      	bcs.n	80088a2 <quorem+0x42>
 80088ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80088ee:	b933      	cbnz	r3, 80088fe <quorem+0x9e>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	3b04      	subs	r3, #4
 80088f4:	429e      	cmp	r6, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	d330      	bcc.n	800895c <quorem+0xfc>
 80088fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80088fe:	4640      	mov	r0, r8
 8008900:	f001 fa06 	bl	8009d10 <__mcmp>
 8008904:	2800      	cmp	r0, #0
 8008906:	db25      	blt.n	8008954 <quorem+0xf4>
 8008908:	3501      	adds	r5, #1
 800890a:	4630      	mov	r0, r6
 800890c:	f04f 0c00 	mov.w	ip, #0
 8008910:	f857 2b04 	ldr.w	r2, [r7], #4
 8008914:	f8d0 e000 	ldr.w	lr, [r0]
 8008918:	b293      	uxth	r3, r2
 800891a:	ebac 0303 	sub.w	r3, ip, r3
 800891e:	0c12      	lsrs	r2, r2, #16
 8008920:	fa13 f38e 	uxtah	r3, r3, lr
 8008924:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800892c:	b29b      	uxth	r3, r3
 800892e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008932:	45b9      	cmp	r9, r7
 8008934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008938:	f840 3b04 	str.w	r3, [r0], #4
 800893c:	d2e8      	bcs.n	8008910 <quorem+0xb0>
 800893e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008942:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008946:	b92a      	cbnz	r2, 8008954 <quorem+0xf4>
 8008948:	3b04      	subs	r3, #4
 800894a:	429e      	cmp	r6, r3
 800894c:	461a      	mov	r2, r3
 800894e:	d30b      	bcc.n	8008968 <quorem+0x108>
 8008950:	f8c8 4010 	str.w	r4, [r8, #16]
 8008954:	4628      	mov	r0, r5
 8008956:	b003      	add	sp, #12
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	3b04      	subs	r3, #4
 8008960:	2a00      	cmp	r2, #0
 8008962:	d1ca      	bne.n	80088fa <quorem+0x9a>
 8008964:	3c01      	subs	r4, #1
 8008966:	e7c5      	b.n	80088f4 <quorem+0x94>
 8008968:	6812      	ldr	r2, [r2, #0]
 800896a:	3b04      	subs	r3, #4
 800896c:	2a00      	cmp	r2, #0
 800896e:	d1ef      	bne.n	8008950 <quorem+0xf0>
 8008970:	3c01      	subs	r4, #1
 8008972:	e7ea      	b.n	800894a <quorem+0xea>
 8008974:	2000      	movs	r0, #0
 8008976:	e7ee      	b.n	8008956 <quorem+0xf6>

08008978 <_dtoa_r>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	ec57 6b10 	vmov	r6, r7, d0
 8008980:	b097      	sub	sp, #92	; 0x5c
 8008982:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008984:	9106      	str	r1, [sp, #24]
 8008986:	4604      	mov	r4, r0
 8008988:	920b      	str	r2, [sp, #44]	; 0x2c
 800898a:	9312      	str	r3, [sp, #72]	; 0x48
 800898c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008990:	e9cd 6700 	strd	r6, r7, [sp]
 8008994:	b93d      	cbnz	r5, 80089a6 <_dtoa_r+0x2e>
 8008996:	2010      	movs	r0, #16
 8008998:	f000 ff92 	bl	80098c0 <malloc>
 800899c:	6260      	str	r0, [r4, #36]	; 0x24
 800899e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089a2:	6005      	str	r5, [r0, #0]
 80089a4:	60c5      	str	r5, [r0, #12]
 80089a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	b151      	cbz	r1, 80089c2 <_dtoa_r+0x4a>
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	604a      	str	r2, [r1, #4]
 80089b0:	2301      	movs	r3, #1
 80089b2:	4093      	lsls	r3, r2
 80089b4:	608b      	str	r3, [r1, #8]
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 ffc9 	bl	800994e <_Bfree>
 80089bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	1e3b      	subs	r3, r7, #0
 80089c4:	bfbb      	ittet	lt
 80089c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089ca:	9301      	strlt	r3, [sp, #4]
 80089cc:	2300      	movge	r3, #0
 80089ce:	2201      	movlt	r2, #1
 80089d0:	bfac      	ite	ge
 80089d2:	f8c8 3000 	strge.w	r3, [r8]
 80089d6:	f8c8 2000 	strlt.w	r2, [r8]
 80089da:	4baf      	ldr	r3, [pc, #700]	; (8008c98 <_dtoa_r+0x320>)
 80089dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089e0:	ea33 0308 	bics.w	r3, r3, r8
 80089e4:	d114      	bne.n	8008a10 <_dtoa_r+0x98>
 80089e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	9b00      	ldr	r3, [sp, #0]
 80089f0:	b923      	cbnz	r3, 80089fc <_dtoa_r+0x84>
 80089f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f000 8542 	beq.w	8009480 <_dtoa_r+0xb08>
 80089fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008cac <_dtoa_r+0x334>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8544 	beq.w	8009490 <_dtoa_r+0xb18>
 8008a08:	f10b 0303 	add.w	r3, fp, #3
 8008a0c:	f000 bd3e 	b.w	800948c <_dtoa_r+0xb14>
 8008a10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a14:	2200      	movs	r2, #0
 8008a16:	2300      	movs	r3, #0
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f8 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a20:	4681      	mov	r9, r0
 8008a22:	b168      	cbz	r0, 8008a40 <_dtoa_r+0xc8>
 8008a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a26:	2301      	movs	r3, #1
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8524 	beq.w	800947a <_dtoa_r+0xb02>
 8008a32:	4b9a      	ldr	r3, [pc, #616]	; (8008c9c <_dtoa_r+0x324>)
 8008a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a36:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	f000 bd28 	b.w	8009490 <_dtoa_r+0xb18>
 8008a40:	aa14      	add	r2, sp, #80	; 0x50
 8008a42:	a915      	add	r1, sp, #84	; 0x54
 8008a44:	ec47 6b10 	vmov	d0, r6, r7
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f001 f9d8 	bl	8009dfe <__d2b>
 8008a4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a52:	9004      	str	r0, [sp, #16]
 8008a54:	2d00      	cmp	r5, #0
 8008a56:	d07c      	beq.n	8008b52 <_dtoa_r+0x1da>
 8008a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008a60:	46b2      	mov	sl, r6
 8008a62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4b8b      	ldr	r3, [pc, #556]	; (8008ca0 <_dtoa_r+0x328>)
 8008a72:	4650      	mov	r0, sl
 8008a74:	4659      	mov	r1, fp
 8008a76:	f7f7 fc07 	bl	8000288 <__aeabi_dsub>
 8008a7a:	a381      	add	r3, pc, #516	; (adr r3, 8008c80 <_dtoa_r+0x308>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fdba 	bl	80005f8 <__aeabi_dmul>
 8008a84:	a380      	add	r3, pc, #512	; (adr r3, 8008c88 <_dtoa_r+0x310>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	f7f7 fbff 	bl	800028c <__adddf3>
 8008a8e:	4606      	mov	r6, r0
 8008a90:	4628      	mov	r0, r5
 8008a92:	460f      	mov	r7, r1
 8008a94:	f7f7 fd46 	bl	8000524 <__aeabi_i2d>
 8008a98:	a37d      	add	r3, pc, #500	; (adr r3, 8008c90 <_dtoa_r+0x318>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fdab 	bl	80005f8 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	f7f7 fbef 	bl	800028c <__adddf3>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	f7f8 f851 	bl	8000b58 <__aeabi_d2iz>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4682      	mov	sl, r0
 8008aba:	2300      	movs	r3, #0
 8008abc:	4630      	mov	r0, r6
 8008abe:	4639      	mov	r1, r7
 8008ac0:	f7f8 f80c 	bl	8000adc <__aeabi_dcmplt>
 8008ac4:	b148      	cbz	r0, 8008ada <_dtoa_r+0x162>
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	f7f7 fd2c 	bl	8000524 <__aeabi_i2d>
 8008acc:	4632      	mov	r2, r6
 8008ace:	463b      	mov	r3, r7
 8008ad0:	f7f7 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ad4:	b908      	cbnz	r0, 8008ada <_dtoa_r+0x162>
 8008ad6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ada:	f1ba 0f16 	cmp.w	sl, #22
 8008ade:	d859      	bhi.n	8008b94 <_dtoa_r+0x21c>
 8008ae0:	4970      	ldr	r1, [pc, #448]	; (8008ca4 <_dtoa_r+0x32c>)
 8008ae2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aee:	f7f8 f813 	bl	8000b18 <__aeabi_dcmpgt>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d050      	beq.n	8008b98 <_dtoa_r+0x220>
 8008af6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008afa:	2300      	movs	r3, #0
 8008afc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b00:	1b5d      	subs	r5, r3, r5
 8008b02:	f1b5 0801 	subs.w	r8, r5, #1
 8008b06:	bf49      	itett	mi
 8008b08:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b0c:	2300      	movpl	r3, #0
 8008b0e:	9305      	strmi	r3, [sp, #20]
 8008b10:	f04f 0800 	movmi.w	r8, #0
 8008b14:	bf58      	it	pl
 8008b16:	9305      	strpl	r3, [sp, #20]
 8008b18:	f1ba 0f00 	cmp.w	sl, #0
 8008b1c:	db3e      	blt.n	8008b9c <_dtoa_r+0x224>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	44d0      	add	r8, sl
 8008b22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008b26:	9307      	str	r3, [sp, #28]
 8008b28:	9b06      	ldr	r3, [sp, #24]
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	f200 8090 	bhi.w	8008c50 <_dtoa_r+0x2d8>
 8008b30:	2b05      	cmp	r3, #5
 8008b32:	bfc4      	itt	gt
 8008b34:	3b04      	subgt	r3, #4
 8008b36:	9306      	strgt	r3, [sp, #24]
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8008b3e:	bfcc      	ite	gt
 8008b40:	2500      	movgt	r5, #0
 8008b42:	2501      	movle	r5, #1
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	f200 808f 	bhi.w	8008c68 <_dtoa_r+0x2f0>
 8008b4a:	e8df f003 	tbb	[pc, r3]
 8008b4e:	7f7d      	.short	0x7f7d
 8008b50:	7131      	.short	0x7131
 8008b52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008b56:	441d      	add	r5, r3
 8008b58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008b5c:	2820      	cmp	r0, #32
 8008b5e:	dd13      	ble.n	8008b88 <_dtoa_r+0x210>
 8008b60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	fa08 f800 	lsl.w	r8, r8, r0
 8008b6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008b6e:	fa23 f000 	lsr.w	r0, r3, r0
 8008b72:	ea48 0000 	orr.w	r0, r8, r0
 8008b76:	f7f7 fcc5 	bl	8000504 <__aeabi_ui2d>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008b82:	3d01      	subs	r5, #1
 8008b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b86:	e772      	b.n	8008a6e <_dtoa_r+0xf6>
 8008b88:	9b00      	ldr	r3, [sp, #0]
 8008b8a:	f1c0 0020 	rsb	r0, r0, #32
 8008b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b92:	e7f0      	b.n	8008b76 <_dtoa_r+0x1fe>
 8008b94:	2301      	movs	r3, #1
 8008b96:	e7b1      	b.n	8008afc <_dtoa_r+0x184>
 8008b98:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b9a:	e7b0      	b.n	8008afe <_dtoa_r+0x186>
 8008b9c:	9b05      	ldr	r3, [sp, #20]
 8008b9e:	eba3 030a 	sub.w	r3, r3, sl
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	f1ca 0300 	rsb	r3, sl, #0
 8008ba8:	9307      	str	r3, [sp, #28]
 8008baa:	2300      	movs	r3, #0
 8008bac:	930e      	str	r3, [sp, #56]	; 0x38
 8008bae:	e7bb      	b.n	8008b28 <_dtoa_r+0x1b0>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dd59      	ble.n	8008c6e <_dtoa_r+0x2f6>
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	4699      	mov	r9, r3
 8008bbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	6072      	str	r2, [r6, #4]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	f102 0014 	add.w	r0, r2, #20
 8008bca:	4298      	cmp	r0, r3
 8008bcc:	6871      	ldr	r1, [r6, #4]
 8008bce:	d953      	bls.n	8008c78 <_dtoa_r+0x300>
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fe88 	bl	80098e6 <_Balloc>
 8008bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bd8:	6030      	str	r0, [r6, #0]
 8008bda:	f1b9 0f0e 	cmp.w	r9, #14
 8008bde:	f8d3 b000 	ldr.w	fp, [r3]
 8008be2:	f200 80e6 	bhi.w	8008db2 <_dtoa_r+0x43a>
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	f000 80e3 	beq.w	8008db2 <_dtoa_r+0x43a>
 8008bec:	ed9d 7b00 	vldr	d7, [sp]
 8008bf0:	f1ba 0f00 	cmp.w	sl, #0
 8008bf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008bf8:	dd74      	ble.n	8008ce4 <_dtoa_r+0x36c>
 8008bfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <_dtoa_r+0x32c>)
 8008bfc:	f00a 030f 	and.w	r3, sl, #15
 8008c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c04:	ed93 7b00 	vldr	d7, [r3]
 8008c08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008c0c:	06f0      	lsls	r0, r6, #27
 8008c0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008c12:	d565      	bpl.n	8008ce0 <_dtoa_r+0x368>
 8008c14:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <_dtoa_r+0x330>)
 8008c16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c1e:	f7f7 fe15 	bl	800084c <__aeabi_ddiv>
 8008c22:	e9cd 0100 	strd	r0, r1, [sp]
 8008c26:	f006 060f 	and.w	r6, r6, #15
 8008c2a:	2503      	movs	r5, #3
 8008c2c:	4f1e      	ldr	r7, [pc, #120]	; (8008ca8 <_dtoa_r+0x330>)
 8008c2e:	e04c      	b.n	8008cca <_dtoa_r+0x352>
 8008c30:	2301      	movs	r3, #1
 8008c32:	930a      	str	r3, [sp, #40]	; 0x28
 8008c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c36:	4453      	add	r3, sl
 8008c38:	f103 0901 	add.w	r9, r3, #1
 8008c3c:	9302      	str	r3, [sp, #8]
 8008c3e:	464b      	mov	r3, r9
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	bfb8      	it	lt
 8008c44:	2301      	movlt	r3, #1
 8008c46:	e7ba      	b.n	8008bbe <_dtoa_r+0x246>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	e7b2      	b.n	8008bb2 <_dtoa_r+0x23a>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7f0      	b.n	8008c32 <_dtoa_r+0x2ba>
 8008c50:	2501      	movs	r5, #1
 8008c52:	2300      	movs	r3, #0
 8008c54:	9306      	str	r3, [sp, #24]
 8008c56:	950a      	str	r5, [sp, #40]	; 0x28
 8008c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c5c:	9302      	str	r3, [sp, #8]
 8008c5e:	4699      	mov	r9, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	2312      	movs	r3, #18
 8008c64:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c66:	e7aa      	b.n	8008bbe <_dtoa_r+0x246>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c6c:	e7f4      	b.n	8008c58 <_dtoa_r+0x2e0>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	9302      	str	r3, [sp, #8]
 8008c72:	4699      	mov	r9, r3
 8008c74:	461a      	mov	r2, r3
 8008c76:	e7f5      	b.n	8008c64 <_dtoa_r+0x2ec>
 8008c78:	3101      	adds	r1, #1
 8008c7a:	6071      	str	r1, [r6, #4]
 8008c7c:	0052      	lsls	r2, r2, #1
 8008c7e:	e7a2      	b.n	8008bc6 <_dtoa_r+0x24e>
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	7ff00000 	.word	0x7ff00000
 8008c9c:	0800b895 	.word	0x0800b895
 8008ca0:	3ff80000 	.word	0x3ff80000
 8008ca4:	0800b950 	.word	0x0800b950
 8008ca8:	0800b928 	.word	0x0800b928
 8008cac:	0800b8c1 	.word	0x0800b8c1
 8008cb0:	07f1      	lsls	r1, r6, #31
 8008cb2:	d508      	bpl.n	8008cc6 <_dtoa_r+0x34e>
 8008cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	1076      	asrs	r6, r6, #1
 8008cc8:	3708      	adds	r7, #8
 8008cca:	2e00      	cmp	r6, #0
 8008ccc:	d1f0      	bne.n	8008cb0 <_dtoa_r+0x338>
 8008cce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd6:	f7f7 fdb9 	bl	800084c <__aeabi_ddiv>
 8008cda:	e9cd 0100 	strd	r0, r1, [sp]
 8008cde:	e01a      	b.n	8008d16 <_dtoa_r+0x39e>
 8008ce0:	2502      	movs	r5, #2
 8008ce2:	e7a3      	b.n	8008c2c <_dtoa_r+0x2b4>
 8008ce4:	f000 80a0 	beq.w	8008e28 <_dtoa_r+0x4b0>
 8008ce8:	f1ca 0600 	rsb	r6, sl, #0
 8008cec:	4b9f      	ldr	r3, [pc, #636]	; (8008f6c <_dtoa_r+0x5f4>)
 8008cee:	4fa0      	ldr	r7, [pc, #640]	; (8008f70 <_dtoa_r+0x5f8>)
 8008cf0:	f006 020f 	and.w	r2, r6, #15
 8008cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d00:	f7f7 fc7a 	bl	80005f8 <__aeabi_dmul>
 8008d04:	e9cd 0100 	strd	r0, r1, [sp]
 8008d08:	1136      	asrs	r6, r6, #4
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2502      	movs	r5, #2
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	d17f      	bne.n	8008e12 <_dtoa_r+0x49a>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e1      	bne.n	8008cda <_dtoa_r+0x362>
 8008d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8087 	beq.w	8008e2c <_dtoa_r+0x4b4>
 8008d1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d22:	2200      	movs	r2, #0
 8008d24:	4b93      	ldr	r3, [pc, #588]	; (8008f74 <_dtoa_r+0x5fc>)
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f7 fed7 	bl	8000adc <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d07c      	beq.n	8008e2c <_dtoa_r+0x4b4>
 8008d32:	f1b9 0f00 	cmp.w	r9, #0
 8008d36:	d079      	beq.n	8008e2c <_dtoa_r+0x4b4>
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dd35      	ble.n	8008daa <_dtoa_r+0x432>
 8008d3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008d42:	9308      	str	r3, [sp, #32]
 8008d44:	4639      	mov	r1, r7
 8008d46:	2200      	movs	r2, #0
 8008d48:	4b8b      	ldr	r3, [pc, #556]	; (8008f78 <_dtoa_r+0x600>)
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7f7 fc54 	bl	80005f8 <__aeabi_dmul>
 8008d50:	e9cd 0100 	strd	r0, r1, [sp]
 8008d54:	9f02      	ldr	r7, [sp, #8]
 8008d56:	3501      	adds	r5, #1
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f7f7 fbe3 	bl	8000524 <__aeabi_i2d>
 8008d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	2200      	movs	r2, #0
 8008d68:	4b84      	ldr	r3, [pc, #528]	; (8008f7c <_dtoa_r+0x604>)
 8008d6a:	f7f7 fa8f 	bl	800028c <__adddf3>
 8008d6e:	4605      	mov	r5, r0
 8008d70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d74:	2f00      	cmp	r7, #0
 8008d76:	d15d      	bne.n	8008e34 <_dtoa_r+0x4bc>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b81      	ldr	r3, [pc, #516]	; (8008f80 <_dtoa_r+0x608>)
 8008d7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d80:	f7f7 fa82 	bl	8000288 <__aeabi_dsub>
 8008d84:	462a      	mov	r2, r5
 8008d86:	4633      	mov	r3, r6
 8008d88:	e9cd 0100 	strd	r0, r1, [sp]
 8008d8c:	f7f7 fec4 	bl	8000b18 <__aeabi_dcmpgt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f040 8288 	bne.w	80092a6 <_dtoa_r+0x92e>
 8008d96:	462a      	mov	r2, r5
 8008d98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008da0:	f7f7 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f040 827c 	bne.w	80092a2 <_dtoa_r+0x92a>
 8008daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dae:	e9cd 2300 	strd	r2, r3, [sp]
 8008db2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f2c0 8150 	blt.w	800905a <_dtoa_r+0x6e2>
 8008dba:	f1ba 0f0e 	cmp.w	sl, #14
 8008dbe:	f300 814c 	bgt.w	800905a <_dtoa_r+0x6e2>
 8008dc2:	4b6a      	ldr	r3, [pc, #424]	; (8008f6c <_dtoa_r+0x5f4>)
 8008dc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dc8:	ed93 7b00 	vldr	d7, [r3]
 8008dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dd4:	f280 80d8 	bge.w	8008f88 <_dtoa_r+0x610>
 8008dd8:	f1b9 0f00 	cmp.w	r9, #0
 8008ddc:	f300 80d4 	bgt.w	8008f88 <_dtoa_r+0x610>
 8008de0:	f040 825e 	bne.w	80092a0 <_dtoa_r+0x928>
 8008de4:	2200      	movs	r2, #0
 8008de6:	4b66      	ldr	r3, [pc, #408]	; (8008f80 <_dtoa_r+0x608>)
 8008de8:	ec51 0b17 	vmov	r0, r1, d7
 8008dec:	f7f7 fc04 	bl	80005f8 <__aeabi_dmul>
 8008df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008df4:	f7f7 fe86 	bl	8000b04 <__aeabi_dcmpge>
 8008df8:	464f      	mov	r7, r9
 8008dfa:	464e      	mov	r6, r9
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f040 8234 	bne.w	800926a <_dtoa_r+0x8f2>
 8008e02:	2331      	movs	r3, #49	; 0x31
 8008e04:	f10b 0501 	add.w	r5, fp, #1
 8008e08:	f88b 3000 	strb.w	r3, [fp]
 8008e0c:	f10a 0a01 	add.w	sl, sl, #1
 8008e10:	e22f      	b.n	8009272 <_dtoa_r+0x8fa>
 8008e12:	07f2      	lsls	r2, r6, #31
 8008e14:	d505      	bpl.n	8008e22 <_dtoa_r+0x4aa>
 8008e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1a:	f7f7 fbed 	bl	80005f8 <__aeabi_dmul>
 8008e1e:	3501      	adds	r5, #1
 8008e20:	2301      	movs	r3, #1
 8008e22:	1076      	asrs	r6, r6, #1
 8008e24:	3708      	adds	r7, #8
 8008e26:	e772      	b.n	8008d0e <_dtoa_r+0x396>
 8008e28:	2502      	movs	r5, #2
 8008e2a:	e774      	b.n	8008d16 <_dtoa_r+0x39e>
 8008e2c:	f8cd a020 	str.w	sl, [sp, #32]
 8008e30:	464f      	mov	r7, r9
 8008e32:	e791      	b.n	8008d58 <_dtoa_r+0x3e0>
 8008e34:	4b4d      	ldr	r3, [pc, #308]	; (8008f6c <_dtoa_r+0x5f4>)
 8008e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d047      	beq.n	8008ed4 <_dtoa_r+0x55c>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	2000      	movs	r0, #0
 8008e4a:	494e      	ldr	r1, [pc, #312]	; (8008f84 <_dtoa_r+0x60c>)
 8008e4c:	f7f7 fcfe 	bl	800084c <__aeabi_ddiv>
 8008e50:	462a      	mov	r2, r5
 8008e52:	4633      	mov	r3, r6
 8008e54:	f7f7 fa18 	bl	8000288 <__aeabi_dsub>
 8008e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008e5c:	465d      	mov	r5, fp
 8008e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e62:	f7f7 fe79 	bl	8000b58 <__aeabi_d2iz>
 8008e66:	4606      	mov	r6, r0
 8008e68:	f7f7 fb5c 	bl	8000524 <__aeabi_i2d>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e74:	f7f7 fa08 	bl	8000288 <__aeabi_dsub>
 8008e78:	3630      	adds	r6, #48	; 0x30
 8008e7a:	f805 6b01 	strb.w	r6, [r5], #1
 8008e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e82:	e9cd 0100 	strd	r0, r1, [sp]
 8008e86:	f7f7 fe29 	bl	8000adc <__aeabi_dcmplt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d163      	bne.n	8008f56 <_dtoa_r+0x5de>
 8008e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e92:	2000      	movs	r0, #0
 8008e94:	4937      	ldr	r1, [pc, #220]	; (8008f74 <_dtoa_r+0x5fc>)
 8008e96:	f7f7 f9f7 	bl	8000288 <__aeabi_dsub>
 8008e9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e9e:	f7f7 fe1d 	bl	8000adc <__aeabi_dcmplt>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f040 80b7 	bne.w	8009016 <_dtoa_r+0x69e>
 8008ea8:	eba5 030b 	sub.w	r3, r5, fp
 8008eac:	429f      	cmp	r7, r3
 8008eae:	f77f af7c 	ble.w	8008daa <_dtoa_r+0x432>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4b30      	ldr	r3, [pc, #192]	; (8008f78 <_dtoa_r+0x600>)
 8008eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eba:	f7f7 fb9d 	bl	80005f8 <__aeabi_dmul>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ec4:	4b2c      	ldr	r3, [pc, #176]	; (8008f78 <_dtoa_r+0x600>)
 8008ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eca:	f7f7 fb95 	bl	80005f8 <__aeabi_dmul>
 8008ece:	e9cd 0100 	strd	r0, r1, [sp]
 8008ed2:	e7c4      	b.n	8008e5e <_dtoa_r+0x4e6>
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	4633      	mov	r3, r6
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ee0:	eb0b 0507 	add.w	r5, fp, r7
 8008ee4:	465e      	mov	r6, fp
 8008ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eea:	f7f7 fe35 	bl	8000b58 <__aeabi_d2iz>
 8008eee:	4607      	mov	r7, r0
 8008ef0:	f7f7 fb18 	bl	8000524 <__aeabi_i2d>
 8008ef4:	3730      	adds	r7, #48	; 0x30
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	f806 7b01 	strb.w	r7, [r6], #1
 8008f06:	42ae      	cmp	r6, r5
 8008f08:	e9cd 0100 	strd	r0, r1, [sp]
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	d126      	bne.n	8008f60 <_dtoa_r+0x5e8>
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <_dtoa_r+0x60c>)
 8008f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f18:	f7f7 f9b8 	bl	800028c <__adddf3>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f24:	f7f7 fdf8 	bl	8000b18 <__aeabi_dcmpgt>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d174      	bne.n	8009016 <_dtoa_r+0x69e>
 8008f2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f30:	2000      	movs	r0, #0
 8008f32:	4914      	ldr	r1, [pc, #80]	; (8008f84 <_dtoa_r+0x60c>)
 8008f34:	f7f7 f9a8 	bl	8000288 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f40:	f7f7 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f43f af30 	beq.w	8008daa <_dtoa_r+0x432>
 8008f4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f4e:	2b30      	cmp	r3, #48	; 0x30
 8008f50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008f54:	d002      	beq.n	8008f5c <_dtoa_r+0x5e4>
 8008f56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f5a:	e04a      	b.n	8008ff2 <_dtoa_r+0x67a>
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	e7f4      	b.n	8008f4a <_dtoa_r+0x5d2>
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <_dtoa_r+0x600>)
 8008f62:	f7f7 fb49 	bl	80005f8 <__aeabi_dmul>
 8008f66:	e9cd 0100 	strd	r0, r1, [sp]
 8008f6a:	e7bc      	b.n	8008ee6 <_dtoa_r+0x56e>
 8008f6c:	0800b950 	.word	0x0800b950
 8008f70:	0800b928 	.word	0x0800b928
 8008f74:	3ff00000 	.word	0x3ff00000
 8008f78:	40240000 	.word	0x40240000
 8008f7c:	401c0000 	.word	0x401c0000
 8008f80:	40140000 	.word	0x40140000
 8008f84:	3fe00000 	.word	0x3fe00000
 8008f88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f8c:	465d      	mov	r5, fp
 8008f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f92:	4630      	mov	r0, r6
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 fc59 	bl	800084c <__aeabi_ddiv>
 8008f9a:	f7f7 fddd 	bl	8000b58 <__aeabi_d2iz>
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	f7f7 fac0 	bl	8000524 <__aeabi_i2d>
 8008fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008fb8:	f7f7 f966 	bl	8000288 <__aeabi_dsub>
 8008fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8008fc0:	eba5 060b 	sub.w	r6, r5, fp
 8008fc4:	45b1      	cmp	r9, r6
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	d139      	bne.n	8009040 <_dtoa_r+0x6c8>
 8008fcc:	f7f7 f95e 	bl	800028c <__adddf3>
 8008fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	f7f7 fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 8008fdc:	b9c8      	cbnz	r0, 8009012 <_dtoa_r+0x69a>
 8008fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	f7f7 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fea:	b110      	cbz	r0, 8008ff2 <_dtoa_r+0x67a>
 8008fec:	f018 0f01 	tst.w	r8, #1
 8008ff0:	d10f      	bne.n	8009012 <_dtoa_r+0x69a>
 8008ff2:	9904      	ldr	r1, [sp, #16]
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fcaa 	bl	800994e <_Bfree>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ffe:	702b      	strb	r3, [r5, #0]
 8009000:	f10a 0301 	add.w	r3, sl, #1
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8241 	beq.w	8009490 <_dtoa_r+0xb18>
 800900e:	601d      	str	r5, [r3, #0]
 8009010:	e23e      	b.n	8009490 <_dtoa_r+0xb18>
 8009012:	f8cd a020 	str.w	sl, [sp, #32]
 8009016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800901a:	2a39      	cmp	r2, #57	; 0x39
 800901c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009020:	d108      	bne.n	8009034 <_dtoa_r+0x6bc>
 8009022:	459b      	cmp	fp, r3
 8009024:	d10a      	bne.n	800903c <_dtoa_r+0x6c4>
 8009026:	9b08      	ldr	r3, [sp, #32]
 8009028:	3301      	adds	r3, #1
 800902a:	9308      	str	r3, [sp, #32]
 800902c:	2330      	movs	r3, #48	; 0x30
 800902e:	f88b 3000 	strb.w	r3, [fp]
 8009032:	465b      	mov	r3, fp
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	3201      	adds	r2, #1
 8009038:	701a      	strb	r2, [r3, #0]
 800903a:	e78c      	b.n	8008f56 <_dtoa_r+0x5de>
 800903c:	461d      	mov	r5, r3
 800903e:	e7ea      	b.n	8009016 <_dtoa_r+0x69e>
 8009040:	2200      	movs	r2, #0
 8009042:	4b9b      	ldr	r3, [pc, #620]	; (80092b0 <_dtoa_r+0x938>)
 8009044:	f7f7 fad8 	bl	80005f8 <__aeabi_dmul>
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	f7f7 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009054:	2800      	cmp	r0, #0
 8009056:	d09a      	beq.n	8008f8e <_dtoa_r+0x616>
 8009058:	e7cb      	b.n	8008ff2 <_dtoa_r+0x67a>
 800905a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800905c:	2a00      	cmp	r2, #0
 800905e:	f000 808b 	beq.w	8009178 <_dtoa_r+0x800>
 8009062:	9a06      	ldr	r2, [sp, #24]
 8009064:	2a01      	cmp	r2, #1
 8009066:	dc6e      	bgt.n	8009146 <_dtoa_r+0x7ce>
 8009068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800906a:	2a00      	cmp	r2, #0
 800906c:	d067      	beq.n	800913e <_dtoa_r+0x7c6>
 800906e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009072:	9f07      	ldr	r7, [sp, #28]
 8009074:	9d05      	ldr	r5, [sp, #20]
 8009076:	9a05      	ldr	r2, [sp, #20]
 8009078:	2101      	movs	r1, #1
 800907a:	441a      	add	r2, r3
 800907c:	4620      	mov	r0, r4
 800907e:	9205      	str	r2, [sp, #20]
 8009080:	4498      	add	r8, r3
 8009082:	f000 fd04 	bl	8009a8e <__i2b>
 8009086:	4606      	mov	r6, r0
 8009088:	2d00      	cmp	r5, #0
 800908a:	dd0c      	ble.n	80090a6 <_dtoa_r+0x72e>
 800908c:	f1b8 0f00 	cmp.w	r8, #0
 8009090:	dd09      	ble.n	80090a6 <_dtoa_r+0x72e>
 8009092:	4545      	cmp	r5, r8
 8009094:	9a05      	ldr	r2, [sp, #20]
 8009096:	462b      	mov	r3, r5
 8009098:	bfa8      	it	ge
 800909a:	4643      	movge	r3, r8
 800909c:	1ad2      	subs	r2, r2, r3
 800909e:	9205      	str	r2, [sp, #20]
 80090a0:	1aed      	subs	r5, r5, r3
 80090a2:	eba8 0803 	sub.w	r8, r8, r3
 80090a6:	9b07      	ldr	r3, [sp, #28]
 80090a8:	b1eb      	cbz	r3, 80090e6 <_dtoa_r+0x76e>
 80090aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d067      	beq.n	8009180 <_dtoa_r+0x808>
 80090b0:	b18f      	cbz	r7, 80090d6 <_dtoa_r+0x75e>
 80090b2:	4631      	mov	r1, r6
 80090b4:	463a      	mov	r2, r7
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 fd88 	bl	8009bcc <__pow5mult>
 80090bc:	9a04      	ldr	r2, [sp, #16]
 80090be:	4601      	mov	r1, r0
 80090c0:	4606      	mov	r6, r0
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fcec 	bl	8009aa0 <__multiply>
 80090c8:	9904      	ldr	r1, [sp, #16]
 80090ca:	9008      	str	r0, [sp, #32]
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 fc3e 	bl	800994e <_Bfree>
 80090d2:	9b08      	ldr	r3, [sp, #32]
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	9b07      	ldr	r3, [sp, #28]
 80090d8:	1bda      	subs	r2, r3, r7
 80090da:	d004      	beq.n	80090e6 <_dtoa_r+0x76e>
 80090dc:	9904      	ldr	r1, [sp, #16]
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 fd74 	bl	8009bcc <__pow5mult>
 80090e4:	9004      	str	r0, [sp, #16]
 80090e6:	2101      	movs	r1, #1
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fcd0 	bl	8009a8e <__i2b>
 80090ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090f0:	4607      	mov	r7, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 81d0 	beq.w	8009498 <_dtoa_r+0xb20>
 80090f8:	461a      	mov	r2, r3
 80090fa:	4601      	mov	r1, r0
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fd65 	bl	8009bcc <__pow5mult>
 8009102:	9b06      	ldr	r3, [sp, #24]
 8009104:	2b01      	cmp	r3, #1
 8009106:	4607      	mov	r7, r0
 8009108:	dc40      	bgt.n	800918c <_dtoa_r+0x814>
 800910a:	9b00      	ldr	r3, [sp, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d139      	bne.n	8009184 <_dtoa_r+0x80c>
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009116:	2b00      	cmp	r3, #0
 8009118:	d136      	bne.n	8009188 <_dtoa_r+0x810>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009120:	0d1b      	lsrs	r3, r3, #20
 8009122:	051b      	lsls	r3, r3, #20
 8009124:	b12b      	cbz	r3, 8009132 <_dtoa_r+0x7ba>
 8009126:	9b05      	ldr	r3, [sp, #20]
 8009128:	3301      	adds	r3, #1
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	f108 0801 	add.w	r8, r8, #1
 8009130:	2301      	movs	r3, #1
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009136:	2b00      	cmp	r3, #0
 8009138:	d12a      	bne.n	8009190 <_dtoa_r+0x818>
 800913a:	2001      	movs	r0, #1
 800913c:	e030      	b.n	80091a0 <_dtoa_r+0x828>
 800913e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009140:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009144:	e795      	b.n	8009072 <_dtoa_r+0x6fa>
 8009146:	9b07      	ldr	r3, [sp, #28]
 8009148:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800914c:	42bb      	cmp	r3, r7
 800914e:	bfbf      	itttt	lt
 8009150:	9b07      	ldrlt	r3, [sp, #28]
 8009152:	9707      	strlt	r7, [sp, #28]
 8009154:	1afa      	sublt	r2, r7, r3
 8009156:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009158:	bfbb      	ittet	lt
 800915a:	189b      	addlt	r3, r3, r2
 800915c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800915e:	1bdf      	subge	r7, r3, r7
 8009160:	2700      	movlt	r7, #0
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	bfb5      	itete	lt
 8009168:	9b05      	ldrlt	r3, [sp, #20]
 800916a:	9d05      	ldrge	r5, [sp, #20]
 800916c:	eba3 0509 	sublt.w	r5, r3, r9
 8009170:	464b      	movge	r3, r9
 8009172:	bfb8      	it	lt
 8009174:	2300      	movlt	r3, #0
 8009176:	e77e      	b.n	8009076 <_dtoa_r+0x6fe>
 8009178:	9f07      	ldr	r7, [sp, #28]
 800917a:	9d05      	ldr	r5, [sp, #20]
 800917c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800917e:	e783      	b.n	8009088 <_dtoa_r+0x710>
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	e7ab      	b.n	80090dc <_dtoa_r+0x764>
 8009184:	2300      	movs	r3, #0
 8009186:	e7d4      	b.n	8009132 <_dtoa_r+0x7ba>
 8009188:	9b00      	ldr	r3, [sp, #0]
 800918a:	e7d2      	b.n	8009132 <_dtoa_r+0x7ba>
 800918c:	2300      	movs	r3, #0
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009196:	6918      	ldr	r0, [r3, #16]
 8009198:	f000 fc2b 	bl	80099f2 <__hi0bits>
 800919c:	f1c0 0020 	rsb	r0, r0, #32
 80091a0:	4440      	add	r0, r8
 80091a2:	f010 001f 	ands.w	r0, r0, #31
 80091a6:	d047      	beq.n	8009238 <_dtoa_r+0x8c0>
 80091a8:	f1c0 0320 	rsb	r3, r0, #32
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	dd3b      	ble.n	8009228 <_dtoa_r+0x8b0>
 80091b0:	9b05      	ldr	r3, [sp, #20]
 80091b2:	f1c0 001c 	rsb	r0, r0, #28
 80091b6:	4403      	add	r3, r0
 80091b8:	9305      	str	r3, [sp, #20]
 80091ba:	4405      	add	r5, r0
 80091bc:	4480      	add	r8, r0
 80091be:	9b05      	ldr	r3, [sp, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dd05      	ble.n	80091d0 <_dtoa_r+0x858>
 80091c4:	461a      	mov	r2, r3
 80091c6:	9904      	ldr	r1, [sp, #16]
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fd4d 	bl	8009c68 <__lshift>
 80091ce:	9004      	str	r0, [sp, #16]
 80091d0:	f1b8 0f00 	cmp.w	r8, #0
 80091d4:	dd05      	ble.n	80091e2 <_dtoa_r+0x86a>
 80091d6:	4639      	mov	r1, r7
 80091d8:	4642      	mov	r2, r8
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fd44 	bl	8009c68 <__lshift>
 80091e0:	4607      	mov	r7, r0
 80091e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091e4:	b353      	cbz	r3, 800923c <_dtoa_r+0x8c4>
 80091e6:	4639      	mov	r1, r7
 80091e8:	9804      	ldr	r0, [sp, #16]
 80091ea:	f000 fd91 	bl	8009d10 <__mcmp>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	da24      	bge.n	800923c <_dtoa_r+0x8c4>
 80091f2:	2300      	movs	r3, #0
 80091f4:	220a      	movs	r2, #10
 80091f6:	9904      	ldr	r1, [sp, #16]
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 fbbf 	bl	800997c <__multadd>
 80091fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009200:	9004      	str	r0, [sp, #16]
 8009202:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 814d 	beq.w	80094a6 <_dtoa_r+0xb2e>
 800920c:	2300      	movs	r3, #0
 800920e:	4631      	mov	r1, r6
 8009210:	220a      	movs	r2, #10
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fbb2 	bl	800997c <__multadd>
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	4606      	mov	r6, r0
 800921e:	dc4f      	bgt.n	80092c0 <_dtoa_r+0x948>
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	2b02      	cmp	r3, #2
 8009224:	dd4c      	ble.n	80092c0 <_dtoa_r+0x948>
 8009226:	e011      	b.n	800924c <_dtoa_r+0x8d4>
 8009228:	d0c9      	beq.n	80091be <_dtoa_r+0x846>
 800922a:	9a05      	ldr	r2, [sp, #20]
 800922c:	331c      	adds	r3, #28
 800922e:	441a      	add	r2, r3
 8009230:	9205      	str	r2, [sp, #20]
 8009232:	441d      	add	r5, r3
 8009234:	4498      	add	r8, r3
 8009236:	e7c2      	b.n	80091be <_dtoa_r+0x846>
 8009238:	4603      	mov	r3, r0
 800923a:	e7f6      	b.n	800922a <_dtoa_r+0x8b2>
 800923c:	f1b9 0f00 	cmp.w	r9, #0
 8009240:	dc38      	bgt.n	80092b4 <_dtoa_r+0x93c>
 8009242:	9b06      	ldr	r3, [sp, #24]
 8009244:	2b02      	cmp	r3, #2
 8009246:	dd35      	ble.n	80092b4 <_dtoa_r+0x93c>
 8009248:	f8cd 9008 	str.w	r9, [sp, #8]
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	b963      	cbnz	r3, 800926a <_dtoa_r+0x8f2>
 8009250:	4639      	mov	r1, r7
 8009252:	2205      	movs	r2, #5
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fb91 	bl	800997c <__multadd>
 800925a:	4601      	mov	r1, r0
 800925c:	4607      	mov	r7, r0
 800925e:	9804      	ldr	r0, [sp, #16]
 8009260:	f000 fd56 	bl	8009d10 <__mcmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	f73f adcc 	bgt.w	8008e02 <_dtoa_r+0x48a>
 800926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926c:	465d      	mov	r5, fp
 800926e:	ea6f 0a03 	mvn.w	sl, r3
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	4639      	mov	r1, r7
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fb68 	bl	800994e <_Bfree>
 800927e:	2e00      	cmp	r6, #0
 8009280:	f43f aeb7 	beq.w	8008ff2 <_dtoa_r+0x67a>
 8009284:	f1b9 0f00 	cmp.w	r9, #0
 8009288:	d005      	beq.n	8009296 <_dtoa_r+0x91e>
 800928a:	45b1      	cmp	r9, r6
 800928c:	d003      	beq.n	8009296 <_dtoa_r+0x91e>
 800928e:	4649      	mov	r1, r9
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fb5c 	bl	800994e <_Bfree>
 8009296:	4631      	mov	r1, r6
 8009298:	4620      	mov	r0, r4
 800929a:	f000 fb58 	bl	800994e <_Bfree>
 800929e:	e6a8      	b.n	8008ff2 <_dtoa_r+0x67a>
 80092a0:	2700      	movs	r7, #0
 80092a2:	463e      	mov	r6, r7
 80092a4:	e7e1      	b.n	800926a <_dtoa_r+0x8f2>
 80092a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80092aa:	463e      	mov	r6, r7
 80092ac:	e5a9      	b.n	8008e02 <_dtoa_r+0x48a>
 80092ae:	bf00      	nop
 80092b0:	40240000 	.word	0x40240000
 80092b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80fa 	beq.w	80094b4 <_dtoa_r+0xb3c>
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	dd05      	ble.n	80092d0 <_dtoa_r+0x958>
 80092c4:	4631      	mov	r1, r6
 80092c6:	462a      	mov	r2, r5
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fccd 	bl	8009c68 <__lshift>
 80092ce:	4606      	mov	r6, r0
 80092d0:	9b07      	ldr	r3, [sp, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04c      	beq.n	8009370 <_dtoa_r+0x9f8>
 80092d6:	6871      	ldr	r1, [r6, #4]
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fb04 	bl	80098e6 <_Balloc>
 80092de:	6932      	ldr	r2, [r6, #16]
 80092e0:	3202      	adds	r2, #2
 80092e2:	4605      	mov	r5, r0
 80092e4:	0092      	lsls	r2, r2, #2
 80092e6:	f106 010c 	add.w	r1, r6, #12
 80092ea:	300c      	adds	r0, #12
 80092ec:	f000 faf0 	bl	80098d0 <memcpy>
 80092f0:	2201      	movs	r2, #1
 80092f2:	4629      	mov	r1, r5
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fcb7 	bl	8009c68 <__lshift>
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	f8cd b014 	str.w	fp, [sp, #20]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	46b1      	mov	r9, r6
 8009306:	9307      	str	r3, [sp, #28]
 8009308:	4606      	mov	r6, r0
 800930a:	4639      	mov	r1, r7
 800930c:	9804      	ldr	r0, [sp, #16]
 800930e:	f7ff faa7 	bl	8008860 <quorem>
 8009312:	4649      	mov	r1, r9
 8009314:	4605      	mov	r5, r0
 8009316:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800931a:	9804      	ldr	r0, [sp, #16]
 800931c:	f000 fcf8 	bl	8009d10 <__mcmp>
 8009320:	4632      	mov	r2, r6
 8009322:	9000      	str	r0, [sp, #0]
 8009324:	4639      	mov	r1, r7
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fd0c 	bl	8009d44 <__mdiff>
 800932c:	68c3      	ldr	r3, [r0, #12]
 800932e:	4602      	mov	r2, r0
 8009330:	bb03      	cbnz	r3, 8009374 <_dtoa_r+0x9fc>
 8009332:	4601      	mov	r1, r0
 8009334:	9008      	str	r0, [sp, #32]
 8009336:	9804      	ldr	r0, [sp, #16]
 8009338:	f000 fcea 	bl	8009d10 <__mcmp>
 800933c:	9a08      	ldr	r2, [sp, #32]
 800933e:	4603      	mov	r3, r0
 8009340:	4611      	mov	r1, r2
 8009342:	4620      	mov	r0, r4
 8009344:	9308      	str	r3, [sp, #32]
 8009346:	f000 fb02 	bl	800994e <_Bfree>
 800934a:	9b08      	ldr	r3, [sp, #32]
 800934c:	b9a3      	cbnz	r3, 8009378 <_dtoa_r+0xa00>
 800934e:	9a06      	ldr	r2, [sp, #24]
 8009350:	b992      	cbnz	r2, 8009378 <_dtoa_r+0xa00>
 8009352:	9a07      	ldr	r2, [sp, #28]
 8009354:	b982      	cbnz	r2, 8009378 <_dtoa_r+0xa00>
 8009356:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800935a:	d029      	beq.n	80093b0 <_dtoa_r+0xa38>
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd01      	ble.n	8009366 <_dtoa_r+0x9ee>
 8009362:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009366:	9b05      	ldr	r3, [sp, #20]
 8009368:	1c5d      	adds	r5, r3, #1
 800936a:	f883 8000 	strb.w	r8, [r3]
 800936e:	e782      	b.n	8009276 <_dtoa_r+0x8fe>
 8009370:	4630      	mov	r0, r6
 8009372:	e7c2      	b.n	80092fa <_dtoa_r+0x982>
 8009374:	2301      	movs	r3, #1
 8009376:	e7e3      	b.n	8009340 <_dtoa_r+0x9c8>
 8009378:	9a00      	ldr	r2, [sp, #0]
 800937a:	2a00      	cmp	r2, #0
 800937c:	db04      	blt.n	8009388 <_dtoa_r+0xa10>
 800937e:	d125      	bne.n	80093cc <_dtoa_r+0xa54>
 8009380:	9a06      	ldr	r2, [sp, #24]
 8009382:	bb1a      	cbnz	r2, 80093cc <_dtoa_r+0xa54>
 8009384:	9a07      	ldr	r2, [sp, #28]
 8009386:	bb0a      	cbnz	r2, 80093cc <_dtoa_r+0xa54>
 8009388:	2b00      	cmp	r3, #0
 800938a:	ddec      	ble.n	8009366 <_dtoa_r+0x9ee>
 800938c:	2201      	movs	r2, #1
 800938e:	9904      	ldr	r1, [sp, #16]
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fc69 	bl	8009c68 <__lshift>
 8009396:	4639      	mov	r1, r7
 8009398:	9004      	str	r0, [sp, #16]
 800939a:	f000 fcb9 	bl	8009d10 <__mcmp>
 800939e:	2800      	cmp	r0, #0
 80093a0:	dc03      	bgt.n	80093aa <_dtoa_r+0xa32>
 80093a2:	d1e0      	bne.n	8009366 <_dtoa_r+0x9ee>
 80093a4:	f018 0f01 	tst.w	r8, #1
 80093a8:	d0dd      	beq.n	8009366 <_dtoa_r+0x9ee>
 80093aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093ae:	d1d8      	bne.n	8009362 <_dtoa_r+0x9ea>
 80093b0:	9b05      	ldr	r3, [sp, #20]
 80093b2:	9a05      	ldr	r2, [sp, #20]
 80093b4:	1c5d      	adds	r5, r3, #1
 80093b6:	2339      	movs	r3, #57	; 0x39
 80093b8:	7013      	strb	r3, [r2, #0]
 80093ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093be:	2b39      	cmp	r3, #57	; 0x39
 80093c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80093c4:	d04f      	beq.n	8009466 <_dtoa_r+0xaee>
 80093c6:	3301      	adds	r3, #1
 80093c8:	7013      	strb	r3, [r2, #0]
 80093ca:	e754      	b.n	8009276 <_dtoa_r+0x8fe>
 80093cc:	9a05      	ldr	r2, [sp, #20]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f102 0501 	add.w	r5, r2, #1
 80093d4:	dd06      	ble.n	80093e4 <_dtoa_r+0xa6c>
 80093d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093da:	d0e9      	beq.n	80093b0 <_dtoa_r+0xa38>
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	9b05      	ldr	r3, [sp, #20]
 80093e2:	e7c2      	b.n	800936a <_dtoa_r+0x9f2>
 80093e4:	9a02      	ldr	r2, [sp, #8]
 80093e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80093ea:	eba5 030b 	sub.w	r3, r5, fp
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d021      	beq.n	8009436 <_dtoa_r+0xabe>
 80093f2:	2300      	movs	r3, #0
 80093f4:	220a      	movs	r2, #10
 80093f6:	9904      	ldr	r1, [sp, #16]
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fabf 	bl	800997c <__multadd>
 80093fe:	45b1      	cmp	r9, r6
 8009400:	9004      	str	r0, [sp, #16]
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	f04f 020a 	mov.w	r2, #10
 800940a:	4649      	mov	r1, r9
 800940c:	4620      	mov	r0, r4
 800940e:	d105      	bne.n	800941c <_dtoa_r+0xaa4>
 8009410:	f000 fab4 	bl	800997c <__multadd>
 8009414:	4681      	mov	r9, r0
 8009416:	4606      	mov	r6, r0
 8009418:	9505      	str	r5, [sp, #20]
 800941a:	e776      	b.n	800930a <_dtoa_r+0x992>
 800941c:	f000 faae 	bl	800997c <__multadd>
 8009420:	4631      	mov	r1, r6
 8009422:	4681      	mov	r9, r0
 8009424:	2300      	movs	r3, #0
 8009426:	220a      	movs	r2, #10
 8009428:	4620      	mov	r0, r4
 800942a:	f000 faa7 	bl	800997c <__multadd>
 800942e:	4606      	mov	r6, r0
 8009430:	e7f2      	b.n	8009418 <_dtoa_r+0xaa0>
 8009432:	f04f 0900 	mov.w	r9, #0
 8009436:	2201      	movs	r2, #1
 8009438:	9904      	ldr	r1, [sp, #16]
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fc14 	bl	8009c68 <__lshift>
 8009440:	4639      	mov	r1, r7
 8009442:	9004      	str	r0, [sp, #16]
 8009444:	f000 fc64 	bl	8009d10 <__mcmp>
 8009448:	2800      	cmp	r0, #0
 800944a:	dcb6      	bgt.n	80093ba <_dtoa_r+0xa42>
 800944c:	d102      	bne.n	8009454 <_dtoa_r+0xadc>
 800944e:	f018 0f01 	tst.w	r8, #1
 8009452:	d1b2      	bne.n	80093ba <_dtoa_r+0xa42>
 8009454:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009458:	2b30      	cmp	r3, #48	; 0x30
 800945a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800945e:	f47f af0a 	bne.w	8009276 <_dtoa_r+0x8fe>
 8009462:	4615      	mov	r5, r2
 8009464:	e7f6      	b.n	8009454 <_dtoa_r+0xadc>
 8009466:	4593      	cmp	fp, r2
 8009468:	d105      	bne.n	8009476 <_dtoa_r+0xafe>
 800946a:	2331      	movs	r3, #49	; 0x31
 800946c:	f10a 0a01 	add.w	sl, sl, #1
 8009470:	f88b 3000 	strb.w	r3, [fp]
 8009474:	e6ff      	b.n	8009276 <_dtoa_r+0x8fe>
 8009476:	4615      	mov	r5, r2
 8009478:	e79f      	b.n	80093ba <_dtoa_r+0xa42>
 800947a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80094e0 <_dtoa_r+0xb68>
 800947e:	e007      	b.n	8009490 <_dtoa_r+0xb18>
 8009480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009482:	f8df b060 	ldr.w	fp, [pc, #96]	; 80094e4 <_dtoa_r+0xb6c>
 8009486:	b11b      	cbz	r3, 8009490 <_dtoa_r+0xb18>
 8009488:	f10b 0308 	add.w	r3, fp, #8
 800948c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	4658      	mov	r0, fp
 8009492:	b017      	add	sp, #92	; 0x5c
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	9b06      	ldr	r3, [sp, #24]
 800949a:	2b01      	cmp	r3, #1
 800949c:	f77f ae35 	ble.w	800910a <_dtoa_r+0x792>
 80094a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a2:	9307      	str	r3, [sp, #28]
 80094a4:	e649      	b.n	800913a <_dtoa_r+0x7c2>
 80094a6:	9b02      	ldr	r3, [sp, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc03      	bgt.n	80094b4 <_dtoa_r+0xb3c>
 80094ac:	9b06      	ldr	r3, [sp, #24]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	f73f aecc 	bgt.w	800924c <_dtoa_r+0x8d4>
 80094b4:	465d      	mov	r5, fp
 80094b6:	4639      	mov	r1, r7
 80094b8:	9804      	ldr	r0, [sp, #16]
 80094ba:	f7ff f9d1 	bl	8008860 <quorem>
 80094be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80094c2:	f805 8b01 	strb.w	r8, [r5], #1
 80094c6:	9a02      	ldr	r2, [sp, #8]
 80094c8:	eba5 030b 	sub.w	r3, r5, fp
 80094cc:	429a      	cmp	r2, r3
 80094ce:	ddb0      	ble.n	8009432 <_dtoa_r+0xaba>
 80094d0:	2300      	movs	r3, #0
 80094d2:	220a      	movs	r2, #10
 80094d4:	9904      	ldr	r1, [sp, #16]
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fa50 	bl	800997c <__multadd>
 80094dc:	9004      	str	r0, [sp, #16]
 80094de:	e7ea      	b.n	80094b6 <_dtoa_r+0xb3e>
 80094e0:	0800b894 	.word	0x0800b894
 80094e4:	0800b8b8 	.word	0x0800b8b8

080094e8 <__sflush_r>:
 80094e8:	898a      	ldrh	r2, [r1, #12]
 80094ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	0710      	lsls	r0, r2, #28
 80094f2:	460c      	mov	r4, r1
 80094f4:	d458      	bmi.n	80095a8 <__sflush_r+0xc0>
 80094f6:	684b      	ldr	r3, [r1, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dc05      	bgt.n	8009508 <__sflush_r+0x20>
 80094fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dc02      	bgt.n	8009508 <__sflush_r+0x20>
 8009502:	2000      	movs	r0, #0
 8009504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800950a:	2e00      	cmp	r6, #0
 800950c:	d0f9      	beq.n	8009502 <__sflush_r+0x1a>
 800950e:	2300      	movs	r3, #0
 8009510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009514:	682f      	ldr	r7, [r5, #0]
 8009516:	6a21      	ldr	r1, [r4, #32]
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	d032      	beq.n	8009582 <__sflush_r+0x9a>
 800951c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	075a      	lsls	r2, r3, #29
 8009522:	d505      	bpl.n	8009530 <__sflush_r+0x48>
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	1ac0      	subs	r0, r0, r3
 8009528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800952a:	b10b      	cbz	r3, 8009530 <__sflush_r+0x48>
 800952c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800952e:	1ac0      	subs	r0, r0, r3
 8009530:	2300      	movs	r3, #0
 8009532:	4602      	mov	r2, r0
 8009534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009536:	6a21      	ldr	r1, [r4, #32]
 8009538:	4628      	mov	r0, r5
 800953a:	47b0      	blx	r6
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	d106      	bne.n	8009550 <__sflush_r+0x68>
 8009542:	6829      	ldr	r1, [r5, #0]
 8009544:	291d      	cmp	r1, #29
 8009546:	d848      	bhi.n	80095da <__sflush_r+0xf2>
 8009548:	4a29      	ldr	r2, [pc, #164]	; (80095f0 <__sflush_r+0x108>)
 800954a:	40ca      	lsrs	r2, r1
 800954c:	07d6      	lsls	r6, r2, #31
 800954e:	d544      	bpl.n	80095da <__sflush_r+0xf2>
 8009550:	2200      	movs	r2, #0
 8009552:	6062      	str	r2, [r4, #4]
 8009554:	04d9      	lsls	r1, r3, #19
 8009556:	6922      	ldr	r2, [r4, #16]
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	d504      	bpl.n	8009566 <__sflush_r+0x7e>
 800955c:	1c42      	adds	r2, r0, #1
 800955e:	d101      	bne.n	8009564 <__sflush_r+0x7c>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b903      	cbnz	r3, 8009566 <__sflush_r+0x7e>
 8009564:	6560      	str	r0, [r4, #84]	; 0x54
 8009566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009568:	602f      	str	r7, [r5, #0]
 800956a:	2900      	cmp	r1, #0
 800956c:	d0c9      	beq.n	8009502 <__sflush_r+0x1a>
 800956e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009572:	4299      	cmp	r1, r3
 8009574:	d002      	beq.n	800957c <__sflush_r+0x94>
 8009576:	4628      	mov	r0, r5
 8009578:	f000 fc9e 	bl	8009eb8 <_free_r>
 800957c:	2000      	movs	r0, #0
 800957e:	6360      	str	r0, [r4, #52]	; 0x34
 8009580:	e7c0      	b.n	8009504 <__sflush_r+0x1c>
 8009582:	2301      	movs	r3, #1
 8009584:	4628      	mov	r0, r5
 8009586:	47b0      	blx	r6
 8009588:	1c41      	adds	r1, r0, #1
 800958a:	d1c8      	bne.n	800951e <__sflush_r+0x36>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0c5      	beq.n	800951e <__sflush_r+0x36>
 8009592:	2b1d      	cmp	r3, #29
 8009594:	d001      	beq.n	800959a <__sflush_r+0xb2>
 8009596:	2b16      	cmp	r3, #22
 8009598:	d101      	bne.n	800959e <__sflush_r+0xb6>
 800959a:	602f      	str	r7, [r5, #0]
 800959c:	e7b1      	b.n	8009502 <__sflush_r+0x1a>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	e7ad      	b.n	8009504 <__sflush_r+0x1c>
 80095a8:	690f      	ldr	r7, [r1, #16]
 80095aa:	2f00      	cmp	r7, #0
 80095ac:	d0a9      	beq.n	8009502 <__sflush_r+0x1a>
 80095ae:	0793      	lsls	r3, r2, #30
 80095b0:	680e      	ldr	r6, [r1, #0]
 80095b2:	bf08      	it	eq
 80095b4:	694b      	ldreq	r3, [r1, #20]
 80095b6:	600f      	str	r7, [r1, #0]
 80095b8:	bf18      	it	ne
 80095ba:	2300      	movne	r3, #0
 80095bc:	eba6 0807 	sub.w	r8, r6, r7
 80095c0:	608b      	str	r3, [r1, #8]
 80095c2:	f1b8 0f00 	cmp.w	r8, #0
 80095c6:	dd9c      	ble.n	8009502 <__sflush_r+0x1a>
 80095c8:	4643      	mov	r3, r8
 80095ca:	463a      	mov	r2, r7
 80095cc:	6a21      	ldr	r1, [r4, #32]
 80095ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b0      	blx	r6
 80095d4:	2800      	cmp	r0, #0
 80095d6:	dc06      	bgt.n	80095e6 <__sflush_r+0xfe>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e4:	e78e      	b.n	8009504 <__sflush_r+0x1c>
 80095e6:	4407      	add	r7, r0
 80095e8:	eba8 0800 	sub.w	r8, r8, r0
 80095ec:	e7e9      	b.n	80095c2 <__sflush_r+0xda>
 80095ee:	bf00      	nop
 80095f0:	20400001 	.word	0x20400001

080095f4 <_fflush_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	690b      	ldr	r3, [r1, #16]
 80095f8:	4605      	mov	r5, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	b1db      	cbz	r3, 8009636 <_fflush_r+0x42>
 80095fe:	b118      	cbz	r0, 8009608 <_fflush_r+0x14>
 8009600:	6983      	ldr	r3, [r0, #24]
 8009602:	b90b      	cbnz	r3, 8009608 <_fflush_r+0x14>
 8009604:	f000 f860 	bl	80096c8 <__sinit>
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <_fflush_r+0x48>)
 800960a:	429c      	cmp	r4, r3
 800960c:	d109      	bne.n	8009622 <_fflush_r+0x2e>
 800960e:	686c      	ldr	r4, [r5, #4]
 8009610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009614:	b17b      	cbz	r3, 8009636 <_fflush_r+0x42>
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800961e:	f7ff bf63 	b.w	80094e8 <__sflush_r>
 8009622:	4b07      	ldr	r3, [pc, #28]	; (8009640 <_fflush_r+0x4c>)
 8009624:	429c      	cmp	r4, r3
 8009626:	d101      	bne.n	800962c <_fflush_r+0x38>
 8009628:	68ac      	ldr	r4, [r5, #8]
 800962a:	e7f1      	b.n	8009610 <_fflush_r+0x1c>
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <_fflush_r+0x50>)
 800962e:	429c      	cmp	r4, r3
 8009630:	bf08      	it	eq
 8009632:	68ec      	ldreq	r4, [r5, #12]
 8009634:	e7ec      	b.n	8009610 <_fflush_r+0x1c>
 8009636:	2000      	movs	r0, #0
 8009638:	bd38      	pop	{r3, r4, r5, pc}
 800963a:	bf00      	nop
 800963c:	0800b8e8 	.word	0x0800b8e8
 8009640:	0800b908 	.word	0x0800b908
 8009644:	0800b8c8 	.word	0x0800b8c8

08009648 <std>:
 8009648:	2300      	movs	r3, #0
 800964a:	b510      	push	{r4, lr}
 800964c:	4604      	mov	r4, r0
 800964e:	e9c0 3300 	strd	r3, r3, [r0]
 8009652:	6083      	str	r3, [r0, #8]
 8009654:	8181      	strh	r1, [r0, #12]
 8009656:	6643      	str	r3, [r0, #100]	; 0x64
 8009658:	81c2      	strh	r2, [r0, #14]
 800965a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800965e:	6183      	str	r3, [r0, #24]
 8009660:	4619      	mov	r1, r3
 8009662:	2208      	movs	r2, #8
 8009664:	305c      	adds	r0, #92	; 0x5c
 8009666:	f7fe fb33 	bl	8007cd0 <memset>
 800966a:	4b05      	ldr	r3, [pc, #20]	; (8009680 <std+0x38>)
 800966c:	6263      	str	r3, [r4, #36]	; 0x24
 800966e:	4b05      	ldr	r3, [pc, #20]	; (8009684 <std+0x3c>)
 8009670:	62a3      	str	r3, [r4, #40]	; 0x28
 8009672:	4b05      	ldr	r3, [pc, #20]	; (8009688 <std+0x40>)
 8009674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <std+0x44>)
 8009678:	6224      	str	r4, [r4, #32]
 800967a:	6323      	str	r3, [r4, #48]	; 0x30
 800967c:	bd10      	pop	{r4, pc}
 800967e:	bf00      	nop
 8009680:	0800a54d 	.word	0x0800a54d
 8009684:	0800a56f 	.word	0x0800a56f
 8009688:	0800a5a7 	.word	0x0800a5a7
 800968c:	0800a5cb 	.word	0x0800a5cb

08009690 <_cleanup_r>:
 8009690:	4901      	ldr	r1, [pc, #4]	; (8009698 <_cleanup_r+0x8>)
 8009692:	f000 b885 	b.w	80097a0 <_fwalk_reent>
 8009696:	bf00      	nop
 8009698:	080095f5 	.word	0x080095f5

0800969c <__sfmoreglue>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	1e4a      	subs	r2, r1, #1
 80096a0:	2568      	movs	r5, #104	; 0x68
 80096a2:	4355      	muls	r5, r2
 80096a4:	460e      	mov	r6, r1
 80096a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096aa:	f000 fc53 	bl	8009f54 <_malloc_r>
 80096ae:	4604      	mov	r4, r0
 80096b0:	b140      	cbz	r0, 80096c4 <__sfmoreglue+0x28>
 80096b2:	2100      	movs	r1, #0
 80096b4:	e9c0 1600 	strd	r1, r6, [r0]
 80096b8:	300c      	adds	r0, #12
 80096ba:	60a0      	str	r0, [r4, #8]
 80096bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096c0:	f7fe fb06 	bl	8007cd0 <memset>
 80096c4:	4620      	mov	r0, r4
 80096c6:	bd70      	pop	{r4, r5, r6, pc}

080096c8 <__sinit>:
 80096c8:	6983      	ldr	r3, [r0, #24]
 80096ca:	b510      	push	{r4, lr}
 80096cc:	4604      	mov	r4, r0
 80096ce:	bb33      	cbnz	r3, 800971e <__sinit+0x56>
 80096d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80096d4:	6503      	str	r3, [r0, #80]	; 0x50
 80096d6:	4b12      	ldr	r3, [pc, #72]	; (8009720 <__sinit+0x58>)
 80096d8:	4a12      	ldr	r2, [pc, #72]	; (8009724 <__sinit+0x5c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6282      	str	r2, [r0, #40]	; 0x28
 80096de:	4298      	cmp	r0, r3
 80096e0:	bf04      	itt	eq
 80096e2:	2301      	moveq	r3, #1
 80096e4:	6183      	streq	r3, [r0, #24]
 80096e6:	f000 f81f 	bl	8009728 <__sfp>
 80096ea:	6060      	str	r0, [r4, #4]
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 f81b 	bl	8009728 <__sfp>
 80096f2:	60a0      	str	r0, [r4, #8]
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f817 	bl	8009728 <__sfp>
 80096fa:	2200      	movs	r2, #0
 80096fc:	60e0      	str	r0, [r4, #12]
 80096fe:	2104      	movs	r1, #4
 8009700:	6860      	ldr	r0, [r4, #4]
 8009702:	f7ff ffa1 	bl	8009648 <std>
 8009706:	2201      	movs	r2, #1
 8009708:	2109      	movs	r1, #9
 800970a:	68a0      	ldr	r0, [r4, #8]
 800970c:	f7ff ff9c 	bl	8009648 <std>
 8009710:	2202      	movs	r2, #2
 8009712:	2112      	movs	r1, #18
 8009714:	68e0      	ldr	r0, [r4, #12]
 8009716:	f7ff ff97 	bl	8009648 <std>
 800971a:	2301      	movs	r3, #1
 800971c:	61a3      	str	r3, [r4, #24]
 800971e:	bd10      	pop	{r4, pc}
 8009720:	0800b880 	.word	0x0800b880
 8009724:	08009691 	.word	0x08009691

08009728 <__sfp>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	4b1b      	ldr	r3, [pc, #108]	; (8009798 <__sfp+0x70>)
 800972c:	681e      	ldr	r6, [r3, #0]
 800972e:	69b3      	ldr	r3, [r6, #24]
 8009730:	4607      	mov	r7, r0
 8009732:	b913      	cbnz	r3, 800973a <__sfp+0x12>
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff ffc7 	bl	80096c8 <__sinit>
 800973a:	3648      	adds	r6, #72	; 0x48
 800973c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009740:	3b01      	subs	r3, #1
 8009742:	d503      	bpl.n	800974c <__sfp+0x24>
 8009744:	6833      	ldr	r3, [r6, #0]
 8009746:	b133      	cbz	r3, 8009756 <__sfp+0x2e>
 8009748:	6836      	ldr	r6, [r6, #0]
 800974a:	e7f7      	b.n	800973c <__sfp+0x14>
 800974c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009750:	b16d      	cbz	r5, 800976e <__sfp+0x46>
 8009752:	3468      	adds	r4, #104	; 0x68
 8009754:	e7f4      	b.n	8009740 <__sfp+0x18>
 8009756:	2104      	movs	r1, #4
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ff9f 	bl	800969c <__sfmoreglue>
 800975e:	6030      	str	r0, [r6, #0]
 8009760:	2800      	cmp	r0, #0
 8009762:	d1f1      	bne.n	8009748 <__sfp+0x20>
 8009764:	230c      	movs	r3, #12
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	4604      	mov	r4, r0
 800976a:	4620      	mov	r0, r4
 800976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800976e:	4b0b      	ldr	r3, [pc, #44]	; (800979c <__sfp+0x74>)
 8009770:	6665      	str	r5, [r4, #100]	; 0x64
 8009772:	e9c4 5500 	strd	r5, r5, [r4]
 8009776:	60a5      	str	r5, [r4, #8]
 8009778:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800977c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009780:	2208      	movs	r2, #8
 8009782:	4629      	mov	r1, r5
 8009784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009788:	f7fe faa2 	bl	8007cd0 <memset>
 800978c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009794:	e7e9      	b.n	800976a <__sfp+0x42>
 8009796:	bf00      	nop
 8009798:	0800b880 	.word	0x0800b880
 800979c:	ffff0001 	.word	0xffff0001

080097a0 <_fwalk_reent>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4680      	mov	r8, r0
 80097a6:	4689      	mov	r9, r1
 80097a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097ac:	2600      	movs	r6, #0
 80097ae:	b914      	cbnz	r4, 80097b6 <_fwalk_reent+0x16>
 80097b0:	4630      	mov	r0, r6
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80097ba:	3f01      	subs	r7, #1
 80097bc:	d501      	bpl.n	80097c2 <_fwalk_reent+0x22>
 80097be:	6824      	ldr	r4, [r4, #0]
 80097c0:	e7f5      	b.n	80097ae <_fwalk_reent+0xe>
 80097c2:	89ab      	ldrh	r3, [r5, #12]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d907      	bls.n	80097d8 <_fwalk_reent+0x38>
 80097c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097cc:	3301      	adds	r3, #1
 80097ce:	d003      	beq.n	80097d8 <_fwalk_reent+0x38>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4640      	mov	r0, r8
 80097d4:	47c8      	blx	r9
 80097d6:	4306      	orrs	r6, r0
 80097d8:	3568      	adds	r5, #104	; 0x68
 80097da:	e7ee      	b.n	80097ba <_fwalk_reent+0x1a>

080097dc <_localeconv_r>:
 80097dc:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <_localeconv_r+0x14>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6a18      	ldr	r0, [r3, #32]
 80097e2:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <_localeconv_r+0x18>)
 80097e4:	2800      	cmp	r0, #0
 80097e6:	bf08      	it	eq
 80097e8:	4618      	moveq	r0, r3
 80097ea:	30f0      	adds	r0, #240	; 0xf0
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	200007e0 	.word	0x200007e0
 80097f4:	20000844 	.word	0x20000844

080097f8 <__swhatbuf_r>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	460e      	mov	r6, r1
 80097fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009800:	2900      	cmp	r1, #0
 8009802:	b096      	sub	sp, #88	; 0x58
 8009804:	4614      	mov	r4, r2
 8009806:	461d      	mov	r5, r3
 8009808:	da07      	bge.n	800981a <__swhatbuf_r+0x22>
 800980a:	2300      	movs	r3, #0
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	89b3      	ldrh	r3, [r6, #12]
 8009810:	061a      	lsls	r2, r3, #24
 8009812:	d410      	bmi.n	8009836 <__swhatbuf_r+0x3e>
 8009814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009818:	e00e      	b.n	8009838 <__swhatbuf_r+0x40>
 800981a:	466a      	mov	r2, sp
 800981c:	f000 fefc 	bl	800a618 <_fstat_r>
 8009820:	2800      	cmp	r0, #0
 8009822:	dbf2      	blt.n	800980a <__swhatbuf_r+0x12>
 8009824:	9a01      	ldr	r2, [sp, #4]
 8009826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800982a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800982e:	425a      	negs	r2, r3
 8009830:	415a      	adcs	r2, r3
 8009832:	602a      	str	r2, [r5, #0]
 8009834:	e7ee      	b.n	8009814 <__swhatbuf_r+0x1c>
 8009836:	2340      	movs	r3, #64	; 0x40
 8009838:	2000      	movs	r0, #0
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	b016      	add	sp, #88	; 0x58
 800983e:	bd70      	pop	{r4, r5, r6, pc}

08009840 <__smakebuf_r>:
 8009840:	898b      	ldrh	r3, [r1, #12]
 8009842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009844:	079d      	lsls	r5, r3, #30
 8009846:	4606      	mov	r6, r0
 8009848:	460c      	mov	r4, r1
 800984a:	d507      	bpl.n	800985c <__smakebuf_r+0x1c>
 800984c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	2301      	movs	r3, #1
 8009856:	6163      	str	r3, [r4, #20]
 8009858:	b002      	add	sp, #8
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	ab01      	add	r3, sp, #4
 800985e:	466a      	mov	r2, sp
 8009860:	f7ff ffca 	bl	80097f8 <__swhatbuf_r>
 8009864:	9900      	ldr	r1, [sp, #0]
 8009866:	4605      	mov	r5, r0
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fb73 	bl	8009f54 <_malloc_r>
 800986e:	b948      	cbnz	r0, 8009884 <__smakebuf_r+0x44>
 8009870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009874:	059a      	lsls	r2, r3, #22
 8009876:	d4ef      	bmi.n	8009858 <__smakebuf_r+0x18>
 8009878:	f023 0303 	bic.w	r3, r3, #3
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	e7e3      	b.n	800984c <__smakebuf_r+0xc>
 8009884:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <__smakebuf_r+0x7c>)
 8009886:	62b3      	str	r3, [r6, #40]	; 0x28
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	6020      	str	r0, [r4, #0]
 800988c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	6163      	str	r3, [r4, #20]
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	6120      	str	r0, [r4, #16]
 800989a:	b15b      	cbz	r3, 80098b4 <__smakebuf_r+0x74>
 800989c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 fecb 	bl	800a63c <_isatty_r>
 80098a6:	b128      	cbz	r0, 80098b4 <__smakebuf_r+0x74>
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	431d      	orrs	r5, r3
 80098b8:	81a5      	strh	r5, [r4, #12]
 80098ba:	e7cd      	b.n	8009858 <__smakebuf_r+0x18>
 80098bc:	08009691 	.word	0x08009691

080098c0 <malloc>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <malloc+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f000 bb45 	b.w	8009f54 <_malloc_r>
 80098ca:	bf00      	nop
 80098cc:	200007e0 	.word	0x200007e0

080098d0 <memcpy>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	1e43      	subs	r3, r0, #1
 80098d4:	440a      	add	r2, r1
 80098d6:	4291      	cmp	r1, r2
 80098d8:	d100      	bne.n	80098dc <memcpy+0xc>
 80098da:	bd10      	pop	{r4, pc}
 80098dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e4:	e7f7      	b.n	80098d6 <memcpy+0x6>

080098e6 <_Balloc>:
 80098e6:	b570      	push	{r4, r5, r6, lr}
 80098e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098ea:	4604      	mov	r4, r0
 80098ec:	460e      	mov	r6, r1
 80098ee:	b93d      	cbnz	r5, 8009900 <_Balloc+0x1a>
 80098f0:	2010      	movs	r0, #16
 80098f2:	f7ff ffe5 	bl	80098c0 <malloc>
 80098f6:	6260      	str	r0, [r4, #36]	; 0x24
 80098f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098fc:	6005      	str	r5, [r0, #0]
 80098fe:	60c5      	str	r5, [r0, #12]
 8009900:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009902:	68eb      	ldr	r3, [r5, #12]
 8009904:	b183      	cbz	r3, 8009928 <_Balloc+0x42>
 8009906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800990e:	b9b8      	cbnz	r0, 8009940 <_Balloc+0x5a>
 8009910:	2101      	movs	r1, #1
 8009912:	fa01 f506 	lsl.w	r5, r1, r6
 8009916:	1d6a      	adds	r2, r5, #5
 8009918:	0092      	lsls	r2, r2, #2
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fabe 	bl	8009e9c <_calloc_r>
 8009920:	b160      	cbz	r0, 800993c <_Balloc+0x56>
 8009922:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009926:	e00e      	b.n	8009946 <_Balloc+0x60>
 8009928:	2221      	movs	r2, #33	; 0x21
 800992a:	2104      	movs	r1, #4
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fab5 	bl	8009e9c <_calloc_r>
 8009932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009934:	60e8      	str	r0, [r5, #12]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e4      	bne.n	8009906 <_Balloc+0x20>
 800993c:	2000      	movs	r0, #0
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	6802      	ldr	r2, [r0, #0]
 8009942:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009946:	2300      	movs	r3, #0
 8009948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800994c:	e7f7      	b.n	800993e <_Balloc+0x58>

0800994e <_Bfree>:
 800994e:	b570      	push	{r4, r5, r6, lr}
 8009950:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009952:	4606      	mov	r6, r0
 8009954:	460d      	mov	r5, r1
 8009956:	b93c      	cbnz	r4, 8009968 <_Bfree+0x1a>
 8009958:	2010      	movs	r0, #16
 800995a:	f7ff ffb1 	bl	80098c0 <malloc>
 800995e:	6270      	str	r0, [r6, #36]	; 0x24
 8009960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009964:	6004      	str	r4, [r0, #0]
 8009966:	60c4      	str	r4, [r0, #12]
 8009968:	b13d      	cbz	r5, 800997a <_Bfree+0x2c>
 800996a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800996c:	686a      	ldr	r2, [r5, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009974:	6029      	str	r1, [r5, #0]
 8009976:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800997a:	bd70      	pop	{r4, r5, r6, pc}

0800997c <__multadd>:
 800997c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009980:	690d      	ldr	r5, [r1, #16]
 8009982:	461f      	mov	r7, r3
 8009984:	4606      	mov	r6, r0
 8009986:	460c      	mov	r4, r1
 8009988:	f101 0c14 	add.w	ip, r1, #20
 800998c:	2300      	movs	r3, #0
 800998e:	f8dc 0000 	ldr.w	r0, [ip]
 8009992:	b281      	uxth	r1, r0
 8009994:	fb02 7101 	mla	r1, r2, r1, r7
 8009998:	0c0f      	lsrs	r7, r1, #16
 800999a:	0c00      	lsrs	r0, r0, #16
 800999c:	fb02 7000 	mla	r0, r2, r0, r7
 80099a0:	b289      	uxth	r1, r1
 80099a2:	3301      	adds	r3, #1
 80099a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80099a8:	429d      	cmp	r5, r3
 80099aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80099ae:	f84c 1b04 	str.w	r1, [ip], #4
 80099b2:	dcec      	bgt.n	800998e <__multadd+0x12>
 80099b4:	b1d7      	cbz	r7, 80099ec <__multadd+0x70>
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	42ab      	cmp	r3, r5
 80099ba:	dc12      	bgt.n	80099e2 <__multadd+0x66>
 80099bc:	6861      	ldr	r1, [r4, #4]
 80099be:	4630      	mov	r0, r6
 80099c0:	3101      	adds	r1, #1
 80099c2:	f7ff ff90 	bl	80098e6 <_Balloc>
 80099c6:	6922      	ldr	r2, [r4, #16]
 80099c8:	3202      	adds	r2, #2
 80099ca:	f104 010c 	add.w	r1, r4, #12
 80099ce:	4680      	mov	r8, r0
 80099d0:	0092      	lsls	r2, r2, #2
 80099d2:	300c      	adds	r0, #12
 80099d4:	f7ff ff7c 	bl	80098d0 <memcpy>
 80099d8:	4621      	mov	r1, r4
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff ffb7 	bl	800994e <_Bfree>
 80099e0:	4644      	mov	r4, r8
 80099e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099e6:	3501      	adds	r5, #1
 80099e8:	615f      	str	r7, [r3, #20]
 80099ea:	6125      	str	r5, [r4, #16]
 80099ec:	4620      	mov	r0, r4
 80099ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080099f2 <__hi0bits>:
 80099f2:	0c02      	lsrs	r2, r0, #16
 80099f4:	0412      	lsls	r2, r2, #16
 80099f6:	4603      	mov	r3, r0
 80099f8:	b9b2      	cbnz	r2, 8009a28 <__hi0bits+0x36>
 80099fa:	0403      	lsls	r3, r0, #16
 80099fc:	2010      	movs	r0, #16
 80099fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a02:	bf04      	itt	eq
 8009a04:	021b      	lsleq	r3, r3, #8
 8009a06:	3008      	addeq	r0, #8
 8009a08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a0c:	bf04      	itt	eq
 8009a0e:	011b      	lsleq	r3, r3, #4
 8009a10:	3004      	addeq	r0, #4
 8009a12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a16:	bf04      	itt	eq
 8009a18:	009b      	lsleq	r3, r3, #2
 8009a1a:	3002      	addeq	r0, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db06      	blt.n	8009a2e <__hi0bits+0x3c>
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	d503      	bpl.n	8009a2c <__hi0bits+0x3a>
 8009a24:	3001      	adds	r0, #1
 8009a26:	4770      	bx	lr
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e7e8      	b.n	80099fe <__hi0bits+0xc>
 8009a2c:	2020      	movs	r0, #32
 8009a2e:	4770      	bx	lr

08009a30 <__lo0bits>:
 8009a30:	6803      	ldr	r3, [r0, #0]
 8009a32:	f013 0207 	ands.w	r2, r3, #7
 8009a36:	4601      	mov	r1, r0
 8009a38:	d00b      	beq.n	8009a52 <__lo0bits+0x22>
 8009a3a:	07da      	lsls	r2, r3, #31
 8009a3c:	d423      	bmi.n	8009a86 <__lo0bits+0x56>
 8009a3e:	0798      	lsls	r0, r3, #30
 8009a40:	bf49      	itett	mi
 8009a42:	085b      	lsrmi	r3, r3, #1
 8009a44:	089b      	lsrpl	r3, r3, #2
 8009a46:	2001      	movmi	r0, #1
 8009a48:	600b      	strmi	r3, [r1, #0]
 8009a4a:	bf5c      	itt	pl
 8009a4c:	600b      	strpl	r3, [r1, #0]
 8009a4e:	2002      	movpl	r0, #2
 8009a50:	4770      	bx	lr
 8009a52:	b298      	uxth	r0, r3
 8009a54:	b9a8      	cbnz	r0, 8009a82 <__lo0bits+0x52>
 8009a56:	0c1b      	lsrs	r3, r3, #16
 8009a58:	2010      	movs	r0, #16
 8009a5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a5e:	bf04      	itt	eq
 8009a60:	0a1b      	lsreq	r3, r3, #8
 8009a62:	3008      	addeq	r0, #8
 8009a64:	071a      	lsls	r2, r3, #28
 8009a66:	bf04      	itt	eq
 8009a68:	091b      	lsreq	r3, r3, #4
 8009a6a:	3004      	addeq	r0, #4
 8009a6c:	079a      	lsls	r2, r3, #30
 8009a6e:	bf04      	itt	eq
 8009a70:	089b      	lsreq	r3, r3, #2
 8009a72:	3002      	addeq	r0, #2
 8009a74:	07da      	lsls	r2, r3, #31
 8009a76:	d402      	bmi.n	8009a7e <__lo0bits+0x4e>
 8009a78:	085b      	lsrs	r3, r3, #1
 8009a7a:	d006      	beq.n	8009a8a <__lo0bits+0x5a>
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	600b      	str	r3, [r1, #0]
 8009a80:	4770      	bx	lr
 8009a82:	4610      	mov	r0, r2
 8009a84:	e7e9      	b.n	8009a5a <__lo0bits+0x2a>
 8009a86:	2000      	movs	r0, #0
 8009a88:	4770      	bx	lr
 8009a8a:	2020      	movs	r0, #32
 8009a8c:	4770      	bx	lr

08009a8e <__i2b>:
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	2101      	movs	r1, #1
 8009a94:	f7ff ff27 	bl	80098e6 <_Balloc>
 8009a98:	2201      	movs	r2, #1
 8009a9a:	6144      	str	r4, [r0, #20]
 8009a9c:	6102      	str	r2, [r0, #16]
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <__multiply>:
 8009aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	690a      	ldr	r2, [r1, #16]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	bfb8      	it	lt
 8009aae:	460b      	movlt	r3, r1
 8009ab0:	4688      	mov	r8, r1
 8009ab2:	bfbc      	itt	lt
 8009ab4:	46a0      	movlt	r8, r4
 8009ab6:	461c      	movlt	r4, r3
 8009ab8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009abc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ac0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ac4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ac8:	eb07 0609 	add.w	r6, r7, r9
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	bfb8      	it	lt
 8009ad0:	3101      	addlt	r1, #1
 8009ad2:	f7ff ff08 	bl	80098e6 <_Balloc>
 8009ad6:	f100 0514 	add.w	r5, r0, #20
 8009ada:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009ade:	462b      	mov	r3, r5
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4573      	cmp	r3, lr
 8009ae4:	d316      	bcc.n	8009b14 <__multiply+0x74>
 8009ae6:	f104 0214 	add.w	r2, r4, #20
 8009aea:	f108 0114 	add.w	r1, r8, #20
 8009aee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009af2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	9201      	str	r2, [sp, #4]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d80c      	bhi.n	8009b1a <__multiply+0x7a>
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	dd03      	ble.n	8009b0c <__multiply+0x6c>
 8009b04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d05d      	beq.n	8009bc8 <__multiply+0x128>
 8009b0c:	6106      	str	r6, [r0, #16]
 8009b0e:	b003      	add	sp, #12
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	f843 2b04 	str.w	r2, [r3], #4
 8009b18:	e7e3      	b.n	8009ae2 <__multiply+0x42>
 8009b1a:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b1e:	f1bb 0f00 	cmp.w	fp, #0
 8009b22:	d023      	beq.n	8009b6c <__multiply+0xcc>
 8009b24:	4689      	mov	r9, r1
 8009b26:	46ac      	mov	ip, r5
 8009b28:	f04f 0800 	mov.w	r8, #0
 8009b2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b30:	f8dc a000 	ldr.w	sl, [ip]
 8009b34:	b2a3      	uxth	r3, r4
 8009b36:	fa1f fa8a 	uxth.w	sl, sl
 8009b3a:	fb0b a303 	mla	r3, fp, r3, sl
 8009b3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b42:	f8dc 4000 	ldr.w	r4, [ip]
 8009b46:	4443      	add	r3, r8
 8009b48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b4c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b54:	46e2      	mov	sl, ip
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b5c:	454f      	cmp	r7, r9
 8009b5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b62:	f84a 3b04 	str.w	r3, [sl], #4
 8009b66:	d82b      	bhi.n	8009bc0 <__multiply+0x120>
 8009b68:	f8cc 8004 	str.w	r8, [ip, #4]
 8009b6c:	9b01      	ldr	r3, [sp, #4]
 8009b6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009b72:	3204      	adds	r2, #4
 8009b74:	f1ba 0f00 	cmp.w	sl, #0
 8009b78:	d020      	beq.n	8009bbc <__multiply+0x11c>
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	46a8      	mov	r8, r5
 8009b80:	f04f 0b00 	mov.w	fp, #0
 8009b84:	f8b9 c000 	ldrh.w	ip, [r9]
 8009b88:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009b8c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009b90:	445c      	add	r4, fp
 8009b92:	46c4      	mov	ip, r8
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b9a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ba2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	fb0a b303 	mla	r3, sl, r3, fp
 8009bac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009bb0:	454f      	cmp	r7, r9
 8009bb2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009bb6:	d805      	bhi.n	8009bc4 <__multiply+0x124>
 8009bb8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009bbc:	3504      	adds	r5, #4
 8009bbe:	e79b      	b.n	8009af8 <__multiply+0x58>
 8009bc0:	46d4      	mov	ip, sl
 8009bc2:	e7b3      	b.n	8009b2c <__multiply+0x8c>
 8009bc4:	46e0      	mov	r8, ip
 8009bc6:	e7dd      	b.n	8009b84 <__multiply+0xe4>
 8009bc8:	3e01      	subs	r6, #1
 8009bca:	e799      	b.n	8009b00 <__multiply+0x60>

08009bcc <__pow5mult>:
 8009bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	4615      	mov	r5, r2
 8009bd2:	f012 0203 	ands.w	r2, r2, #3
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460f      	mov	r7, r1
 8009bda:	d007      	beq.n	8009bec <__pow5mult+0x20>
 8009bdc:	3a01      	subs	r2, #1
 8009bde:	4c21      	ldr	r4, [pc, #132]	; (8009c64 <__pow5mult+0x98>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009be6:	f7ff fec9 	bl	800997c <__multadd>
 8009bea:	4607      	mov	r7, r0
 8009bec:	10ad      	asrs	r5, r5, #2
 8009bee:	d035      	beq.n	8009c5c <__pow5mult+0x90>
 8009bf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bf2:	b93c      	cbnz	r4, 8009c04 <__pow5mult+0x38>
 8009bf4:	2010      	movs	r0, #16
 8009bf6:	f7ff fe63 	bl	80098c0 <malloc>
 8009bfa:	6270      	str	r0, [r6, #36]	; 0x24
 8009bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c00:	6004      	str	r4, [r0, #0]
 8009c02:	60c4      	str	r4, [r0, #12]
 8009c04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c0c:	b94c      	cbnz	r4, 8009c22 <__pow5mult+0x56>
 8009c0e:	f240 2171 	movw	r1, #625	; 0x271
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff ff3b 	bl	8009a8e <__i2b>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c1e:	4604      	mov	r4, r0
 8009c20:	6003      	str	r3, [r0, #0]
 8009c22:	f04f 0800 	mov.w	r8, #0
 8009c26:	07eb      	lsls	r3, r5, #31
 8009c28:	d50a      	bpl.n	8009c40 <__pow5mult+0x74>
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff ff36 	bl	8009aa0 <__multiply>
 8009c34:	4639      	mov	r1, r7
 8009c36:	4681      	mov	r9, r0
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7ff fe88 	bl	800994e <_Bfree>
 8009c3e:	464f      	mov	r7, r9
 8009c40:	106d      	asrs	r5, r5, #1
 8009c42:	d00b      	beq.n	8009c5c <__pow5mult+0x90>
 8009c44:	6820      	ldr	r0, [r4, #0]
 8009c46:	b938      	cbnz	r0, 8009c58 <__pow5mult+0x8c>
 8009c48:	4622      	mov	r2, r4
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7ff ff27 	bl	8009aa0 <__multiply>
 8009c52:	6020      	str	r0, [r4, #0]
 8009c54:	f8c0 8000 	str.w	r8, [r0]
 8009c58:	4604      	mov	r4, r0
 8009c5a:	e7e4      	b.n	8009c26 <__pow5mult+0x5a>
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c62:	bf00      	nop
 8009c64:	0800ba18 	.word	0x0800ba18

08009c68 <__lshift>:
 8009c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	6849      	ldr	r1, [r1, #4]
 8009c76:	eb0a 0903 	add.w	r9, sl, r3
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	4616      	mov	r6, r2
 8009c80:	f109 0501 	add.w	r5, r9, #1
 8009c84:	42ab      	cmp	r3, r5
 8009c86:	db32      	blt.n	8009cee <__lshift+0x86>
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff fe2c 	bl	80098e6 <_Balloc>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	4680      	mov	r8, r0
 8009c92:	f100 0114 	add.w	r1, r0, #20
 8009c96:	461a      	mov	r2, r3
 8009c98:	4553      	cmp	r3, sl
 8009c9a:	db2b      	blt.n	8009cf4 <__lshift+0x8c>
 8009c9c:	6920      	ldr	r0, [r4, #16]
 8009c9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca2:	f104 0314 	add.w	r3, r4, #20
 8009ca6:	f016 021f 	ands.w	r2, r6, #31
 8009caa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cb2:	d025      	beq.n	8009d00 <__lshift+0x98>
 8009cb4:	f1c2 0e20 	rsb	lr, r2, #32
 8009cb8:	2000      	movs	r0, #0
 8009cba:	681e      	ldr	r6, [r3, #0]
 8009cbc:	468a      	mov	sl, r1
 8009cbe:	4096      	lsls	r6, r2
 8009cc0:	4330      	orrs	r0, r6
 8009cc2:	f84a 0b04 	str.w	r0, [sl], #4
 8009cc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cca:	459c      	cmp	ip, r3
 8009ccc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009cd0:	d814      	bhi.n	8009cfc <__lshift+0x94>
 8009cd2:	6048      	str	r0, [r1, #4]
 8009cd4:	b108      	cbz	r0, 8009cda <__lshift+0x72>
 8009cd6:	f109 0502 	add.w	r5, r9, #2
 8009cda:	3d01      	subs	r5, #1
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	f7ff fe33 	bl	800994e <_Bfree>
 8009ce8:	4640      	mov	r0, r8
 8009cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cee:	3101      	adds	r1, #1
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	e7c7      	b.n	8009c84 <__lshift+0x1c>
 8009cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	e7cd      	b.n	8009c98 <__lshift+0x30>
 8009cfc:	4651      	mov	r1, sl
 8009cfe:	e7dc      	b.n	8009cba <__lshift+0x52>
 8009d00:	3904      	subs	r1, #4
 8009d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d06:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d0a:	459c      	cmp	ip, r3
 8009d0c:	d8f9      	bhi.n	8009d02 <__lshift+0x9a>
 8009d0e:	e7e4      	b.n	8009cda <__lshift+0x72>

08009d10 <__mcmp>:
 8009d10:	6903      	ldr	r3, [r0, #16]
 8009d12:	690a      	ldr	r2, [r1, #16]
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	b530      	push	{r4, r5, lr}
 8009d18:	d10c      	bne.n	8009d34 <__mcmp+0x24>
 8009d1a:	0092      	lsls	r2, r2, #2
 8009d1c:	3014      	adds	r0, #20
 8009d1e:	3114      	adds	r1, #20
 8009d20:	1884      	adds	r4, r0, r2
 8009d22:	4411      	add	r1, r2
 8009d24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d2c:	4295      	cmp	r5, r2
 8009d2e:	d003      	beq.n	8009d38 <__mcmp+0x28>
 8009d30:	d305      	bcc.n	8009d3e <__mcmp+0x2e>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4618      	mov	r0, r3
 8009d36:	bd30      	pop	{r4, r5, pc}
 8009d38:	42a0      	cmp	r0, r4
 8009d3a:	d3f3      	bcc.n	8009d24 <__mcmp+0x14>
 8009d3c:	e7fa      	b.n	8009d34 <__mcmp+0x24>
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d42:	e7f7      	b.n	8009d34 <__mcmp+0x24>

08009d44 <__mdiff>:
 8009d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	460d      	mov	r5, r1
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4628      	mov	r0, r5
 8009d50:	4614      	mov	r4, r2
 8009d52:	f7ff ffdd 	bl	8009d10 <__mcmp>
 8009d56:	1e06      	subs	r6, r0, #0
 8009d58:	d108      	bne.n	8009d6c <__mdiff+0x28>
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f7ff fdc2 	bl	80098e6 <_Balloc>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6c:	bfa4      	itt	ge
 8009d6e:	4623      	movge	r3, r4
 8009d70:	462c      	movge	r4, r5
 8009d72:	4638      	mov	r0, r7
 8009d74:	6861      	ldr	r1, [r4, #4]
 8009d76:	bfa6      	itte	ge
 8009d78:	461d      	movge	r5, r3
 8009d7a:	2600      	movge	r6, #0
 8009d7c:	2601      	movlt	r6, #1
 8009d7e:	f7ff fdb2 	bl	80098e6 <_Balloc>
 8009d82:	692b      	ldr	r3, [r5, #16]
 8009d84:	60c6      	str	r6, [r0, #12]
 8009d86:	6926      	ldr	r6, [r4, #16]
 8009d88:	f105 0914 	add.w	r9, r5, #20
 8009d8c:	f104 0214 	add.w	r2, r4, #20
 8009d90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009d94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009d98:	f100 0514 	add.w	r5, r0, #20
 8009d9c:	f04f 0e00 	mov.w	lr, #0
 8009da0:	f852 ab04 	ldr.w	sl, [r2], #4
 8009da4:	f859 4b04 	ldr.w	r4, [r9], #4
 8009da8:	fa1e f18a 	uxtah	r1, lr, sl
 8009dac:	b2a3      	uxth	r3, r4
 8009dae:	1ac9      	subs	r1, r1, r3
 8009db0:	0c23      	lsrs	r3, r4, #16
 8009db2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009db6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009dba:	b289      	uxth	r1, r1
 8009dbc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009dc0:	45c8      	cmp	r8, r9
 8009dc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009dc6:	4694      	mov	ip, r2
 8009dc8:	f845 3b04 	str.w	r3, [r5], #4
 8009dcc:	d8e8      	bhi.n	8009da0 <__mdiff+0x5c>
 8009dce:	45bc      	cmp	ip, r7
 8009dd0:	d304      	bcc.n	8009ddc <__mdiff+0x98>
 8009dd2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009dd6:	b183      	cbz	r3, 8009dfa <__mdiff+0xb6>
 8009dd8:	6106      	str	r6, [r0, #16]
 8009dda:	e7c5      	b.n	8009d68 <__mdiff+0x24>
 8009ddc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009de0:	fa1e f381 	uxtah	r3, lr, r1
 8009de4:	141a      	asrs	r2, r3, #16
 8009de6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009df4:	f845 3b04 	str.w	r3, [r5], #4
 8009df8:	e7e9      	b.n	8009dce <__mdiff+0x8a>
 8009dfa:	3e01      	subs	r6, #1
 8009dfc:	e7e9      	b.n	8009dd2 <__mdiff+0x8e>

08009dfe <__d2b>:
 8009dfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e02:	460e      	mov	r6, r1
 8009e04:	2101      	movs	r1, #1
 8009e06:	ec59 8b10 	vmov	r8, r9, d0
 8009e0a:	4615      	mov	r5, r2
 8009e0c:	f7ff fd6b 	bl	80098e6 <_Balloc>
 8009e10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009e14:	4607      	mov	r7, r0
 8009e16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e1a:	bb34      	cbnz	r4, 8009e6a <__d2b+0x6c>
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	f1b8 0300 	subs.w	r3, r8, #0
 8009e22:	d027      	beq.n	8009e74 <__d2b+0x76>
 8009e24:	a802      	add	r0, sp, #8
 8009e26:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009e2a:	f7ff fe01 	bl	8009a30 <__lo0bits>
 8009e2e:	9900      	ldr	r1, [sp, #0]
 8009e30:	b1f0      	cbz	r0, 8009e70 <__d2b+0x72>
 8009e32:	9a01      	ldr	r2, [sp, #4]
 8009e34:	f1c0 0320 	rsb	r3, r0, #32
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	40c2      	lsrs	r2, r0
 8009e40:	617b      	str	r3, [r7, #20]
 8009e42:	9201      	str	r2, [sp, #4]
 8009e44:	9b01      	ldr	r3, [sp, #4]
 8009e46:	61bb      	str	r3, [r7, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bf14      	ite	ne
 8009e4c:	2102      	movne	r1, #2
 8009e4e:	2101      	moveq	r1, #1
 8009e50:	6139      	str	r1, [r7, #16]
 8009e52:	b1c4      	cbz	r4, 8009e86 <__d2b+0x88>
 8009e54:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009e58:	4404      	add	r4, r0
 8009e5a:	6034      	str	r4, [r6, #0]
 8009e5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e60:	6028      	str	r0, [r5, #0]
 8009e62:	4638      	mov	r0, r7
 8009e64:	b003      	add	sp, #12
 8009e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e6e:	e7d5      	b.n	8009e1c <__d2b+0x1e>
 8009e70:	6179      	str	r1, [r7, #20]
 8009e72:	e7e7      	b.n	8009e44 <__d2b+0x46>
 8009e74:	a801      	add	r0, sp, #4
 8009e76:	f7ff fddb 	bl	8009a30 <__lo0bits>
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	2101      	movs	r1, #1
 8009e80:	6139      	str	r1, [r7, #16]
 8009e82:	3020      	adds	r0, #32
 8009e84:	e7e5      	b.n	8009e52 <__d2b+0x54>
 8009e86:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009e8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e8e:	6030      	str	r0, [r6, #0]
 8009e90:	6918      	ldr	r0, [r3, #16]
 8009e92:	f7ff fdae 	bl	80099f2 <__hi0bits>
 8009e96:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009e9a:	e7e1      	b.n	8009e60 <__d2b+0x62>

08009e9c <_calloc_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	fb02 f401 	mul.w	r4, r2, r1
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	f000 f856 	bl	8009f54 <_malloc_r>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	b118      	cbz	r0, 8009eb4 <_calloc_r+0x18>
 8009eac:	4622      	mov	r2, r4
 8009eae:	2100      	movs	r1, #0
 8009eb0:	f7fd ff0e 	bl	8007cd0 <memset>
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}

08009eb8 <_free_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4605      	mov	r5, r0
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d045      	beq.n	8009f4c <_free_r+0x94>
 8009ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec4:	1f0c      	subs	r4, r1, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfb8      	it	lt
 8009eca:	18e4      	addlt	r4, r4, r3
 8009ecc:	f000 fc03 	bl	800a6d6 <__malloc_lock>
 8009ed0:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <_free_r+0x98>)
 8009ed2:	6813      	ldr	r3, [r2, #0]
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	b933      	cbnz	r3, 8009ee6 <_free_r+0x2e>
 8009ed8:	6063      	str	r3, [r4, #4]
 8009eda:	6014      	str	r4, [r2, #0]
 8009edc:	4628      	mov	r0, r5
 8009ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee2:	f000 bbf9 	b.w	800a6d8 <__malloc_unlock>
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	d90c      	bls.n	8009f04 <_free_r+0x4c>
 8009eea:	6821      	ldr	r1, [r4, #0]
 8009eec:	1862      	adds	r2, r4, r1
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	bf04      	itt	eq
 8009ef2:	681a      	ldreq	r2, [r3, #0]
 8009ef4:	685b      	ldreq	r3, [r3, #4]
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	bf04      	itt	eq
 8009efa:	1852      	addeq	r2, r2, r1
 8009efc:	6022      	streq	r2, [r4, #0]
 8009efe:	6004      	str	r4, [r0, #0]
 8009f00:	e7ec      	b.n	8009edc <_free_r+0x24>
 8009f02:	4613      	mov	r3, r2
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	b10a      	cbz	r2, 8009f0c <_free_r+0x54>
 8009f08:	42a2      	cmp	r2, r4
 8009f0a:	d9fa      	bls.n	8009f02 <_free_r+0x4a>
 8009f0c:	6819      	ldr	r1, [r3, #0]
 8009f0e:	1858      	adds	r0, r3, r1
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d10b      	bne.n	8009f2c <_free_r+0x74>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	4401      	add	r1, r0
 8009f18:	1858      	adds	r0, r3, r1
 8009f1a:	4282      	cmp	r2, r0
 8009f1c:	6019      	str	r1, [r3, #0]
 8009f1e:	d1dd      	bne.n	8009edc <_free_r+0x24>
 8009f20:	6810      	ldr	r0, [r2, #0]
 8009f22:	6852      	ldr	r2, [r2, #4]
 8009f24:	605a      	str	r2, [r3, #4]
 8009f26:	4401      	add	r1, r0
 8009f28:	6019      	str	r1, [r3, #0]
 8009f2a:	e7d7      	b.n	8009edc <_free_r+0x24>
 8009f2c:	d902      	bls.n	8009f34 <_free_r+0x7c>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	e7d3      	b.n	8009edc <_free_r+0x24>
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	1821      	adds	r1, r4, r0
 8009f38:	428a      	cmp	r2, r1
 8009f3a:	bf04      	itt	eq
 8009f3c:	6811      	ldreq	r1, [r2, #0]
 8009f3e:	6852      	ldreq	r2, [r2, #4]
 8009f40:	6062      	str	r2, [r4, #4]
 8009f42:	bf04      	itt	eq
 8009f44:	1809      	addeq	r1, r1, r0
 8009f46:	6021      	streq	r1, [r4, #0]
 8009f48:	605c      	str	r4, [r3, #4]
 8009f4a:	e7c7      	b.n	8009edc <_free_r+0x24>
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000df8 	.word	0x20000df8

08009f54 <_malloc_r>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	1ccd      	adds	r5, r1, #3
 8009f58:	f025 0503 	bic.w	r5, r5, #3
 8009f5c:	3508      	adds	r5, #8
 8009f5e:	2d0c      	cmp	r5, #12
 8009f60:	bf38      	it	cc
 8009f62:	250c      	movcc	r5, #12
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	4606      	mov	r6, r0
 8009f68:	db01      	blt.n	8009f6e <_malloc_r+0x1a>
 8009f6a:	42a9      	cmp	r1, r5
 8009f6c:	d903      	bls.n	8009f76 <_malloc_r+0x22>
 8009f6e:	230c      	movs	r3, #12
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	2000      	movs	r0, #0
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
 8009f76:	f000 fbae 	bl	800a6d6 <__malloc_lock>
 8009f7a:	4a21      	ldr	r2, [pc, #132]	; (800a000 <_malloc_r+0xac>)
 8009f7c:	6814      	ldr	r4, [r2, #0]
 8009f7e:	4621      	mov	r1, r4
 8009f80:	b991      	cbnz	r1, 8009fa8 <_malloc_r+0x54>
 8009f82:	4c20      	ldr	r4, [pc, #128]	; (800a004 <_malloc_r+0xb0>)
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	b91b      	cbnz	r3, 8009f90 <_malloc_r+0x3c>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f000 facf 	bl	800a52c <_sbrk_r>
 8009f8e:	6020      	str	r0, [r4, #0]
 8009f90:	4629      	mov	r1, r5
 8009f92:	4630      	mov	r0, r6
 8009f94:	f000 faca 	bl	800a52c <_sbrk_r>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d124      	bne.n	8009fe6 <_malloc_r+0x92>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	6033      	str	r3, [r6, #0]
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 fb99 	bl	800a6d8 <__malloc_unlock>
 8009fa6:	e7e4      	b.n	8009f72 <_malloc_r+0x1e>
 8009fa8:	680b      	ldr	r3, [r1, #0]
 8009faa:	1b5b      	subs	r3, r3, r5
 8009fac:	d418      	bmi.n	8009fe0 <_malloc_r+0x8c>
 8009fae:	2b0b      	cmp	r3, #11
 8009fb0:	d90f      	bls.n	8009fd2 <_malloc_r+0x7e>
 8009fb2:	600b      	str	r3, [r1, #0]
 8009fb4:	50cd      	str	r5, [r1, r3]
 8009fb6:	18cc      	adds	r4, r1, r3
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 fb8d 	bl	800a6d8 <__malloc_unlock>
 8009fbe:	f104 000b 	add.w	r0, r4, #11
 8009fc2:	1d23      	adds	r3, r4, #4
 8009fc4:	f020 0007 	bic.w	r0, r0, #7
 8009fc8:	1ac3      	subs	r3, r0, r3
 8009fca:	d0d3      	beq.n	8009f74 <_malloc_r+0x20>
 8009fcc:	425a      	negs	r2, r3
 8009fce:	50e2      	str	r2, [r4, r3]
 8009fd0:	e7d0      	b.n	8009f74 <_malloc_r+0x20>
 8009fd2:	428c      	cmp	r4, r1
 8009fd4:	684b      	ldr	r3, [r1, #4]
 8009fd6:	bf16      	itet	ne
 8009fd8:	6063      	strne	r3, [r4, #4]
 8009fda:	6013      	streq	r3, [r2, #0]
 8009fdc:	460c      	movne	r4, r1
 8009fde:	e7eb      	b.n	8009fb8 <_malloc_r+0x64>
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6849      	ldr	r1, [r1, #4]
 8009fe4:	e7cc      	b.n	8009f80 <_malloc_r+0x2c>
 8009fe6:	1cc4      	adds	r4, r0, #3
 8009fe8:	f024 0403 	bic.w	r4, r4, #3
 8009fec:	42a0      	cmp	r0, r4
 8009fee:	d005      	beq.n	8009ffc <_malloc_r+0xa8>
 8009ff0:	1a21      	subs	r1, r4, r0
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 fa9a 	bl	800a52c <_sbrk_r>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d0cf      	beq.n	8009f9c <_malloc_r+0x48>
 8009ffc:	6025      	str	r5, [r4, #0]
 8009ffe:	e7db      	b.n	8009fb8 <_malloc_r+0x64>
 800a000:	20000df8 	.word	0x20000df8
 800a004:	20000dfc 	.word	0x20000dfc

0800a008 <__ssputs_r>:
 800a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	688e      	ldr	r6, [r1, #8]
 800a00e:	429e      	cmp	r6, r3
 800a010:	4682      	mov	sl, r0
 800a012:	460c      	mov	r4, r1
 800a014:	4690      	mov	r8, r2
 800a016:	4699      	mov	r9, r3
 800a018:	d837      	bhi.n	800a08a <__ssputs_r+0x82>
 800a01a:	898a      	ldrh	r2, [r1, #12]
 800a01c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a020:	d031      	beq.n	800a086 <__ssputs_r+0x7e>
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	6909      	ldr	r1, [r1, #16]
 800a026:	1a6f      	subs	r7, r5, r1
 800a028:	6965      	ldr	r5, [r4, #20]
 800a02a:	2302      	movs	r3, #2
 800a02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a030:	fb95 f5f3 	sdiv	r5, r5, r3
 800a034:	f109 0301 	add.w	r3, r9, #1
 800a038:	443b      	add	r3, r7
 800a03a:	429d      	cmp	r5, r3
 800a03c:	bf38      	it	cc
 800a03e:	461d      	movcc	r5, r3
 800a040:	0553      	lsls	r3, r2, #21
 800a042:	d530      	bpl.n	800a0a6 <__ssputs_r+0x9e>
 800a044:	4629      	mov	r1, r5
 800a046:	f7ff ff85 	bl	8009f54 <_malloc_r>
 800a04a:	4606      	mov	r6, r0
 800a04c:	b950      	cbnz	r0, 800a064 <__ssputs_r+0x5c>
 800a04e:	230c      	movs	r3, #12
 800a050:	f8ca 3000 	str.w	r3, [sl]
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	463a      	mov	r2, r7
 800a066:	6921      	ldr	r1, [r4, #16]
 800a068:	f7ff fc32 	bl	80098d0 <memcpy>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	6126      	str	r6, [r4, #16]
 800a07a:	6165      	str	r5, [r4, #20]
 800a07c:	443e      	add	r6, r7
 800a07e:	1bed      	subs	r5, r5, r7
 800a080:	6026      	str	r6, [r4, #0]
 800a082:	60a5      	str	r5, [r4, #8]
 800a084:	464e      	mov	r6, r9
 800a086:	454e      	cmp	r6, r9
 800a088:	d900      	bls.n	800a08c <__ssputs_r+0x84>
 800a08a:	464e      	mov	r6, r9
 800a08c:	4632      	mov	r2, r6
 800a08e:	4641      	mov	r1, r8
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	f000 fb07 	bl	800a6a4 <memmove>
 800a096:	68a3      	ldr	r3, [r4, #8]
 800a098:	1b9b      	subs	r3, r3, r6
 800a09a:	60a3      	str	r3, [r4, #8]
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	441e      	add	r6, r3
 800a0a0:	6026      	str	r6, [r4, #0]
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	e7dc      	b.n	800a060 <__ssputs_r+0x58>
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	f000 fb17 	bl	800a6da <_realloc_r>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d1e2      	bne.n	800a078 <__ssputs_r+0x70>
 800a0b2:	6921      	ldr	r1, [r4, #16]
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	f7ff feff 	bl	8009eb8 <_free_r>
 800a0ba:	e7c8      	b.n	800a04e <__ssputs_r+0x46>

0800a0bc <_svfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	461d      	mov	r5, r3
 800a0c2:	898b      	ldrh	r3, [r1, #12]
 800a0c4:	061f      	lsls	r7, r3, #24
 800a0c6:	b09d      	sub	sp, #116	; 0x74
 800a0c8:	4680      	mov	r8, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	d50f      	bpl.n	800a0f0 <_svfiprintf_r+0x34>
 800a0d0:	690b      	ldr	r3, [r1, #16]
 800a0d2:	b96b      	cbnz	r3, 800a0f0 <_svfiprintf_r+0x34>
 800a0d4:	2140      	movs	r1, #64	; 0x40
 800a0d6:	f7ff ff3d 	bl	8009f54 <_malloc_r>
 800a0da:	6020      	str	r0, [r4, #0]
 800a0dc:	6120      	str	r0, [r4, #16]
 800a0de:	b928      	cbnz	r0, 800a0ec <_svfiprintf_r+0x30>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	f8c8 3000 	str.w	r3, [r8]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ea:	e0c8      	b.n	800a27e <_svfiprintf_r+0x1c2>
 800a0ec:	2340      	movs	r3, #64	; 0x40
 800a0ee:	6163      	str	r3, [r4, #20]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0fa:	2330      	movs	r3, #48	; 0x30
 800a0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a100:	9503      	str	r5, [sp, #12]
 800a102:	f04f 0b01 	mov.w	fp, #1
 800a106:	4637      	mov	r7, r6
 800a108:	463d      	mov	r5, r7
 800a10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a10e:	b10b      	cbz	r3, 800a114 <_svfiprintf_r+0x58>
 800a110:	2b25      	cmp	r3, #37	; 0x25
 800a112:	d13e      	bne.n	800a192 <_svfiprintf_r+0xd6>
 800a114:	ebb7 0a06 	subs.w	sl, r7, r6
 800a118:	d00b      	beq.n	800a132 <_svfiprintf_r+0x76>
 800a11a:	4653      	mov	r3, sl
 800a11c:	4632      	mov	r2, r6
 800a11e:	4621      	mov	r1, r4
 800a120:	4640      	mov	r0, r8
 800a122:	f7ff ff71 	bl	800a008 <__ssputs_r>
 800a126:	3001      	adds	r0, #1
 800a128:	f000 80a4 	beq.w	800a274 <_svfiprintf_r+0x1b8>
 800a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12e:	4453      	add	r3, sl
 800a130:	9309      	str	r3, [sp, #36]	; 0x24
 800a132:	783b      	ldrb	r3, [r7, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 809d 	beq.w	800a274 <_svfiprintf_r+0x1b8>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a144:	9304      	str	r3, [sp, #16]
 800a146:	9307      	str	r3, [sp, #28]
 800a148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a14c:	931a      	str	r3, [sp, #104]	; 0x68
 800a14e:	462f      	mov	r7, r5
 800a150:	2205      	movs	r2, #5
 800a152:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a156:	4850      	ldr	r0, [pc, #320]	; (800a298 <_svfiprintf_r+0x1dc>)
 800a158:	f7f6 f842 	bl	80001e0 <memchr>
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	b9d0      	cbnz	r0, 800a196 <_svfiprintf_r+0xda>
 800a160:	06d9      	lsls	r1, r3, #27
 800a162:	bf44      	itt	mi
 800a164:	2220      	movmi	r2, #32
 800a166:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a16a:	071a      	lsls	r2, r3, #28
 800a16c:	bf44      	itt	mi
 800a16e:	222b      	movmi	r2, #43	; 0x2b
 800a170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a174:	782a      	ldrb	r2, [r5, #0]
 800a176:	2a2a      	cmp	r2, #42	; 0x2a
 800a178:	d015      	beq.n	800a1a6 <_svfiprintf_r+0xea>
 800a17a:	9a07      	ldr	r2, [sp, #28]
 800a17c:	462f      	mov	r7, r5
 800a17e:	2000      	movs	r0, #0
 800a180:	250a      	movs	r5, #10
 800a182:	4639      	mov	r1, r7
 800a184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a188:	3b30      	subs	r3, #48	; 0x30
 800a18a:	2b09      	cmp	r3, #9
 800a18c:	d94d      	bls.n	800a22a <_svfiprintf_r+0x16e>
 800a18e:	b1b8      	cbz	r0, 800a1c0 <_svfiprintf_r+0x104>
 800a190:	e00f      	b.n	800a1b2 <_svfiprintf_r+0xf6>
 800a192:	462f      	mov	r7, r5
 800a194:	e7b8      	b.n	800a108 <_svfiprintf_r+0x4c>
 800a196:	4a40      	ldr	r2, [pc, #256]	; (800a298 <_svfiprintf_r+0x1dc>)
 800a198:	1a80      	subs	r0, r0, r2
 800a19a:	fa0b f000 	lsl.w	r0, fp, r0
 800a19e:	4318      	orrs	r0, r3
 800a1a0:	9004      	str	r0, [sp, #16]
 800a1a2:	463d      	mov	r5, r7
 800a1a4:	e7d3      	b.n	800a14e <_svfiprintf_r+0x92>
 800a1a6:	9a03      	ldr	r2, [sp, #12]
 800a1a8:	1d11      	adds	r1, r2, #4
 800a1aa:	6812      	ldr	r2, [r2, #0]
 800a1ac:	9103      	str	r1, [sp, #12]
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	db01      	blt.n	800a1b6 <_svfiprintf_r+0xfa>
 800a1b2:	9207      	str	r2, [sp, #28]
 800a1b4:	e004      	b.n	800a1c0 <_svfiprintf_r+0x104>
 800a1b6:	4252      	negs	r2, r2
 800a1b8:	f043 0302 	orr.w	r3, r3, #2
 800a1bc:	9207      	str	r2, [sp, #28]
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	783b      	ldrb	r3, [r7, #0]
 800a1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c4:	d10c      	bne.n	800a1e0 <_svfiprintf_r+0x124>
 800a1c6:	787b      	ldrb	r3, [r7, #1]
 800a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ca:	d133      	bne.n	800a234 <_svfiprintf_r+0x178>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	1d1a      	adds	r2, r3, #4
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	9203      	str	r2, [sp, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bfb8      	it	lt
 800a1d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1dc:	3702      	adds	r7, #2
 800a1de:	9305      	str	r3, [sp, #20]
 800a1e0:	4d2e      	ldr	r5, [pc, #184]	; (800a29c <_svfiprintf_r+0x1e0>)
 800a1e2:	7839      	ldrb	r1, [r7, #0]
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f7f5 fffa 	bl	80001e0 <memchr>
 800a1ec:	b138      	cbz	r0, 800a1fe <_svfiprintf_r+0x142>
 800a1ee:	2340      	movs	r3, #64	; 0x40
 800a1f0:	1b40      	subs	r0, r0, r5
 800a1f2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	4303      	orrs	r3, r0
 800a1fa:	3701      	adds	r7, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	7839      	ldrb	r1, [r7, #0]
 800a200:	4827      	ldr	r0, [pc, #156]	; (800a2a0 <_svfiprintf_r+0x1e4>)
 800a202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a206:	2206      	movs	r2, #6
 800a208:	1c7e      	adds	r6, r7, #1
 800a20a:	f7f5 ffe9 	bl	80001e0 <memchr>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d038      	beq.n	800a284 <_svfiprintf_r+0x1c8>
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <_svfiprintf_r+0x1e8>)
 800a214:	bb13      	cbnz	r3, 800a25c <_svfiprintf_r+0x1a0>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	3307      	adds	r3, #7
 800a21a:	f023 0307 	bic.w	r3, r3, #7
 800a21e:	3308      	adds	r3, #8
 800a220:	9303      	str	r3, [sp, #12]
 800a222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a224:	444b      	add	r3, r9
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	e76d      	b.n	800a106 <_svfiprintf_r+0x4a>
 800a22a:	fb05 3202 	mla	r2, r5, r2, r3
 800a22e:	2001      	movs	r0, #1
 800a230:	460f      	mov	r7, r1
 800a232:	e7a6      	b.n	800a182 <_svfiprintf_r+0xc6>
 800a234:	2300      	movs	r3, #0
 800a236:	3701      	adds	r7, #1
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	4619      	mov	r1, r3
 800a23c:	250a      	movs	r5, #10
 800a23e:	4638      	mov	r0, r7
 800a240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a244:	3a30      	subs	r2, #48	; 0x30
 800a246:	2a09      	cmp	r2, #9
 800a248:	d903      	bls.n	800a252 <_svfiprintf_r+0x196>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0c8      	beq.n	800a1e0 <_svfiprintf_r+0x124>
 800a24e:	9105      	str	r1, [sp, #20]
 800a250:	e7c6      	b.n	800a1e0 <_svfiprintf_r+0x124>
 800a252:	fb05 2101 	mla	r1, r5, r1, r2
 800a256:	2301      	movs	r3, #1
 800a258:	4607      	mov	r7, r0
 800a25a:	e7f0      	b.n	800a23e <_svfiprintf_r+0x182>
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4622      	mov	r2, r4
 800a262:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <_svfiprintf_r+0x1ec>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4640      	mov	r0, r8
 800a268:	f7fd fdce 	bl	8007e08 <_printf_float>
 800a26c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a270:	4681      	mov	r9, r0
 800a272:	d1d6      	bne.n	800a222 <_svfiprintf_r+0x166>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	065b      	lsls	r3, r3, #25
 800a278:	f53f af35 	bmi.w	800a0e6 <_svfiprintf_r+0x2a>
 800a27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a27e:	b01d      	add	sp, #116	; 0x74
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a284:	ab03      	add	r3, sp, #12
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4622      	mov	r2, r4
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <_svfiprintf_r+0x1ec>)
 800a28c:	a904      	add	r1, sp, #16
 800a28e:	4640      	mov	r0, r8
 800a290:	f7fe f870 	bl	8008374 <_printf_i>
 800a294:	e7ea      	b.n	800a26c <_svfiprintf_r+0x1b0>
 800a296:	bf00      	nop
 800a298:	0800ba24 	.word	0x0800ba24
 800a29c:	0800ba2a 	.word	0x0800ba2a
 800a2a0:	0800ba2e 	.word	0x0800ba2e
 800a2a4:	08007e09 	.word	0x08007e09
 800a2a8:	0800a009 	.word	0x0800a009

0800a2ac <__sfputc_r>:
 800a2ac:	6893      	ldr	r3, [r2, #8]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	b410      	push	{r4}
 800a2b4:	6093      	str	r3, [r2, #8]
 800a2b6:	da08      	bge.n	800a2ca <__sfputc_r+0x1e>
 800a2b8:	6994      	ldr	r4, [r2, #24]
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	db01      	blt.n	800a2c2 <__sfputc_r+0x16>
 800a2be:	290a      	cmp	r1, #10
 800a2c0:	d103      	bne.n	800a2ca <__sfputc_r+0x1e>
 800a2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c6:	f7fe ba0b 	b.w	80086e0 <__swbuf_r>
 800a2ca:	6813      	ldr	r3, [r2, #0]
 800a2cc:	1c58      	adds	r0, r3, #1
 800a2ce:	6010      	str	r0, [r2, #0]
 800a2d0:	7019      	strb	r1, [r3, #0]
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <__sfputs_r>:
 800a2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	18d5      	adds	r5, r2, r3
 800a2e4:	42ac      	cmp	r4, r5
 800a2e6:	d101      	bne.n	800a2ec <__sfputs_r+0x12>
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e007      	b.n	800a2fc <__sfputs_r+0x22>
 800a2ec:	463a      	mov	r2, r7
 800a2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ffda 	bl	800a2ac <__sfputc_r>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d1f3      	bne.n	800a2e4 <__sfputs_r+0xa>
 800a2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a300 <_vfiprintf_r>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	460c      	mov	r4, r1
 800a306:	b09d      	sub	sp, #116	; 0x74
 800a308:	4617      	mov	r7, r2
 800a30a:	461d      	mov	r5, r3
 800a30c:	4606      	mov	r6, r0
 800a30e:	b118      	cbz	r0, 800a318 <_vfiprintf_r+0x18>
 800a310:	6983      	ldr	r3, [r0, #24]
 800a312:	b90b      	cbnz	r3, 800a318 <_vfiprintf_r+0x18>
 800a314:	f7ff f9d8 	bl	80096c8 <__sinit>
 800a318:	4b7c      	ldr	r3, [pc, #496]	; (800a50c <_vfiprintf_r+0x20c>)
 800a31a:	429c      	cmp	r4, r3
 800a31c:	d158      	bne.n	800a3d0 <_vfiprintf_r+0xd0>
 800a31e:	6874      	ldr	r4, [r6, #4]
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	0718      	lsls	r0, r3, #28
 800a324:	d55e      	bpl.n	800a3e4 <_vfiprintf_r+0xe4>
 800a326:	6923      	ldr	r3, [r4, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d05b      	beq.n	800a3e4 <_vfiprintf_r+0xe4>
 800a32c:	2300      	movs	r3, #0
 800a32e:	9309      	str	r3, [sp, #36]	; 0x24
 800a330:	2320      	movs	r3, #32
 800a332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a336:	2330      	movs	r3, #48	; 0x30
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a33c:	9503      	str	r5, [sp, #12]
 800a33e:	f04f 0b01 	mov.w	fp, #1
 800a342:	46b8      	mov	r8, r7
 800a344:	4645      	mov	r5, r8
 800a346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a34a:	b10b      	cbz	r3, 800a350 <_vfiprintf_r+0x50>
 800a34c:	2b25      	cmp	r3, #37	; 0x25
 800a34e:	d154      	bne.n	800a3fa <_vfiprintf_r+0xfa>
 800a350:	ebb8 0a07 	subs.w	sl, r8, r7
 800a354:	d00b      	beq.n	800a36e <_vfiprintf_r+0x6e>
 800a356:	4653      	mov	r3, sl
 800a358:	463a      	mov	r2, r7
 800a35a:	4621      	mov	r1, r4
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7ff ffbc 	bl	800a2da <__sfputs_r>
 800a362:	3001      	adds	r0, #1
 800a364:	f000 80c2 	beq.w	800a4ec <_vfiprintf_r+0x1ec>
 800a368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36a:	4453      	add	r3, sl
 800a36c:	9309      	str	r3, [sp, #36]	; 0x24
 800a36e:	f898 3000 	ldrb.w	r3, [r8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 80ba 	beq.w	800a4ec <_vfiprintf_r+0x1ec>
 800a378:	2300      	movs	r3, #0
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a37e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	9307      	str	r3, [sp, #28]
 800a386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a38a:	931a      	str	r3, [sp, #104]	; 0x68
 800a38c:	46a8      	mov	r8, r5
 800a38e:	2205      	movs	r2, #5
 800a390:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a394:	485e      	ldr	r0, [pc, #376]	; (800a510 <_vfiprintf_r+0x210>)
 800a396:	f7f5 ff23 	bl	80001e0 <memchr>
 800a39a:	9b04      	ldr	r3, [sp, #16]
 800a39c:	bb78      	cbnz	r0, 800a3fe <_vfiprintf_r+0xfe>
 800a39e:	06d9      	lsls	r1, r3, #27
 800a3a0:	bf44      	itt	mi
 800a3a2:	2220      	movmi	r2, #32
 800a3a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a3a8:	071a      	lsls	r2, r3, #28
 800a3aa:	bf44      	itt	mi
 800a3ac:	222b      	movmi	r2, #43	; 0x2b
 800a3ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a3b2:	782a      	ldrb	r2, [r5, #0]
 800a3b4:	2a2a      	cmp	r2, #42	; 0x2a
 800a3b6:	d02a      	beq.n	800a40e <_vfiprintf_r+0x10e>
 800a3b8:	9a07      	ldr	r2, [sp, #28]
 800a3ba:	46a8      	mov	r8, r5
 800a3bc:	2000      	movs	r0, #0
 800a3be:	250a      	movs	r5, #10
 800a3c0:	4641      	mov	r1, r8
 800a3c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3c6:	3b30      	subs	r3, #48	; 0x30
 800a3c8:	2b09      	cmp	r3, #9
 800a3ca:	d969      	bls.n	800a4a0 <_vfiprintf_r+0x1a0>
 800a3cc:	b360      	cbz	r0, 800a428 <_vfiprintf_r+0x128>
 800a3ce:	e024      	b.n	800a41a <_vfiprintf_r+0x11a>
 800a3d0:	4b50      	ldr	r3, [pc, #320]	; (800a514 <_vfiprintf_r+0x214>)
 800a3d2:	429c      	cmp	r4, r3
 800a3d4:	d101      	bne.n	800a3da <_vfiprintf_r+0xda>
 800a3d6:	68b4      	ldr	r4, [r6, #8]
 800a3d8:	e7a2      	b.n	800a320 <_vfiprintf_r+0x20>
 800a3da:	4b4f      	ldr	r3, [pc, #316]	; (800a518 <_vfiprintf_r+0x218>)
 800a3dc:	429c      	cmp	r4, r3
 800a3de:	bf08      	it	eq
 800a3e0:	68f4      	ldreq	r4, [r6, #12]
 800a3e2:	e79d      	b.n	800a320 <_vfiprintf_r+0x20>
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f7fe f9cc 	bl	8008784 <__swsetup_r>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d09d      	beq.n	800a32c <_vfiprintf_r+0x2c>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f4:	b01d      	add	sp, #116	; 0x74
 800a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fa:	46a8      	mov	r8, r5
 800a3fc:	e7a2      	b.n	800a344 <_vfiprintf_r+0x44>
 800a3fe:	4a44      	ldr	r2, [pc, #272]	; (800a510 <_vfiprintf_r+0x210>)
 800a400:	1a80      	subs	r0, r0, r2
 800a402:	fa0b f000 	lsl.w	r0, fp, r0
 800a406:	4318      	orrs	r0, r3
 800a408:	9004      	str	r0, [sp, #16]
 800a40a:	4645      	mov	r5, r8
 800a40c:	e7be      	b.n	800a38c <_vfiprintf_r+0x8c>
 800a40e:	9a03      	ldr	r2, [sp, #12]
 800a410:	1d11      	adds	r1, r2, #4
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	9103      	str	r1, [sp, #12]
 800a416:	2a00      	cmp	r2, #0
 800a418:	db01      	blt.n	800a41e <_vfiprintf_r+0x11e>
 800a41a:	9207      	str	r2, [sp, #28]
 800a41c:	e004      	b.n	800a428 <_vfiprintf_r+0x128>
 800a41e:	4252      	negs	r2, r2
 800a420:	f043 0302 	orr.w	r3, r3, #2
 800a424:	9207      	str	r2, [sp, #28]
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	f898 3000 	ldrb.w	r3, [r8]
 800a42c:	2b2e      	cmp	r3, #46	; 0x2e
 800a42e:	d10e      	bne.n	800a44e <_vfiprintf_r+0x14e>
 800a430:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a434:	2b2a      	cmp	r3, #42	; 0x2a
 800a436:	d138      	bne.n	800a4aa <_vfiprintf_r+0x1aa>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	9203      	str	r2, [sp, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfb8      	it	lt
 800a444:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a448:	f108 0802 	add.w	r8, r8, #2
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	4d33      	ldr	r5, [pc, #204]	; (800a51c <_vfiprintf_r+0x21c>)
 800a450:	f898 1000 	ldrb.w	r1, [r8]
 800a454:	2203      	movs	r2, #3
 800a456:	4628      	mov	r0, r5
 800a458:	f7f5 fec2 	bl	80001e0 <memchr>
 800a45c:	b140      	cbz	r0, 800a470 <_vfiprintf_r+0x170>
 800a45e:	2340      	movs	r3, #64	; 0x40
 800a460:	1b40      	subs	r0, r0, r5
 800a462:	fa03 f000 	lsl.w	r0, r3, r0
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	4303      	orrs	r3, r0
 800a46a:	f108 0801 	add.w	r8, r8, #1
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	f898 1000 	ldrb.w	r1, [r8]
 800a474:	482a      	ldr	r0, [pc, #168]	; (800a520 <_vfiprintf_r+0x220>)
 800a476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a47a:	2206      	movs	r2, #6
 800a47c:	f108 0701 	add.w	r7, r8, #1
 800a480:	f7f5 feae 	bl	80001e0 <memchr>
 800a484:	2800      	cmp	r0, #0
 800a486:	d037      	beq.n	800a4f8 <_vfiprintf_r+0x1f8>
 800a488:	4b26      	ldr	r3, [pc, #152]	; (800a524 <_vfiprintf_r+0x224>)
 800a48a:	bb1b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x1d4>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	3307      	adds	r3, #7
 800a490:	f023 0307 	bic.w	r3, r3, #7
 800a494:	3308      	adds	r3, #8
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49a:	444b      	add	r3, r9
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	e750      	b.n	800a342 <_vfiprintf_r+0x42>
 800a4a0:	fb05 3202 	mla	r2, r5, r2, r3
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	4688      	mov	r8, r1
 800a4a8:	e78a      	b.n	800a3c0 <_vfiprintf_r+0xc0>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f108 0801 	add.w	r8, r8, #1
 800a4b0:	9305      	str	r3, [sp, #20]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	250a      	movs	r5, #10
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4bc:	3a30      	subs	r2, #48	; 0x30
 800a4be:	2a09      	cmp	r2, #9
 800a4c0:	d903      	bls.n	800a4ca <_vfiprintf_r+0x1ca>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0c3      	beq.n	800a44e <_vfiprintf_r+0x14e>
 800a4c6:	9105      	str	r1, [sp, #20]
 800a4c8:	e7c1      	b.n	800a44e <_vfiprintf_r+0x14e>
 800a4ca:	fb05 2101 	mla	r1, r5, r1, r2
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4680      	mov	r8, r0
 800a4d2:	e7f0      	b.n	800a4b6 <_vfiprintf_r+0x1b6>
 800a4d4:	ab03      	add	r3, sp, #12
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4622      	mov	r2, r4
 800a4da:	4b13      	ldr	r3, [pc, #76]	; (800a528 <_vfiprintf_r+0x228>)
 800a4dc:	a904      	add	r1, sp, #16
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7fd fc92 	bl	8007e08 <_printf_float>
 800a4e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	d1d5      	bne.n	800a498 <_vfiprintf_r+0x198>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	065b      	lsls	r3, r3, #25
 800a4f0:	f53f af7e 	bmi.w	800a3f0 <_vfiprintf_r+0xf0>
 800a4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f6:	e77d      	b.n	800a3f4 <_vfiprintf_r+0xf4>
 800a4f8:	ab03      	add	r3, sp, #12
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <_vfiprintf_r+0x228>)
 800a500:	a904      	add	r1, sp, #16
 800a502:	4630      	mov	r0, r6
 800a504:	f7fd ff36 	bl	8008374 <_printf_i>
 800a508:	e7ec      	b.n	800a4e4 <_vfiprintf_r+0x1e4>
 800a50a:	bf00      	nop
 800a50c:	0800b8e8 	.word	0x0800b8e8
 800a510:	0800ba24 	.word	0x0800ba24
 800a514:	0800b908 	.word	0x0800b908
 800a518:	0800b8c8 	.word	0x0800b8c8
 800a51c:	0800ba2a 	.word	0x0800ba2a
 800a520:	0800ba2e 	.word	0x0800ba2e
 800a524:	08007e09 	.word	0x08007e09
 800a528:	0800a2db 	.word	0x0800a2db

0800a52c <_sbrk_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4c06      	ldr	r4, [pc, #24]	; (800a548 <_sbrk_r+0x1c>)
 800a530:	2300      	movs	r3, #0
 800a532:	4605      	mov	r5, r0
 800a534:	4608      	mov	r0, r1
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	f7f8 fc3e 	bl	8002db8 <_sbrk>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_sbrk_r+0x1a>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	b103      	cbz	r3, 800a546 <_sbrk_r+0x1a>
 800a544:	602b      	str	r3, [r5, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	20001d50 	.word	0x20001d50

0800a54c <__sread>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	460c      	mov	r4, r1
 800a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a554:	f000 f8e8 	bl	800a728 <_read_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	bfab      	itete	ge
 800a55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a55e:	89a3      	ldrhlt	r3, [r4, #12]
 800a560:	181b      	addge	r3, r3, r0
 800a562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a566:	bfac      	ite	ge
 800a568:	6563      	strge	r3, [r4, #84]	; 0x54
 800a56a:	81a3      	strhlt	r3, [r4, #12]
 800a56c:	bd10      	pop	{r4, pc}

0800a56e <__swrite>:
 800a56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a572:	461f      	mov	r7, r3
 800a574:	898b      	ldrh	r3, [r1, #12]
 800a576:	05db      	lsls	r3, r3, #23
 800a578:	4605      	mov	r5, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	4616      	mov	r6, r2
 800a57e:	d505      	bpl.n	800a58c <__swrite+0x1e>
 800a580:	2302      	movs	r3, #2
 800a582:	2200      	movs	r2, #0
 800a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a588:	f000 f868 	bl	800a65c <_lseek_r>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	4632      	mov	r2, r6
 800a59a:	463b      	mov	r3, r7
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	f000 b817 	b.w	800a5d4 <_write_r>

0800a5a6 <__sseek>:
 800a5a6:	b510      	push	{r4, lr}
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ae:	f000 f855 	bl	800a65c <_lseek_r>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	bf15      	itete	ne
 800a5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5c2:	81a3      	strheq	r3, [r4, #12]
 800a5c4:	bf18      	it	ne
 800a5c6:	81a3      	strhne	r3, [r4, #12]
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <__sclose>:
 800a5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ce:	f000 b813 	b.w	800a5f8 <_close_r>
	...

0800a5d4 <_write_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4c07      	ldr	r4, [pc, #28]	; (800a5f4 <_write_r+0x20>)
 800a5d8:	4605      	mov	r5, r0
 800a5da:	4608      	mov	r0, r1
 800a5dc:	4611      	mov	r1, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	6022      	str	r2, [r4, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f7f8 fb97 	bl	8002d16 <_write>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_write_r+0x1e>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_write_r+0x1e>
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20001d50 	.word	0x20001d50

0800a5f8 <_close_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4c06      	ldr	r4, [pc, #24]	; (800a614 <_close_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4605      	mov	r5, r0
 800a600:	4608      	mov	r0, r1
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	f7f8 fba3 	bl	8002d4e <_close>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_close_r+0x1a>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_close_r+0x1a>
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20001d50 	.word	0x20001d50

0800a618 <_fstat_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4c07      	ldr	r4, [pc, #28]	; (800a638 <_fstat_r+0x20>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4605      	mov	r5, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	f7f8 fb9e 	bl	8002d66 <_fstat>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d102      	bne.n	800a634 <_fstat_r+0x1c>
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	b103      	cbz	r3, 800a634 <_fstat_r+0x1c>
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	20001d50 	.word	0x20001d50

0800a63c <_isatty_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4c06      	ldr	r4, [pc, #24]	; (800a658 <_isatty_r+0x1c>)
 800a640:	2300      	movs	r3, #0
 800a642:	4605      	mov	r5, r0
 800a644:	4608      	mov	r0, r1
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	f7f8 fb9d 	bl	8002d86 <_isatty>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_isatty_r+0x1a>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	b103      	cbz	r3, 800a656 <_isatty_r+0x1a>
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20001d50 	.word	0x20001d50

0800a65c <_lseek_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4c07      	ldr	r4, [pc, #28]	; (800a67c <_lseek_r+0x20>)
 800a660:	4605      	mov	r5, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	6022      	str	r2, [r4, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f8 fb96 	bl	8002d9c <_lseek>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_lseek_r+0x1e>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	b103      	cbz	r3, 800a67a <_lseek_r+0x1e>
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20001d50 	.word	0x20001d50

0800a680 <__ascii_mbtowc>:
 800a680:	b082      	sub	sp, #8
 800a682:	b901      	cbnz	r1, 800a686 <__ascii_mbtowc+0x6>
 800a684:	a901      	add	r1, sp, #4
 800a686:	b142      	cbz	r2, 800a69a <__ascii_mbtowc+0x1a>
 800a688:	b14b      	cbz	r3, 800a69e <__ascii_mbtowc+0x1e>
 800a68a:	7813      	ldrb	r3, [r2, #0]
 800a68c:	600b      	str	r3, [r1, #0]
 800a68e:	7812      	ldrb	r2, [r2, #0]
 800a690:	1c10      	adds	r0, r2, #0
 800a692:	bf18      	it	ne
 800a694:	2001      	movne	r0, #1
 800a696:	b002      	add	sp, #8
 800a698:	4770      	bx	lr
 800a69a:	4610      	mov	r0, r2
 800a69c:	e7fb      	b.n	800a696 <__ascii_mbtowc+0x16>
 800a69e:	f06f 0001 	mvn.w	r0, #1
 800a6a2:	e7f8      	b.n	800a696 <__ascii_mbtowc+0x16>

0800a6a4 <memmove>:
 800a6a4:	4288      	cmp	r0, r1
 800a6a6:	b510      	push	{r4, lr}
 800a6a8:	eb01 0302 	add.w	r3, r1, r2
 800a6ac:	d807      	bhi.n	800a6be <memmove+0x1a>
 800a6ae:	1e42      	subs	r2, r0, #1
 800a6b0:	4299      	cmp	r1, r3
 800a6b2:	d00a      	beq.n	800a6ca <memmove+0x26>
 800a6b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a6bc:	e7f8      	b.n	800a6b0 <memmove+0xc>
 800a6be:	4283      	cmp	r3, r0
 800a6c0:	d9f5      	bls.n	800a6ae <memmove+0xa>
 800a6c2:	1881      	adds	r1, r0, r2
 800a6c4:	1ad2      	subs	r2, r2, r3
 800a6c6:	42d3      	cmn	r3, r2
 800a6c8:	d100      	bne.n	800a6cc <memmove+0x28>
 800a6ca:	bd10      	pop	{r4, pc}
 800a6cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a6d4:	e7f7      	b.n	800a6c6 <memmove+0x22>

0800a6d6 <__malloc_lock>:
 800a6d6:	4770      	bx	lr

0800a6d8 <__malloc_unlock>:
 800a6d8:	4770      	bx	lr

0800a6da <_realloc_r>:
 800a6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6dc:	4607      	mov	r7, r0
 800a6de:	4614      	mov	r4, r2
 800a6e0:	460e      	mov	r6, r1
 800a6e2:	b921      	cbnz	r1, 800a6ee <_realloc_r+0x14>
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6ea:	f7ff bc33 	b.w	8009f54 <_malloc_r>
 800a6ee:	b922      	cbnz	r2, 800a6fa <_realloc_r+0x20>
 800a6f0:	f7ff fbe2 	bl	8009eb8 <_free_r>
 800a6f4:	4625      	mov	r5, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fa:	f000 f834 	bl	800a766 <_malloc_usable_size_r>
 800a6fe:	42a0      	cmp	r0, r4
 800a700:	d20f      	bcs.n	800a722 <_realloc_r+0x48>
 800a702:	4621      	mov	r1, r4
 800a704:	4638      	mov	r0, r7
 800a706:	f7ff fc25 	bl	8009f54 <_malloc_r>
 800a70a:	4605      	mov	r5, r0
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d0f2      	beq.n	800a6f6 <_realloc_r+0x1c>
 800a710:	4631      	mov	r1, r6
 800a712:	4622      	mov	r2, r4
 800a714:	f7ff f8dc 	bl	80098d0 <memcpy>
 800a718:	4631      	mov	r1, r6
 800a71a:	4638      	mov	r0, r7
 800a71c:	f7ff fbcc 	bl	8009eb8 <_free_r>
 800a720:	e7e9      	b.n	800a6f6 <_realloc_r+0x1c>
 800a722:	4635      	mov	r5, r6
 800a724:	e7e7      	b.n	800a6f6 <_realloc_r+0x1c>
	...

0800a728 <_read_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4c07      	ldr	r4, [pc, #28]	; (800a748 <_read_r+0x20>)
 800a72c:	4605      	mov	r5, r0
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	2200      	movs	r2, #0
 800a734:	6022      	str	r2, [r4, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	f7f8 fad0 	bl	8002cdc <_read>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_read_r+0x1e>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	b103      	cbz	r3, 800a746 <_read_r+0x1e>
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	20001d50 	.word	0x20001d50

0800a74c <__ascii_wctomb>:
 800a74c:	b149      	cbz	r1, 800a762 <__ascii_wctomb+0x16>
 800a74e:	2aff      	cmp	r2, #255	; 0xff
 800a750:	bf85      	ittet	hi
 800a752:	238a      	movhi	r3, #138	; 0x8a
 800a754:	6003      	strhi	r3, [r0, #0]
 800a756:	700a      	strbls	r2, [r1, #0]
 800a758:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a75c:	bf98      	it	ls
 800a75e:	2001      	movls	r0, #1
 800a760:	4770      	bx	lr
 800a762:	4608      	mov	r0, r1
 800a764:	4770      	bx	lr

0800a766 <_malloc_usable_size_r>:
 800a766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76a:	1f18      	subs	r0, r3, #4
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	bfbc      	itt	lt
 800a770:	580b      	ldrlt	r3, [r1, r0]
 800a772:	18c0      	addlt	r0, r0, r3
 800a774:	4770      	bx	lr
	...

0800a778 <_init>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr

0800a784 <_fini>:
 800a784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a786:	bf00      	nop
 800a788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78a:	bc08      	pop	{r3}
 800a78c:	469e      	mov	lr, r3
 800a78e:	4770      	bx	lr


projet_3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e7c  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d4  080093d4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093dc  080093dc  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  20000208  080095ec  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  080095ec  00021580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0b8  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ba9  00000000  00000000  0003e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001868  00000000  00000000  00041ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  00043708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c53  00000000  00000000  00044d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ffa  00000000  00000000  0006a9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dff85  00000000  00000000  000809c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016094a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb0  00000000  00000000  001609c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008540 	.word	0x08008540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08008540 	.word	0x08008540

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
 8000584:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000586:	4b50      	ldr	r3, [pc, #320]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000588:	4a50      	ldr	r2, [pc, #320]	; (80006cc <MX_ADC1_Init+0x15c>)
 800058a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800058c:	4b4e      	ldr	r3, [pc, #312]	; (80006c8 <MX_ADC1_Init+0x158>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000592:	4b4d      	ldr	r3, [pc, #308]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <MX_ADC1_Init+0x158>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800059e:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005a4:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005aa:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80005b6:	4b44      	ldr	r3, [pc, #272]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005b8:	2206      	movs	r2, #6
 80005ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005bc:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80005c4:	4b40      	ldr	r3, [pc, #256]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005c6:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005cc:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d4:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005dc:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005de:	2200      	movs	r2, #0
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	4837      	ldr	r0, [pc, #220]	; (80006c8 <MX_ADC1_Init+0x158>)
 80005ec:	f001 fcd0 	bl	8001f90 <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80005f6:	f000 fd37 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <MX_ADC1_Init+0x160>)
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fe:	2306      	movs	r3, #6
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000602:	2302      	movs	r3, #2
 8000604:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000606:	237f      	movs	r3, #127	; 0x7f
 8000608:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060a:	2304      	movs	r3, #4
 800060c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	482c      	ldr	r0, [pc, #176]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000618:	f001 fe8e 	bl	8002338 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000622:	f000 fd21 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0x164>)
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062a:	230c      	movs	r3, #12
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4825      	ldr	r0, [pc, #148]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000634:	f001 fe80 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800063e:	f000 fd13 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_ADC1_Init+0x168>)
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000646:	2312      	movs	r3, #18
 8000648:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000650:	f001 fe72 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800065a:	f000 fd05 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_ADC1_Init+0x16c>)
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000662:	2318      	movs	r3, #24
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4816      	ldr	r0, [pc, #88]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000670:	f001 fe62 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800067a:	f000 fcf5 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_ADC1_Init+0x170>)
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000688:	2302      	movs	r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC1_Init+0x158>)
 8000692:	f001 fe51 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 800069c:	f000 fce4 	bl	8001068 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_ADC1_Init+0x174>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006a4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80006a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_ADC1_Init+0x158>)
 80006b0:	f001 fe42 	bl	8002338 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80006ba:	f000 fcd5 	bl	8001068 <Error_Handler>
  }

}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000648 	.word	0x20000648
 80006cc:	50040000 	.word	0x50040000
 80006d0:	21800100 	.word	0x21800100
 80006d4:	14f00020 	.word	0x14f00020
 80006d8:	19200040 	.word	0x19200040
 80006dc:	2e300800 	.word	0x2e300800
 80006e0:	32601000 	.word	0x32601000
 80006e4:	3ef08000 	.word	0x3ef08000

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <HAL_ADC_MspInit+0xfc>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d168      	bne.n	80007dc <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800070a:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a36      	ldr	r2, [pc, #216]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a30      	ldr	r2, [pc, #192]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <HAL_ADC_MspInit+0x100>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
 8000752:	23cb      	movs	r3, #203	; 0xcb
 8000754:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000756:	230b      	movs	r3, #11
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f003 f8ac 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000770:	230b      	movs	r3, #11
 8000772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <HAL_ADC_MspInit+0x104>)
 8000780:	f003 f8a0 	bl	80038c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000786:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <HAL_ADC_MspInit+0x10c>)
 8000788:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007c2:	f002 fe39 	bl	8003438 <HAL_DMA_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80007cc:	f000 fc4c 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_ADC_MspInit+0x108>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	50040000 	.word	0x50040000
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000400 	.word	0x48000400
 80007f0:	200006ac 	.word	0x200006ac
 80007f4:	40020008 	.word	0x40020008

080007f8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2224      	movs	r2, #36	; 0x24
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f006 ff4b 	bl	80076a0 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_DAC1_Init+0x74>)
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_DAC1_Init+0x78>)
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <MX_DAC1_Init+0x74>)
 8000812:	f002 fb6e 	bl	8002ef2 <HAL_DAC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800081c:	f000 fc24 	bl	8001068 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000824:	2304      	movs	r3, #4
 8000826:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_DAC1_Init+0x74>)
 800083c:	f002 fc58 	bl	80030f0 <HAL_DAC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 fc0f 	bl	8001068 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2210      	movs	r2, #16
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_DAC1_Init+0x74>)
 8000856:	f002 fc4b 	bl	80030f0 <HAL_DAC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000860:	f000 fc02 	bl	8001068 <Error_Handler>
  }

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200006f4 	.word	0x200006f4
 8000870:	40007400 	.word	0x40007400

08000874 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a41      	ldr	r2, [pc, #260]	; (8000998 <HAL_DAC_MspInit+0x124>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d17c      	bne.n	8000990 <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000896:	4b41      	ldr	r3, [pc, #260]	; (800099c <HAL_DAC_MspInit+0x128>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a40      	ldr	r2, [pc, #256]	; (800099c <HAL_DAC_MspInit+0x128>)
 800089c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b3e      	ldr	r3, [pc, #248]	; (800099c <HAL_DAC_MspInit+0x128>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b3b      	ldr	r3, [pc, #236]	; (800099c <HAL_DAC_MspInit+0x128>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a3a      	ldr	r2, [pc, #232]	; (800099c <HAL_DAC_MspInit+0x128>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <HAL_DAC_MspInit+0x128>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008c6:	2330      	movs	r3, #48	; 0x30
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f002 fff2 	bl	80038c4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 80008e2:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <HAL_DAC_MspInit+0x130>)
 80008e4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80008e6:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 80008e8:	2206      	movs	r2, #6
 80008ea:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 80008ee:	2210      	movs	r2, #16
 80008f0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 8000900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000904:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 8000908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 8000910:	2220      	movs	r2, #32
 8000912:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 8000916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 800091e:	f002 fd8b 	bl	8003438 <HAL_DMA_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000928:	f000 fb9e 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <HAL_DAC_MspInit+0x12c>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_DAC_MspInit+0x138>)
 800093c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000940:	2205      	movs	r2, #5
 8000942:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000946:	2210      	movs	r2, #16
 8000948:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000964:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000968:	2220      	movs	r2, #32
 800096a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000976:	f002 fd5f 	bl	8003438 <HAL_DMA_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 8000980:	f000 fb72 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_DAC_MspInit+0x134>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40007400 	.word	0x40007400
 800099c:	40021000 	.word	0x40021000
 80009a0:	20000708 	.word	0x20000708
 80009a4:	40020030 	.word	0x40020030
 80009a8:	20000750 	.word	0x20000750
 80009ac:	40020044 	.word	0x40020044

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_DMA_Init+0x68>)
 80009b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <MX_DMA_Init+0x68>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6493      	str	r3, [r2, #72]	; 0x48
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_DMA_Init+0x68>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	200b      	movs	r0, #11
 80009d4:	f002 fa57 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d8:	200b      	movs	r0, #11
 80009da:	f002 fa70 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	200d      	movs	r0, #13
 80009e4:	f002 fa4f 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009e8:	200d      	movs	r0, #13
 80009ea:	f002 fa68 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	200e      	movs	r0, #14
 80009f4:	f002 fa47 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009f8:	200e      	movs	r0, #14
 80009fa:	f002 fa60 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2010      	movs	r0, #16
 8000a04:	f002 fa3f 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a08:	2010      	movs	r0, #16
 8000a0a:	f002 fa58 	bl	8002ebe <HAL_NVIC_EnableIRQ>

}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a37      	ldr	r2, [pc, #220]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a31      	ldr	r2, [pc, #196]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xf8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4826      	ldr	r0, [pc, #152]	; (8000b18 <MX_GPIO_Init+0xfc>)
 8000a80:	f003 f8a2 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_GPIO_Init+0x100>)
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	4820      	ldr	r0, [pc, #128]	; (8000b18 <MX_GPIO_Init+0xfc>)
 8000a98:	f002 ff14 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_SWITCH_Pin;
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_GPIO_Init+0x104>)
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f002 ff06 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_GPIO_Init+0xfc>)
 8000ad0:	f002 fef8 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_CH_A_Pin;
 8000ad4:	2340      	movs	r3, #64	; 0x40
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_CH_A_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_GPIO_Init+0xfc>)
 8000ae8:	f002 feec 	bl	80038c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2007      	movs	r0, #7
 8000af2:	f002 f9c8 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f002 f9e1 	bl	8002ebe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	2017      	movs	r0, #23
 8000b02:	f002 f9c0 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b06:	2017      	movs	r0, #23
 8000b08:	f002 f9d9 	bl	8002ebe <HAL_NVIC_EnableIRQ>

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	10210000 	.word	0x10210000
 8000b20:	10110000 	.word	0x10110000

08000b24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <MX_I2C1_Init+0x80>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <MX_I2C1_Init+0x84>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5e:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b60:	f003 f862 	bl	8003c28 <HAL_I2C_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b6a:	f000 fa7d 	bl	8001068 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b72:	f004 fd67 	bl	8005644 <HAL_I2CEx_ConfigAnalogFilter>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b7c:	f000 fa74 	bl	8001068 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x7c>)
 8000b84:	f004 fda9 	bl	80056da <HAL_I2CEx_ConfigDigitalFilter>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 fa6b 	bl	8001068 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000b92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b96:	f004 fded 	bl	8005774 <HAL_I2CEx_EnableFastModePlus>

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200007e0 	.word	0x200007e0
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	00300f33 	.word	0x00300f33

08000bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <HAL_I2C_MspInit+0xe4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d15b      	bne.n	8000c86 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <HAL_I2C_MspInit+0xe8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a30      	ldr	r2, [pc, #192]	; (8000c94 <HAL_I2C_MspInit+0xe8>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <HAL_I2C_MspInit+0xe8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f002 fe5d 	bl	80038c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_I2C_MspInit+0xe8>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_I2C_MspInit+0xe8>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_I2C_MspInit+0xe8>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_I2C_MspInit+0xf0>)
 8000c26:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c30:	2210      	movs	r2, #16
 8000c32:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c5c:	f002 fbec 	bl	8003438 <HAL_DMA_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_MspInit+0xbe>
    {
      Error_Handler();
 8000c66:	f000 f9ff 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_I2C_MspInit+0xec>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	201f      	movs	r0, #31
 8000c7c:	f002 f903 	bl	8002e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c80:	201f      	movs	r0, #31
 8000c82:	f002 f91c 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	20000798 	.word	0x20000798
 8000c9c:	4002006c 	.word	0x4002006c

08000ca0 <processDSP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processDSP(){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
	__NOP();
 8000ca6:	bf00      	nop
	//For DAC 1 (from IN_L)
	for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	e00f      	b.n	8000cce <processDSP+0x2e>
		//out_buffer_1_ptr[i] = in_buffer_ptr[6*i+4];
		out_buffer_1_ptr[i] = in_buffer_ptr[i];
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <processDSP+0x74>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	441a      	add	r2, r3
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <processDSP+0x78>)
 8000cba:	6819      	ldr	r1, [r3, #0]
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	440b      	add	r3, r1
 8000cc2:	8812      	ldrh	r2, [r2, #0]
 8000cc4:	b292      	uxth	r2, r2
 8000cc6:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	80fb      	strh	r3, [r7, #6]
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	2b64      	cmp	r3, #100	; 0x64
 8000cd2:	d1ec      	bne.n	8000cae <processDSP+0xe>
	}

	//For DAC 2 (from IN_R)
	for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	80bb      	strh	r3, [r7, #4]
 8000cd8:	e012      	b.n	8000d00 <processDSP+0x60>
		out_buffer_2_ptr[i] = in_buffer_ptr[6*i];
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <processDSP+0x74>)
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	88ba      	ldrh	r2, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	18ca      	adds	r2, r1, r3
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <processDSP+0x7c>)
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	440b      	add	r3, r1
 8000cf4:	8812      	ldrh	r2, [r2, #0]
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i!= SAMPLES_LENGTH/2; i++){
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	80bb      	strh	r3, [r7, #4]
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d1e9      	bne.n	8000cda <processDSP+0x3a>
		//out_buffer_2_ptr[i] = in_buffer_ptr[i];
	}
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000228 	.word	0x20000228
 8000d18:	2000022c 	.word	0x2000022c
 8000d1c:	20000230 	.word	0x20000230

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fed4 	bl	8001ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f867 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f7ff fe75 	bl	8000a1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d32:	f7ff fe3d 	bl	80009b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d36:	f000 fe1f 	bl	8001978 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d3a:	f7ff fef3 	bl	8000b24 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d3e:	f7ff fc17 	bl	8000570 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d42:	f7ff fd59 	bl	80007f8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000d46:	f000 fdc1 	bl	80018cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <main+0xac>)
 8000d4c:	f005 ff14 	bl	8006b78 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1 , (uint32_t *) adc_buffer, ADC_BUFFER_SIZE);
 8000d50:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000d54:	491e      	ldr	r1, [pc, #120]	; (8000dd0 <main+0xb0>)
 8000d56:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <main+0xb4>)
 8000d58:	f001 fa60 	bl	800221c <HAL_ADC_Start_DMA>
//  HAL_Delay(1);
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1 , (uint32_t *) dac_buffer_1, DAC_BUFFER_1_SIZE, DAC_ALIGN_12B_R);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	23c8      	movs	r3, #200	; 0xc8
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <main+0xb8>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <main+0xbc>)
 8000d68:	f002 f8e6 	bl	8002f38 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2 , (uint32_t *) dac_buffer_2, DAC_BUFFER_2_SIZE, DAC_ALIGN_12B_R);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	23c8      	movs	r3, #200	; 0xc8
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <main+0xc0>)
 8000d74:	2110      	movs	r1, #16
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <main+0xbc>)
 8000d78:	f002 f8de 	bl	8002f38 <HAL_DAC_Start_DMA>
  printf("oh, un gens\r\n");
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <main+0xc4>)
 8000d7e:	f006 fd0b 	bl	8007798 <puts>


  uint8_t init = SSD1306_Init();
 8000d82:	f000 f975 	bl	8001070 <SSD1306_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
    printf("Inialisation : %d\r\n", init);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <main+0xc8>)
 8000d90:	f006 fc8e 	bl	80076b0 <iprintf>
    if(init != 1){
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d002      	beq.n	8000da0 <main+0x80>
  	  printf("ERROR INIT");
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <main+0xcc>)
 8000d9c:	f006 fc88 	bl	80076b0 <iprintf>
  	  //while(1);
    }

    SSD1306_GotoXY(38, 23);
 8000da0:	2117      	movs	r1, #23
 8000da2:	2026      	movs	r0, #38	; 0x26
 8000da4:	f000 fad8 	bl	8001358 <SSD1306_GotoXY>
	SSD1306_Puts(" MENi ", &Font_11x18, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	4911      	ldr	r1, [pc, #68]	; (8000df0 <main+0xd0>)
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <main+0xd4>)
 8000dae:	f000 fb69 	bl	8001484 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000db2:	f000 fa21 	bl	80011f8 <SSD1306_UpdateScreen>
	  //printf("%ld %ld %ld\r\n", value[0],value[1],value[2]);

		  /*for (int i=0; i!= 512;i++){
			  printf("%u\r\n", adc_buffer[6*i+1]);
		  }*/
	  if(start_dsp){
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <main+0xd8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <main+0xa8>
		  start_dsp = 0;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <main+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
		  processDSP();
 8000dc4:	f7ff ff6c 	bl	8000ca0 <processDSP>
	  }
	  __NOP();
 8000dc8:	bf00      	nop
	  if(start_dsp){
 8000dca:	e7f4      	b.n	8000db6 <main+0x96>
 8000dcc:	200014ac 	.word	0x200014ac
 8000dd0:	20000b4c 	.word	0x20000b4c
 8000dd4:	20000648 	.word	0x20000648
 8000dd8:	2000082c 	.word	0x2000082c
 8000ddc:	200006f4 	.word	0x200006f4
 8000de0:	200009bc 	.word	0x200009bc
 8000de4:	08008558 	.word	0x08008558
 8000de8:	08008568 	.word	0x08008568
 8000dec:	0800857c 	.word	0x0800857c
 8000df0:	20000000 	.word	0x20000000
 8000df4:	08008588 	.word	0x08008588
 8000df8:	20000224 	.word	0x20000224

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ac      	sub	sp, #176	; 0xb0
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e06:	2244      	movs	r2, #68	; 0x44
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 fc48 	bl	80076a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2254      	movs	r2, #84	; 0x54
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 fc3a 	bl	80076a0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e2c:	f004 fcc2 	bl	80057b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <SystemClock_Config+0x128>)
 8000e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e36:	4a3b      	ldr	r2, [pc, #236]	; (8000f24 <SystemClock_Config+0x128>)
 8000e38:	f023 0318 	bic.w	r3, r3, #24
 8000e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e40:	2314      	movs	r3, #20
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e44:	2301      	movs	r3, #1
 8000e46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e54:	2360      	movs	r3, #96	; 0x60
 8000e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e6c:	2328      	movs	r3, #40	; 0x28
 8000e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e72:	2307      	movs	r3, #7
 8000e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fd07 	bl	800589c <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e94:	f000 f8e8 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 f912 	bl	80060dc <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 f8d3 	bl	8001068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000ec2:	f244 0342 	movw	r3, #16450	; 0x4042
 8000ec6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ef2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 faf4 	bl	80064e4 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000f02:	f000 f8b1 	bl	8001068 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f0a:	f004 fc71 	bl	80057f0 <HAL_PWREx_ControlVoltageScaling>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000f14:	f000 f8a8 	bl	8001068 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f18:	f005 fcd6 	bl	80068c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f1c:	bf00      	nop
 8000f1e:	37b0      	adds	r7, #176	; 0xb0
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f30:	bf00      	nop
	//First half ot the buffer is full
	//in_buffer_ptr =  &adc_buffer[0];
	in_buffer_ptr =  &sin_wave[0];
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000f36:	601a      	str	r2, [r3, #0]
	out_buffer_1_ptr = &dac_buffer_1[DAC_BUFFER_1_HALF_SIZE];
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000f3c:	601a      	str	r2, [r3, #0]
	out_buffer_2_ptr = &dac_buffer_2[DAC_BUFFER_2_HALF_SIZE];
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000f42:	601a      	str	r2, [r3, #0]
	start_dsp = 1;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000228 	.word	0x20000228
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	2000022c 	.word	0x2000022c
 8000f64:	200008f4 	.word	0x200008f4
 8000f68:	20000230 	.word	0x20000230
 8000f6c:	20000a84 	.word	0x20000a84
 8000f70:	20000224 	.word	0x20000224

08000f74 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f7c:	bf00      	nop
	//The buffer is now full
	//in_buffer_ptr = &adc_buffer[ADC_BUFFER_HALF_SIZE];
	in_buffer_ptr = &sin_wave[100];
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000f82:	601a      	str	r2, [r3, #0]
	out_buffer_1_ptr = &dac_buffer_1[0];
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_ADC_ConvCpltCallback+0x38>)
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000f88:	601a      	str	r2, [r3, #0]
	out_buffer_2_ptr = &dac_buffer_2[0];
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x40>)
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000f8e:	601a      	str	r2, [r3, #0]
	start_dsp = 1;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x48>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000228 	.word	0x20000228
 8000fa8:	200000d0 	.word	0x200000d0
 8000fac:	2000022c 	.word	0x2000022c
 8000fb0:	2000082c 	.word	0x2000082c
 8000fb4:	20000230 	.word	0x20000230
 8000fb8:	200009bc 	.word	0x200009bc
 8000fbc:	20000224 	.word	0x20000224

08000fc0 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef* hi2c){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	__NOP();
 8000fc8:	bf00      	nop
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c){
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	__NOP();
 8000fde:	bf00      	nop
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef* hi2c){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	__NOP();
 8000ff4:	bf00      	nop
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	//Pour le switch
	if(GPIO_Pin == KNOB_SWITCH_Pin){
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001014:	d101      	bne.n	800101a <HAL_GPIO_EXTI_Callback+0x16>
		//On a appuyé sur le bouton
		__NOP();
 8001016:	bf00      	nop
 8001018:	e000      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x18>
	}else{
		__NOP();
 800101a:	bf00      	nop
	}
	//Pour gérer la roue codeuse
	if(GPIO_Pin == GPIO_PIN_1){
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d119      	bne.n	8001056 <HAL_GPIO_EXTI_Callback+0x52>
		//Gestion de l'interruption
		if(HAL_GPIO_ReadPin(KNOB_CH_A_GPIO_Port, KNOB_CH_A_Pin)){
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001026:	f002 fdb7 	bl	8003b98 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <HAL_GPIO_EXTI_Callback+0x40>
			counter++;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_GPIO_EXTI_Callback+0x60>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	b29b      	uxth	r3, r3
 8001038:	3301      	adds	r3, #1
 800103a:	b29b      	uxth	r3, r3
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_GPIO_EXTI_Callback+0x60>)
 8001040:	801a      	strh	r2, [r3, #0]
		}else{
			counter--;
		}
	}
}
 8001042:	e008      	b.n	8001056 <HAL_GPIO_EXTI_Callback+0x52>
			counter--;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_GPIO_EXTI_Callback+0x60>)
 8001046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104a:	b29b      	uxth	r3, r3
 800104c:	3b01      	subs	r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_GPIO_EXTI_Callback+0x60>)
 8001054:	801a      	strh	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	48000400 	.word	0x48000400
 8001064:	20000226 	.word	0x20000226

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106e:	e7fe      	b.n	800106e <Error_Handler+0x6>

08001070 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	/* Init I2C */
	ssd1306_I2C_Init();
 8001076:	f000 fa2b 	bl	80014d0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 800107a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800107e:	2201      	movs	r2, #1
 8001080:	2178      	movs	r1, #120	; 0x78
 8001082:	485b      	ldr	r0, [pc, #364]	; (80011f0 <SSD1306_Init+0x180>)
 8001084:	f002 ff50 	bl	8003f28 <HAL_I2C_IsDeviceReady>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SSD1306_Init+0x22>
	{
		/* Return false */
		return 0;
 800108e:	2300      	movs	r3, #0
 8001090:	e0a9      	b.n	80011e6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001092:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001096:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001098:	e002      	b.n	80010a0 <SSD1306_Init+0x30>
		p--;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3b01      	subs	r3, #1
 800109e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010a6:	22ae      	movs	r2, #174	; 0xae
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 fa70 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 fa6b 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010ba:	2210      	movs	r2, #16
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 fa66 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010c4:	22b0      	movs	r2, #176	; 0xb0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 fa61 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ce:	22c8      	movs	r2, #200	; 0xc8
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 fa5c 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2078      	movs	r0, #120	; 0x78
 80010de:	f000 fa57 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010e2:	2210      	movs	r2, #16
 80010e4:	2100      	movs	r1, #0
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f000 fa52 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	2100      	movs	r1, #0
 80010f0:	2078      	movs	r0, #120	; 0x78
 80010f2:	f000 fa4d 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010f6:	2281      	movs	r2, #129	; 0x81
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fa48 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	2100      	movs	r1, #0
 8001104:	2078      	movs	r0, #120	; 0x78
 8001106:	f000 fa43 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800110a:	22a1      	movs	r2, #161	; 0xa1
 800110c:	2100      	movs	r1, #0
 800110e:	2078      	movs	r0, #120	; 0x78
 8001110:	f000 fa3e 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001114:	22a6      	movs	r2, #166	; 0xa6
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	; 0x78
 800111a:	f000 fa39 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800111e:	22a8      	movs	r2, #168	; 0xa8
 8001120:	2100      	movs	r1, #0
 8001122:	2078      	movs	r0, #120	; 0x78
 8001124:	f000 fa34 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	2100      	movs	r1, #0
 800112c:	2078      	movs	r0, #120	; 0x78
 800112e:	f000 fa2f 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001132:	22a4      	movs	r2, #164	; 0xa4
 8001134:	2100      	movs	r1, #0
 8001136:	2078      	movs	r0, #120	; 0x78
 8001138:	f000 fa2a 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800113c:	22d3      	movs	r2, #211	; 0xd3
 800113e:	2100      	movs	r1, #0
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 fa25 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2078      	movs	r0, #120	; 0x78
 800114c:	f000 fa20 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001150:	22d5      	movs	r2, #213	; 0xd5
 8001152:	2100      	movs	r1, #0
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f000 fa1b 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800115a:	22f0      	movs	r2, #240	; 0xf0
 800115c:	2100      	movs	r1, #0
 800115e:	2078      	movs	r0, #120	; 0x78
 8001160:	f000 fa16 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001164:	22d9      	movs	r2, #217	; 0xd9
 8001166:	2100      	movs	r1, #0
 8001168:	2078      	movs	r0, #120	; 0x78
 800116a:	f000 fa11 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800116e:	2222      	movs	r2, #34	; 0x22
 8001170:	2100      	movs	r1, #0
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f000 fa0c 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001178:	22da      	movs	r2, #218	; 0xda
 800117a:	2100      	movs	r1, #0
 800117c:	2078      	movs	r0, #120	; 0x78
 800117e:	f000 fa07 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001182:	2212      	movs	r2, #18
 8001184:	2100      	movs	r1, #0
 8001186:	2078      	movs	r0, #120	; 0x78
 8001188:	f000 fa02 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800118c:	22db      	movs	r2, #219	; 0xdb
 800118e:	2100      	movs	r1, #0
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 f9fd 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001196:	2220      	movs	r2, #32
 8001198:	2100      	movs	r1, #0
 800119a:	2078      	movs	r0, #120	; 0x78
 800119c:	f000 f9f8 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011a0:	228d      	movs	r2, #141	; 0x8d
 80011a2:	2100      	movs	r1, #0
 80011a4:	2078      	movs	r0, #120	; 0x78
 80011a6:	f000 f9f3 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011aa:	2214      	movs	r2, #20
 80011ac:	2100      	movs	r1, #0
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	f000 f9ee 	bl	8001590 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011b4:	22af      	movs	r2, #175	; 0xaf
 80011b6:	2100      	movs	r1, #0
 80011b8:	2078      	movs	r0, #120	; 0x78
 80011ba:	f000 f9e9 	bl	8001590 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011be:	222e      	movs	r2, #46	; 0x2e
 80011c0:	2100      	movs	r1, #0
 80011c2:	2078      	movs	r0, #120	; 0x78
 80011c4:	f000 f9e4 	bl	8001590 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 f84d 	bl	8001268 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80011ce:	f000 f813 	bl	80011f8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SSD1306_Init+0x184>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SSD1306_Init+0x184>)
 80011da:	2200      	movs	r2, #0
 80011dc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SSD1306_Init+0x184>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200007e0 	.word	0x200007e0
 80011f4:	20000634 	.word	0x20000634

080011f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint8_t m;
	uint8_t start_frame[] = {0x00,0xB0,0x00,0x00,0x00,0x10};
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <SSD1306_UpdateScreen+0x64>)
 8001200:	463b      	mov	r3, r7
 8001202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001206:	6018      	str	r0, [r3, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	8019      	strh	r1, [r3, #0]
	
	for (m = 0; m < 8; m++) {
 800120c:	2300      	movs	r3, #0
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	e01c      	b.n	800124c <SSD1306_UpdateScreen+0x54>
		start_frame[1] = 0xB0 + m;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	3b50      	subs	r3, #80	; 0x50
 8001216:	b2db      	uxtb	r3, r3
 8001218:	707b      	strb	r3, [r7, #1]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800121a:	bf00      	nop
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <SSD1306_UpdateScreen+0x68>)
 800121e:	f002 ffee 	bl	80041fe <HAL_I2C_GetState>
 8001222:	4603      	mov	r3, r0
 8001224:	2b20      	cmp	r3, #32
 8001226:	d1f9      	bne.n	800121c <SSD1306_UpdateScreen+0x24>
		HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDR, start_frame, 6);
 8001228:	463a      	mov	r2, r7
 800122a:	2306      	movs	r3, #6
 800122c:	2178      	movs	r1, #120	; 0x78
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <SSD1306_UpdateScreen+0x68>)
 8001230:	f002 fd8a 	bl	8003d48 <HAL_I2C_Master_Transmit_DMA>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SSD1306_UpdateScreen+0x6c>)
 800123a:	441a      	add	r2, r3
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	2078      	movs	r0, #120	; 0x78
 8001242:	f000 f959 	bl	80014f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	3301      	adds	r3, #1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b07      	cmp	r3, #7
 8001250:	d9df      	bls.n	8001212 <SSD1306_UpdateScreen+0x1a>

	}
	/*HAL_I2C_Master_Transmit_DMA(&hi2c1, SSD1306_I2C_ADDR, start_frame, 6);
	ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[0], 2*SSD1306_WIDTH);*/

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	08008590 	.word	0x08008590
 8001260:	200007e0 	.word	0x200007e0
 8001264:	20000234 	.word	0x20000234

08001268 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <SSD1306_Fill+0x14>
 8001278:	2300      	movs	r3, #0
 800127a:	e000      	b.n	800127e <SSD1306_Fill+0x16>
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	4619      	mov	r1, r3
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <SSD1306_Fill+0x2c>)
 8001286:	f006 fa0b 	bl	80076a0 <memset>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000234 	.word	0x20000234

08001298 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	460b      	mov	r3, r1
 80012a4:	80bb      	strh	r3, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	70fb      	strb	r3, [r7, #3]
	if (
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b7f      	cmp	r3, #127	; 0x7f
 80012ae:	d848      	bhi.n	8001342 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	2b3f      	cmp	r3, #63	; 0x3f
 80012b4:	d845      	bhi.n	8001342 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <SSD1306_DrawPixel+0xb8>)
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d11a      	bne.n	8001308 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012d2:	88fa      	ldrh	r2, [r7, #6]
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	b298      	uxth	r0, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	01db      	lsls	r3, r3, #7
 80012de:	4413      	add	r3, r2
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <SSD1306_DrawPixel+0xbc>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b259      	sxtb	r1, r3
 80012f8:	88fa      	ldrh	r2, [r7, #6]
 80012fa:	4603      	mov	r3, r0
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	4413      	add	r3, r2
 8001300:	b2c9      	uxtb	r1, r1
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <SSD1306_DrawPixel+0xbc>)
 8001304:	54d1      	strb	r1, [r2, r3]
 8001306:	e01d      	b.n	8001344 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	b298      	uxth	r0, r3
 8001310:	4603      	mov	r3, r0
 8001312:	01db      	lsls	r3, r3, #7
 8001314:	4413      	add	r3, r2
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <SSD1306_DrawPixel+0xbc>)
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	b25a      	sxtb	r2, r3
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	b25b      	sxtb	r3, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4013      	ands	r3, r2
 8001330:	b259      	sxtb	r1, r3
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	4603      	mov	r3, r0
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4413      	add	r3, r2
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SSD1306_DrawPixel+0xbc>)
 800133e:	54d1      	strb	r1, [r2, r3]
 8001340:	e000      	b.n	8001344 <SSD1306_DrawPixel+0xac>
		return;
 8001342:	bf00      	nop
	}
}
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000634 	.word	0x20000634
 8001354:	20000234 	.word	0x20000234

08001358 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	4613      	mov	r3, r2
 8001366:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SSD1306_GotoXY+0x28>)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <SSD1306_GotoXY+0x28>)
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	8053      	strh	r3, [r2, #2]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000634 	.word	0x20000634

08001384 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001394:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <SSD1306_Putc+0xfc>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
	if (
 80013a0:	2b7f      	cmp	r3, #127	; 0x7f
 80013a2:	dc07      	bgt.n	80013b4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <SSD1306_Putc+0xfc>)
 80013a6:	885b      	ldrh	r3, [r3, #2]
 80013a8:	461a      	mov	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	785b      	ldrb	r3, [r3, #1]
 80013ae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013b0:	2b3f      	cmp	r3, #63	; 0x3f
 80013b2:	dd01      	ble.n	80013b8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e05e      	b.n	8001476 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e04b      	b.n	8001456 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	3b20      	subs	r3, #32
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	7849      	ldrb	r1, [r1, #1]
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	440b      	add	r3, r1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	e030      	b.n	8001444 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d010      	beq.n	8001414 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <SSD1306_Putc+0xfc>)
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	b298      	uxth	r0, r3
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <SSD1306_Putc+0xfc>)
 8001400:	885a      	ldrh	r2, [r3, #2]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff ff43 	bl	8001298 <SSD1306_DrawPixel>
 8001412:	e014      	b.n	800143e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <SSD1306_Putc+0xfc>)
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b298      	uxth	r0, r3
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <SSD1306_Putc+0xfc>)
 8001422:	885a      	ldrh	r2, [r3, #2]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b299      	uxth	r1, r3
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	2b00      	cmp	r3, #0
 8001430:	bf0c      	ite	eq
 8001432:	2301      	moveq	r3, #1
 8001434:	2300      	movne	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f7ff ff2d 	bl	8001298 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3301      	adds	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4293      	cmp	r3, r2
 800144e:	d3c8      	bcc.n	80013e2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	461a      	mov	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4293      	cmp	r3, r2
 8001460:	d3ad      	bcc.n	80013be <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <SSD1306_Putc+0xfc>)
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <SSD1306_Putc+0xfc>)
 8001472:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001474:	79fb      	ldrb	r3, [r7, #7]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000634 	.word	0x20000634

08001484 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	4613      	mov	r3, r2
 8001490:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001492:	e012      	b.n	80014ba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff71 	bl	8001384 <SSD1306_Putc>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d002      	beq.n	80014b4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e008      	b.n	80014c6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e8      	bne.n	8001494 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <ssd1306_I2C_Init>:
// |_____|____|\_____|  //
//                      //
//////////////////////////

void ssd1306_I2C_Init()
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <ssd1306_I2C_Init+0x24>)
 80014d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014da:	e002      	b.n	80014e2 <ssd1306_I2C_Init+0x12>
		p--;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f9      	bne.n	80014dc <ssd1306_I2C_Init+0xc>
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	0003d090 	.word	0x0003d090

080014f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b0c5      	sub	sp, #276	; 0x114
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4639      	mov	r1, r7
 8001504:	600a      	str	r2, [r1, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	4622      	mov	r2, r4
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	1dbb      	adds	r3, r7, #6
 8001510:	4602      	mov	r2, r0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	460a      	mov	r2, r1
 8001518:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	1dba      	adds	r2, r7, #6
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	for(i = 0; i < count; i++){
 8001524:	2300      	movs	r3, #0
 8001526:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800152a:	e010      	b.n	800154e <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 800152c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001530:	463a      	mov	r2, r7
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	441a      	add	r2, r3
 8001536:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800153a:	3301      	adds	r3, #1
 800153c:	7811      	ldrb	r1, [r2, #0]
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++){
 8001544:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001548:	3301      	adds	r3, #1
 800154a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d3e8      	bcc.n	800152c <ssd1306_I2C_WriteMulti+0x34>
	}

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800155a:	bf00      	nop
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <ssd1306_I2C_WriteMulti+0x94>)
 800155e:	f002 fe4e 	bl	80041fe <HAL_I2C_GetState>
 8001562:	4603      	mov	r3, r0
 8001564:	2b20      	cmp	r3, #32
 8001566:	d1f9      	bne.n	800155c <ssd1306_I2C_WriteMulti+0x64>
	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b299      	uxth	r1, r3
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	b29b      	uxth	r3, r3
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <ssd1306_I2C_WriteMulti+0x94>)
 800157c:	f002 fbe4 	bl	8003d48 <HAL_I2C_Master_Transmit_DMA>
}
 8001580:	bf00      	nop
 8001582:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	200007e0 	.word	0x200007e0

08001590 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	460b      	mov	r3, r1
 800159c:	71bb      	strb	r3, [r7, #6]
 800159e:	4613      	mov	r3, r2
 80015a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015a6:	797b      	ldrb	r3, [r7, #5]
 80015a8:	737b      	strb	r3, [r7, #13]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80015aa:	bf00      	nop
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <ssd1306_I2C_Write+0x40>)
 80015ae:	f002 fe26 	bl	80041fe <HAL_I2C_GetState>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	d1f9      	bne.n	80015ac <ssd1306_I2C_Write+0x1c>
	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	b299      	uxth	r1, r3
 80015bc:	f107 020c 	add.w	r2, r7, #12
 80015c0:	2302      	movs	r3, #2
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <ssd1306_I2C_Write+0x40>)
 80015c4:	f002 fbc0 	bl	8003d48 <HAL_I2C_Master_Transmit_DMA>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200007e0 	.word	0x200007e0

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_MspInit+0x44>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_MspInit+0x44>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6613      	str	r3, [r2, #96]	; 0x60
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_MspInit+0x44>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_MspInit+0x44>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_MspInit+0x44>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_MspInit+0x44>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <__io_putchar+0x20>)
 800162e:	f005 fc07 	bl	8006e40 <HAL_UART_Transmit>

  return ch;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200014f8 	.word	0x200014f8

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 fa76 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001698:	2002      	movs	r0, #2
 800169a:	f002 faad 	bl	8003bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel1_IRQHandler+0x10>)
 80016aa:	f002 f81e 	bl	80036ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200006ac 	.word	0x200006ac

080016b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel3_IRQHandler+0x10>)
 80016be:	f002 f814 	bl	80036ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000708 	.word	0x20000708

080016cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA1_Channel4_IRQHandler+0x10>)
 80016d2:	f002 f80a 	bl	80036ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000750 	.word	0x20000750

080016e0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Channel6_IRQHandler+0x10>)
 80016e6:	f002 f800 	bl	80036ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000798 	.word	0x20000798

080016f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80016f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016fc:	f002 fa7c 	bl	8003bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <I2C1_EV_IRQHandler+0x10>)
 800170a:	f002 fd14 	bl	8004136 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200007e0 	.word	0x200007e0

08001718 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e00a      	b.n	8001740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172a:	f3af 8000 	nop.w
 800172e:	4601      	mov	r1, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf0      	blt.n	800172a <_read+0x12>
	}

return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff55 	bl	800161c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf1      	blt.n	8001764 <_write+0x12>
	}
	return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f005 ff12 	bl	800764c <__errno>
 8001828:	4602      	mov	r2, r0
 800182a:	230c      	movs	r3, #12
 800182c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20010000 	.word	0x20010000
 8001854:	00000400 	.word	0x00000400
 8001858:	2000063c 	.word	0x2000063c
 800185c:	20001580 	.word	0x20001580

08001860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <SystemInit+0x64>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <SystemInit+0x64>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <SystemInit+0x68>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <SystemInit+0x68>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <SystemInit+0x68>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <SystemInit+0x68>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <SystemInit+0x68>)
 800188c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001890:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001894:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <SystemInit+0x68>)
 8001898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800189c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <SystemInit+0x68>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <SystemInit+0x68>)
 80018a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <SystemInit+0x68>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SystemInit+0x64>)
 80018b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b6:	609a      	str	r2, [r3, #8]
#endif
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	40021000 	.word	0x40021000

080018cc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_TIM6_Init+0x64>)
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <MX_TIM6_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_TIM6_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_TIM6_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1817;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_TIM6_Init+0x64>)
 80018f0:	f240 7219 	movw	r2, #1817	; 0x719
 80018f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_TIM6_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <MX_TIM6_Init+0x64>)
 80018fe:	f005 f8e3 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001908:	f7ff fbae 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800190c:	2320      	movs	r3, #32
 800190e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_TIM6_Init+0x64>)
 800191a:	f005 f9dd 	bl	8006cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001924:	f7ff fba0 	bl	8001068 <Error_Handler>
  }

}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200014ac 	.word	0x200014ac
 8001934:	40001000 	.word	0x40001000

08001938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_TIM_Base_MspInit+0x38>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10b      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40001000 	.word	0x40001000
 8001974:	40021000 	.word	0x40021000

08001978 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <MX_USART2_UART_Init+0x5c>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019bc:	f005 f9f2 	bl	8006da4 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c6:	f7ff fb4f 	bl	8001068 <Error_Handler>
  }

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200014f8 	.word	0x200014f8
 80019d4:	40004400 	.word	0x40004400

080019d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_UART_MspInit+0xa0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d13a      	bne.n	8001a70 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_UART_MspInit+0xa4>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_UART_MspInit+0xa4>)
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_UART_MspInit+0xa4>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_UART_MspInit+0xa4>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_UART_MspInit+0xa4>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_UART_MspInit+0xa4>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f001 ff3c 	bl	80038c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6c:	f001 ff2a 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40004400 	.word	0x40004400
 8001a7c:	40021000 	.word	0x40021000

08001a80 <Reset_Handler>:
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopForever+0x2>
 8001a84:	f7ff feec 	bl	8001860 <SystemInit>
 8001a88:	2100      	movs	r1, #0
 8001a8a:	e003      	b.n	8001a94 <LoopCopyDataInit>

08001a8c <CopyDataInit>:
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <LoopForever+0x6>)
 8001a8e:	585b      	ldr	r3, [r3, r1]
 8001a90:	5043      	str	r3, [r0, r1]
 8001a92:	3104      	adds	r1, #4

08001a94 <LoopCopyDataInit>:
 8001a94:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <LoopForever+0xa>)
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <LoopForever+0xe>)
 8001a98:	1842      	adds	r2, r0, r1
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3f6      	bcc.n	8001a8c <CopyDataInit>
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopForever+0x12>)
 8001aa0:	e002      	b.n	8001aa8 <LoopFillZerobss>

08001aa2 <FillZerobss>:
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f842 3b04 	str.w	r3, [r2], #4

08001aa8 <LoopFillZerobss>:
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <LoopForever+0x16>)
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3f9      	bcc.n	8001aa2 <FillZerobss>
 8001aae:	f005 fdd3 	bl	8007658 <__libc_init_array>
 8001ab2:	f7ff f935 	bl	8000d20 <main>

08001ab6 <LoopForever>:
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
 8001ab8:	20010000 	.word	0x20010000
 8001abc:	080093e4 	.word	0x080093e4
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000208 	.word	0x20000208
 8001ac8:	20000208 	.word	0x20000208
 8001acc:	20001580 	.word	0x20001580

08001ad0 <ADC1_IRQHandler>:
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_IRQHandler>

08001ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f001 f9c7 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f80e 	bl	8001b04 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e001      	b.n	8001af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af4:	f7ff fd6e 	bl	80015d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_InitTick+0x70>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_InitTick+0x6c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 f9d3 	bl	8002eda <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d809      	bhi.n	8001b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f001 f99d 	bl	8002e86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_InitTick+0x74>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e004      	b.n	8001b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e001      	b.n	8001b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200001a0 	.word	0x200001a0
 8001b74:	20000198 	.word	0x20000198
 8001b78:	2000019c 	.word	0x2000019c

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200001a0 	.word	0x200001a0
 8001ba0:	20001578 	.word	0x20001578

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20001578 	.word	0x20001578

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_Delay+0x40>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200001a0 	.word	0x200001a0

08001c00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3360      	adds	r3, #96	; 0x60
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <LL_ADC_SetOffset+0x44>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	03fff000 	.word	0x03fff000

08001cb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3360      	adds	r3, #96	; 0x60
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3360      	adds	r3, #96	; 0x60
 8001cec:	461a      	mov	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d06:	bf00      	nop
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3330      	adds	r3, #48	; 0x30
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	211f      	movs	r1, #31
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 011f 	and.w	r1, r3, #31
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0e5b      	lsrs	r3, r3, #25
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	0d1b      	lsrs	r3, r3, #20
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0d1b      	lsrs	r3, r3, #20
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0318 	and.w	r3, r3, #24
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e0c:	40d9      	lsrs	r1, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	400b      	ands	r3, r1
 8001e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	0007ffff 	.word	0x0007ffff

08001e30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6093      	str	r3, [r2, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <LL_ADC_IsEnabled+0x18>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <LL_ADC_IsEnabled+0x1a>
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f2e:	f043 0204 	orr.w	r2, r3, #4
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d101      	bne.n	8001f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d101      	bne.n	8001f80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e12a      	b.n	8002200 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe fb95 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff3f 	bl	8001e54 <LL_ADC_IsDeepPowerDownEnabled>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff25 	bl	8001e30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff5a 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d113      	bne.n	800201e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff3e 	bl	8001e7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002000:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_ADC_Init+0x278>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	4a81      	ldr	r2, [pc, #516]	; (800220c <HAL_ADC_Init+0x27c>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff3e 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff77 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 8002054:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80c5 	bne.w	80021ee <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 80c1 	bne.w	80021ee <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002074:	f043 0202 	orr.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff37 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10b      	bne.n	80020a4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800208c:	4860      	ldr	r0, [pc, #384]	; (8002210 <HAL_ADC_Init+0x280>)
 800208e:	f7ff ff31 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4619      	mov	r1, r3
 800209e:	485d      	ldr	r0, [pc, #372]	; (8002214 <HAL_ADC_Init+0x284>)
 80020a0:	f7ff fdae 	bl	8001c00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e5b      	ldrb	r3, [r3, #25]
 80020a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	3b01      	subs	r3, #1
 80020d8:	045b      	lsls	r3, r3, #17
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	4b45      	ldr	r3, [pc, #276]	; (8002218 <HAL_ADC_Init+0x288>)
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	430b      	orrs	r3, r1
 800210e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff14 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 800211a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff21 	bl	8001f68 <LL_ADC_INJ_IsConversionOngoing>
 8002126:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d13d      	bne.n	80021aa <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002138:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002140:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002150:	f023 0302 	bic.w	r3, r3, #2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	69b9      	ldr	r1, [r7, #24]
 800215a:	430b      	orrs	r3, r1
 800215c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002164:	2b01      	cmp	r3, #1
 8002166:	d118      	bne.n	800219a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800218a:	430a      	orrs	r2, r1
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	611a      	str	r2, [r3, #16]
 8002198:	e007      	b.n	80021aa <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10c      	bne.n	80021cc <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f023 010f 	bic.w	r1, r3, #15
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ca:	e007      	b.n	80021dc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020f 	bic.w	r2, r2, #15
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f023 0303 	bic.w	r3, r3, #3
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
 80021ec:	e007      	b.n	80021fe <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f043 0210 	orr.w	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000198 	.word	0x20000198
 800220c:	053e2d63 	.word	0x053e2d63
 8002210:	50040000 	.word	0x50040000
 8002214:	50040300 	.word	0x50040300
 8002218:	fff0c007 	.word	0xfff0c007

0800221c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fe88 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d167      	bne.n	8002308 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start_DMA+0x2a>
 8002242:	2302      	movs	r3, #2
 8002244:	e063      	b.n	800230e <HAL_ADC_Start_DMA+0xf2>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fc50 	bl	8002af4 <ADC_Enable>
 8002254:	4603      	mov	r3, r0
 8002256:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d14f      	bne.n	80022fe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f023 0206 	bic.w	r2, r3, #6
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	659a      	str	r2, [r3, #88]	; 0x58
 800228a:	e002      	b.n	8002292 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_ADC_Start_DMA+0xfc>)
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_ADC_Start_DMA+0x100>)
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_ADC_Start_DMA+0x104>)
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	221c      	movs	r2, #28
 80022b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0210 	orr.w	r2, r2, #16
 80022c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3340      	adds	r3, #64	; 0x40
 80022e4:	4619      	mov	r1, r3
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f001 f95d 	bl	80035a8 <HAL_DMA_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe0f 	bl	8001f1a <LL_ADC_REG_StartConversion>
 80022fc:	e006      	b.n	800230c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002306:	e001      	b.n	800230c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800230c:	7dfb      	ldrb	r3, [r7, #23]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	08002ba9 	.word	0x08002ba9
 800231c:	08002c81 	.word	0x08002c81
 8002320:	08002c9d 	.word	0x08002c9d

08002324 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0b6      	sub	sp, #216	; 0xd8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x22>
 8002356:	2302      	movs	r3, #2
 8002358:	e3b8      	b.n	8002acc <HAL_ADC_ConfigChannel+0x794>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fdeb 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 839d 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d824      	bhi.n	80023c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	3b02      	subs	r3, #2
 8002382:	2b03      	cmp	r3, #3
 8002384:	d81b      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x86>
 8002386:	a201      	add	r2, pc, #4	; (adr r2, 800238c <HAL_ADC_ConfigChannel+0x54>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023a5 	.word	0x080023a5
 8002394:	080023ad 	.word	0x080023ad
 8002398:	080023b5 	.word	0x080023b5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	220c      	movs	r2, #12
 80023a0:	605a      	str	r2, [r3, #4]
          break;
 80023a2:	e011      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2212      	movs	r2, #18
 80023a8:	605a      	str	r2, [r3, #4]
          break;
 80023aa:	e00d      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2218      	movs	r2, #24
 80023b0:	605a      	str	r2, [r3, #4]
          break;
 80023b2:	e009      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ba:	605a      	str	r2, [r3, #4]
          break;
 80023bc:	e004      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2206      	movs	r2, #6
 80023c2:	605a      	str	r2, [r3, #4]
          break;
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023c6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f7ff fcaf 	bl	8001d38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fdaf 	bl	8001f42 <LL_ADC_REG_IsConversionOngoing>
 80023e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fdbb 	bl	8001f68 <LL_ADC_INJ_IsConversionOngoing>
 80023f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 81a6 	bne.w	800274c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 81a1 	bne.w	800274c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff fcba 	bl	8001d90 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00a      	beq.n	8002454 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800244e:	f7ff fc0b 	bl	8001c68 <LL_ADC_SetOffset>
 8002452:	e17b      	b.n	800274c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc28 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x148>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fc1d 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	e01e      	b.n	80024be <HAL_ADC_ConfigChannel+0x186>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fc12 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800249e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x19e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	e018      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e004      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80024fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbe1 	bl	8001cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fbc5 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fbba 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	e01e      	b.n	8002584 <HAL_ADC_ConfigChannel+0x24c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fbaf 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e004      	b.n	8002582 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_ConfigChannel+0x264>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	e018      	b.n	80025ce <HAL_ADC_ConfigChannel+0x296>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e004      	b.n	80025ce <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d106      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb7e 	bl	8001cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fb62 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <HAL_ADC_ConfigChannel+0x2d4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fb57 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	e01e      	b.n	800264a <HAL_ADC_ConfigChannel+0x312>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fb4c 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800262a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800262e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e004      	b.n	8002648 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800263e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x32a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	e016      	b.n	8002690 <HAL_ADC_ConfigChannel+0x358>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800267a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e004      	b.n	8002690 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	2102      	movs	r1, #2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fb1d 	bl	8001cdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2103      	movs	r1, #3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fb01 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x396>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2103      	movs	r1, #3
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff faf6 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	e017      	b.n	80026fe <HAL_ADC_ConfigChannel+0x3c6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2103      	movs	r1, #3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff faeb 	bl	8001cb0 <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80026f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x3de>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	e011      	b.n	800273a <HAL_ADC_ConfigChannel+0x402>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002726:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e003      	b.n	800273a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800273a:	429a      	cmp	r2, r3
 800273c:	d106      	bne.n	800274c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	2103      	movs	r1, #3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fac8 	bl	8001cdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fbcf 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 813f 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	f7ff fb3c 	bl	8001de8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a8e      	ldr	r2, [pc, #568]	; (80029b0 <HAL_ADC_ConfigChannel+0x678>)
 8002776:	4293      	cmp	r3, r2
 8002778:	f040 8130 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x46c>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	3301      	adds	r3, #1
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2b09      	cmp	r3, #9
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e019      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x4a0>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b09      	cmp	r3, #9
 80027d0:	bf94      	ite	ls
 80027d2:	2301      	movls	r3, #1
 80027d4:	2300      	movhi	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d079      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x4c0>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	3301      	adds	r3, #1
 80027f0:	069b      	lsls	r3, r3, #26
 80027f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f6:	e015      	b.n	8002824 <HAL_ADC_ConfigChannel+0x4ec>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002808:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	069b      	lsls	r3, r3, #26
 8002820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x50c>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	3301      	adds	r3, #1
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	e017      	b.n	8002874 <HAL_ADC_ConfigChannel+0x53c>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800285c:	2320      	movs	r3, #32
 800285e:	e003      	b.n	8002868 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	ea42 0103 	orr.w	r1, r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <HAL_ADC_ConfigChannel+0x562>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	3301      	adds	r3, #1
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	051b      	lsls	r3, r3, #20
 8002898:	e018      	b.n	80028cc <HAL_ADC_ConfigChannel+0x594>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	430b      	orrs	r3, r1
 80028ce:	e080      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x5b4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ea:	e015      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5e0>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x600>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	e017      	b.n	8002968 <HAL_ADC_ConfigChannel+0x630>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	61fb      	str	r3, [r7, #28]
  return result;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	ea42 0103 	orr.w	r1, r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10d      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x65c>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	3b1e      	subs	r3, #30
 800298c:	051b      	lsls	r3, r3, #20
 800298e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002992:	e01d      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x698>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	613b      	str	r3, [r7, #16]
  return result;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e005      	b.n	80029bc <HAL_ADC_ConfigChannel+0x684>
 80029b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	3b1e      	subs	r3, #30
 80029ca:	051b      	lsls	r3, r3, #20
 80029cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	430b      	orrs	r3, r1
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7ff f9da 	bl	8001d90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <HAL_ADC_ConfigChannel+0x79c>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d06b      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e8:	483b      	ldr	r0, [pc, #236]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a0>)
 80029ea:	f7ff f92f 	bl	8001c4c <LL_ADC_GetCommonPathInternalCh>
 80029ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a39      	ldr	r2, [pc, #228]	; (8002adc <HAL_ADC_ConfigChannel+0x7a4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d126      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d120      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d156      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	482e      	ldr	r0, [pc, #184]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002a1e:	f7ff f902 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a22:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	099a      	lsrs	r2, r3, #6
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a3a:	e002      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f9      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a48:	e03a      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_ADC_ConfigChannel+0x7b4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d113      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x744>
 8002a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d12a      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	4619      	mov	r1, r3
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002a76:	f7ff f8d6 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a7a:	e021      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11c      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d111      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002aa8:	f7ff f8bd 	bl	8001c26 <LL_ADC_SetCommonPathInternalCh>
 8002aac:	e008      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	37d8      	adds	r7, #216	; 0xd8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	80080000 	.word	0x80080000
 8002ad8:	50040300 	.word	0x50040300
 8002adc:	c7520000 	.word	0xc7520000
 8002ae0:	50040000 	.word	0x50040000
 8002ae4:	20000198 	.word	0x20000198
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	cb840000 	.word	0xcb840000
 8002af0:	80000001 	.word	0x80000001

08002af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f9f7 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d146      	bne.n	8002b9a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <ADC_Enable+0xb0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0210 	orr.w	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e032      	b.n	8002b9c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f9c6 	bl	8001ecc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b40:	f7ff f830 	bl	8001ba4 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b46:	e021      	b.n	8002b8c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f9d1 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f9b5 	bl	8001ecc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b62:	f7ff f81f 	bl	8001ba4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d90d      	bls.n	8002b8c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0210 	orr.w	r2, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e007      	b.n	8002b9c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d1d6      	bne.n	8002b48 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	8000003f 	.word	0x8000003f

08002ba8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d14b      	bne.n	8002c5a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d021      	beq.n	8002c20 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f896 	bl	8001d12 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d032      	beq.n	8002c52 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d12b      	bne.n	8002c52 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11f      	bne.n	8002c52 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
 8002c1e:	e018      	b.n	8002c52 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d111      	bne.n	8002c52 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7fe f98e 	bl	8000f74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c58:	e00e      	b.n	8002c78 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff fb5c 	bl	8002324 <HAL_ADC_ErrorCallback>
}
 8002c6c:	e004      	b.n	8002c78 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7fe f94a 	bl	8000f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f7ff fb2e 	bl	8002324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db0b      	blt.n	8002d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4907      	ldr	r1, [pc, #28]	; (8002d6c <__NVIC_EnableIRQ+0x38>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2001      	movs	r0, #1
 8002d56:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	; (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	; (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
         );
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3c:	d301      	bcc.n	8002e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00f      	b.n	8002e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <SysTick_Config+0x40>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e50:	f7ff ff8e 	bl	8002d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <SysTick_Config+0x40>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5a:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <SysTick_Config+0x40>)
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010

08002e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff29 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e98:	f7ff ff3e 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff8e 	bl	8002dc4 <NVIC_EncodePriority>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff5d 	bl	8002d70 <__NVIC_SetPriority>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff31 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ffa2 	bl	8002e2c <SysTick_Config>
 8002ee8:	4603      	mov	r3, r0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e014      	b.n	8002f2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fd fcad 	bl	8000874 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	795b      	ldrb	r3, [r3, #5]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_DAC_Start_DMA+0x1e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e09e      	b.n	8003094 <HAL_DAC_Start_DMA+0x15c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d12a      	bne.n	8002fbe <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a4b      	ldr	r2, [pc, #300]	; (800309c <HAL_DAC_Start_DMA+0x164>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a4a      	ldr	r2, [pc, #296]	; (80030a0 <HAL_DAC_Start_DMA+0x168>)
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_DAC_Start_DMA+0x16c>)
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d009      	beq.n	8002faa <HAL_DAC_Start_DMA+0x72>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d00c      	beq.n	8002fb4 <HAL_DAC_Start_DMA+0x7c>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d000      	beq.n	8002fa0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002f9e:	e039      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	613b      	str	r3, [r7, #16]
        break;
 8002fa8:	e034      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	613b      	str	r3, [r7, #16]
        break;
 8002fb2:	e02f      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3310      	adds	r3, #16
 8002fba:	613b      	str	r3, [r7, #16]
        break;
 8002fbc:	e02a      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a39      	ldr	r2, [pc, #228]	; (80030a8 <HAL_DAC_Start_DMA+0x170>)
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a38      	ldr	r2, [pc, #224]	; (80030ac <HAL_DAC_Start_DMA+0x174>)
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a37      	ldr	r2, [pc, #220]	; (80030b0 <HAL_DAC_Start_DMA+0x178>)
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d009      	beq.n	8003000 <HAL_DAC_Start_DMA+0xc8>
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d00c      	beq.n	800300a <HAL_DAC_Start_DMA+0xd2>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d000      	beq.n	8002ff6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ff4:	e00e      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	613b      	str	r3, [r7, #16]
        break;
 8002ffe:	e009      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3318      	adds	r3, #24
 8003006:	613b      	str	r3, [r7, #16]
        break;
 8003008:	e004      	b.n	8003014 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	331c      	adds	r3, #28
 8003010:	613b      	str	r3, [r7, #16]
        break;
 8003012:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d111      	bne.n	800303e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003028:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6898      	ldr	r0, [r3, #8]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	f000 fab8 	bl	80035a8 <HAL_DMA_Start_IT>
 8003038:	4603      	mov	r3, r0
 800303a:	75fb      	strb	r3, [r7, #23]
 800303c:	e010      	b.n	8003060 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800304c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68d8      	ldr	r0, [r3, #12]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	f000 faa6 	bl	80035a8 <HAL_DMA_Start_IT>
 800305c:	4603      	mov	r3, r0
 800305e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e005      	b.n	8003092 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	08003325 	.word	0x08003325
 80030a0:	08003347 	.word	0x08003347
 80030a4:	08003363 	.word	0x08003363
 80030a8:	080033cd 	.word	0x080033cd
 80030ac:	080033ef 	.word	0x080033ef
 80030b0:	0800340b 	.word	0x0800340b

080030b4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	795b      	ldrb	r3, [r3, #5]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_DAC_ConfigChannel+0x1c>
 8003108:	2302      	movs	r3, #2
 800310a:	e107      	b.n	800331c <HAL_DAC_ConfigChannel+0x22c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d174      	bne.n	800320a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003120:	f7fe fd40 	bl	8001ba4 <HAL_GetTick>
 8003124:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d134      	bne.n	8003196 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800312c:	e011      	b.n	8003152 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800312e:	f7fe fd39 	bl	8001ba4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d90a      	bls.n	8003152 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f043 0208 	orr.w	r2, r3, #8
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2203      	movs	r2, #3
 800314c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0e4      	b.n	800331c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e6      	bne.n	800312e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003160:	2001      	movs	r0, #1
 8003162:	f7fe fd2b 	bl	8001bbc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	6992      	ldr	r2, [r2, #24]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
 8003170:	e01e      	b.n	80031b0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003172:	f7fe fd17 	bl	8001ba4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d90a      	bls.n	8003196 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f043 0208 	orr.w	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2203      	movs	r2, #3
 8003190:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0c2      	b.n	800331c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	dbe8      	blt.n	8003172 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7fe fd0b 	bl	8001bbc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	6992      	ldr	r2, [r2, #24]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	ea02 0103 	and.w	r1, r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	21ff      	movs	r1, #255	; 0xff
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	ea02 0103 	and.w	r1, r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d11d      	bne.n	800324e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	221f      	movs	r2, #31
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2207      	movs	r2, #7
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	431a      	orrs	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	400a      	ands	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	22c0      	movs	r2, #192	; 0xc0
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43da      	mvns	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	400a      	ands	r2, r1
 800330c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff febe 	bl	80030b4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	711a      	strb	r2, [r3, #4]
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff feb7 	bl	80030c8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f043 0204 	orr.w	r2, r3, #4
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fead 	bl	80030dc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	711a      	strb	r2, [r3, #4]
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff ffd8 	bl	8003390 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	711a      	strb	r2, [r3, #4]
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff ffd1 	bl	80033a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff ffc7 	bl	80033b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	711a      	strb	r2, [r3, #4]
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e098      	b.n	800357c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_DMA_Init+0x150>)
 8003452:	429a      	cmp	r2, r3
 8003454:	d80f      	bhi.n	8003476 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4b4b      	ldr	r3, [pc, #300]	; (800358c <HAL_DMA_Init+0x154>)
 800345e:	4413      	add	r3, r2
 8003460:	4a4b      	ldr	r2, [pc, #300]	; (8003590 <HAL_DMA_Init+0x158>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_DMA_Init+0x15c>)
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
 8003474:	e00e      	b.n	8003494 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b46      	ldr	r3, [pc, #280]	; (8003598 <HAL_DMA_Init+0x160>)
 800347e:	4413      	add	r3, r2
 8003480:	4a43      	ldr	r2, [pc, #268]	; (8003590 <HAL_DMA_Init+0x158>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a42      	ldr	r2, [pc, #264]	; (800359c <HAL_DMA_Init+0x164>)
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ee:	d039      	beq.n	8003564 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <HAL_DMA_Init+0x15c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11a      	bne.n	8003530 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_DMA_Init+0x168>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f003 031c 	and.w	r3, r3, #28
 8003506:	210f      	movs	r1, #15
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	4924      	ldr	r1, [pc, #144]	; (80035a0 <HAL_DMA_Init+0x168>)
 8003510:	4013      	ands	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003514:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_DMA_Init+0x168>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 031c 	and.w	r3, r3, #28
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	491d      	ldr	r1, [pc, #116]	; (80035a0 <HAL_DMA_Init+0x168>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
 800352e:	e019      	b.n	8003564 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_DMA_Init+0x16c>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f003 031c 	and.w	r3, r3, #28
 800353c:	210f      	movs	r1, #15
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	4917      	ldr	r1, [pc, #92]	; (80035a4 <HAL_DMA_Init+0x16c>)
 8003546:	4013      	ands	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_DMA_Init+0x16c>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f003 031c 	and.w	r3, r3, #28
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	4911      	ldr	r1, [pc, #68]	; (80035a4 <HAL_DMA_Init+0x16c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40020407 	.word	0x40020407
 800358c:	bffdfff8 	.word	0xbffdfff8
 8003590:	cccccccd 	.word	0xcccccccd
 8003594:	40020000 	.word	0x40020000
 8003598:	bffdfbf8 	.word	0xbffdfbf8
 800359c:	40020400 	.word	0x40020400
 80035a0:	400200a8 	.word	0x400200a8
 80035a4:	400204a8 	.word	0x400204a8

080035a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_Start_IT+0x20>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e04b      	b.n	8003660 <HAL_DMA_Start_IT+0xb8>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d13a      	bne.n	8003652 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f92f 	bl	8003864 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 020e 	orr.w	r2, r2, #14
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00f      	b.n	8003640 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 020a 	orr.w	r2, r2, #10
 800363e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e005      	b.n	800365e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d005      	beq.n	800368c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	e029      	b.n	80036e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 020e 	bic.w	r2, r2, #14
 800369a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f003 021c 	and.w	r2, r3, #28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
    }
  }
  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f003 031c 	and.w	r3, r3, #28
 800370a:	2204      	movs	r2, #4
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d026      	beq.n	8003764 <HAL_DMA_IRQHandler+0x7a>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0204 	bic.w	r2, r2, #4
 800373c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f003 021c 	and.w	r2, r3, #28
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2104      	movs	r1, #4
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	2b00      	cmp	r3, #0
 8003758:	d071      	beq.n	800383e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003762:	e06c      	b.n	800383e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f003 031c 	and.w	r3, r3, #28
 800376c:	2202      	movs	r2, #2
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d02e      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xec>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d029      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 020a 	bic.w	r2, r2, #10
 800379e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f003 021c 	and.w	r2, r3, #28
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2102      	movs	r1, #2
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d038      	beq.n	800383e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037d4:	e033      	b.n	800383e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f003 031c 	and.w	r3, r3, #28
 80037de:	2208      	movs	r2, #8
 80037e0:	409a      	lsls	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02a      	beq.n	8003840 <HAL_DMA_IRQHandler+0x156>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d025      	beq.n	8003840 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020e 	bic.w	r2, r2, #14
 8003802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	f003 021c 	and.w	r2, r3, #28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800383e:	bf00      	nop
 8003840:	bf00      	nop
}
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003856:	b2db      	uxtb	r3, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f003 021c 	and.w	r2, r3, #28
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b10      	cmp	r3, #16
 8003894:	d108      	bne.n	80038a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038a6:	e007      	b.n	80038b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d2:	e148      	b.n	8003b66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 813a 	beq.w	8003b60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d00b      	beq.n	800390c <HAL_GPIO_Init+0x48>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d007      	beq.n	800390c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003900:	2b11      	cmp	r3, #17
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b12      	cmp	r3, #18
 800390a:	d130      	bne.n	800396e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003942:	2201      	movs	r2, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	f003 0201 	and.w	r2, r3, #1
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0xea>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b12      	cmp	r3, #18
 80039ac:	d123      	bne.n	80039f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	6939      	ldr	r1, [r7, #16]
 80039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0203 	and.w	r2, r3, #3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8094 	beq.w	8003b60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a38:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <HAL_GPIO_Init+0x2c0>)
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	4a51      	ldr	r2, [pc, #324]	; (8003b84 <HAL_GPIO_Init+0x2c0>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6613      	str	r3, [r2, #96]	; 0x60
 8003a44:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <HAL_GPIO_Init+0x2c0>)
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <HAL_GPIO_Init+0x2c4>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	3302      	adds	r3, #2
 8003a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	220f      	movs	r2, #15
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a7a:	d00d      	beq.n	8003a98 <HAL_GPIO_Init+0x1d4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <HAL_GPIO_Init+0x2c8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_Init+0x1d0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_GPIO_Init+0x2cc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_GPIO_Init+0x1cc>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e004      	b.n	8003a9a <HAL_GPIO_Init+0x1d6>
 8003a90:	2307      	movs	r3, #7
 8003a92:	e002      	b.n	8003a9a <HAL_GPIO_Init+0x1d6>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_GPIO_Init+0x1d6>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	f002 0203 	and.w	r2, r2, #3
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	4093      	lsls	r3, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aaa:	4937      	ldr	r1, [pc, #220]	; (8003b88 <HAL_GPIO_Init+0x2c4>)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003adc:	4a2d      	ldr	r2, [pc, #180]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b0c:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3301      	adds	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f aeaf 	bne.w	80038d4 <HAL_GPIO_Init+0x10>
  }
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	48000400 	.word	0x48000400
 8003b90:	48000800 	.word	0x48000800
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e001      	b.n	8003bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c0e:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd f9f4 	bl	8001004 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40010400 	.word	0x40010400

08003c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e081      	b.n	8003d3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fc ffac 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e006      	b.n	8003cb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d104      	bne.n	8003cc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	ea42 0103 	orr.w	r1, r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	021a      	lsls	r2, r3, #8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69d9      	ldr	r1, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	461a      	mov	r2, r3
 8003d54:	460b      	mov	r3, r1
 8003d56:	817b      	strh	r3, [r7, #10]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	f040 80cd 	bne.w	8003f04 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0c3      	b.n	8003f06 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_I2C_Master_Transmit_DMA+0x44>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0bc      	b.n	8003f06 <HAL_I2C_Master_Transmit_DMA+0x1be>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2221      	movs	r2, #33	; 0x21
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2210      	movs	r2, #16
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	893a      	ldrh	r2, [r7, #8]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a55      	ldr	r2, [pc, #340]	; (8003f10 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2bff      	cmp	r3, #255	; 0xff
 8003dca:	d906      	bls.n	8003dda <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	; 0xff
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e007      	b.n	8003dea <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d070      	beq.n	8003ed4 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4a46      	ldr	r2, [pc, #280]	; (8003f18 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	4a45      	ldr	r2, [pc, #276]	; (8003f1c <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	2200      	movs	r2, #0
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3328      	adds	r3, #40	; 0x28
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	f7ff fbbc 	bl	80035a8 <HAL_DMA_Start_IT>
 8003e30:	4603      	mov	r3, r0
 8003e32:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d138      	bne.n	8003eac <HAL_I2C_Master_Transmit_DMA+0x164>
 8003e3a:	e013      	b.n	8003e64 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e050      	b.n	8003f06 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f001 faf6 	bl	8005464 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003e92:	2110      	movs	r1, #16
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f001 fb13 	bl	80054c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e029      	b.n	8003f00 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f043 0210 	orr.w	r2, r3, #16
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e018      	b.n	8003f06 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8003ed8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f001 faba 	bl	8005464 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ef8:	2101      	movs	r1, #1
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f001 fae0 	bl	80054c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	ffff0000 	.word	0xffff0000
 8003f14:	08004673 	.word	0x08004673
 8003f18:	080052e3 	.word	0x080052e3
 8003f1c:	08005379 	.word	0x08005379
 8003f20:	80002000 	.word	0x80002000
 8003f24:	0800421b 	.word	0x0800421b

08003f28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	460b      	mov	r3, r1
 8003f36:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	f040 80f1 	bne.w	800412c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e0e7      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_I2C_IsDeviceReady+0x44>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0e0      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_I2C_IsDeviceReady+0x72>
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f98:	e004      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x7c>
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd fdfb 	bl	8001ba4 <HAL_GetTick>
 8003fae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003fdc:	e034      	b.n	8004048 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe4:	d01a      	beq.n	800401c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fd fddd 	bl	8001ba4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <HAL_I2C_IsDeviceReady+0xd4>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10f      	bne.n	800401c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e088      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b10      	cmp	r3, #16
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_I2C_IsDeviceReady+0x12c>
 800404e:	7fbb      	ldrb	r3, [r7, #30]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0c4      	beq.n	8003fde <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b10      	cmp	r3, #16
 8004060:	d01a      	beq.n	8004098 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	2120      	movs	r1, #32
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f001 f9b8 	bl	80053e2 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e058      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2220      	movs	r2, #32
 8004082:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e04a      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	2120      	movs	r1, #32
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f001 f99d 	bl	80053e2 <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e03d      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2210      	movs	r2, #16
 80040b8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2220      	movs	r2, #32
 80040c0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d118      	bne.n	80040fc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2120      	movs	r1, #32
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f001 f97c 	bl	80053e2 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e01c      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2220      	movs	r2, #32
 80040fa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	f63f af3b 	bhi.w	8003f82 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
  }
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
 800419e:	4613      	mov	r3, r2
 80041a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420c:	b2db      	uxtb	r3, r3
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b088      	sub	sp, #32
 800421e:	af02      	add	r7, sp, #8
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <I2C_Master_ISR_IT+0x1e>
 8004234:	2302      	movs	r3, #2
 8004236:	e115      	b.n	8004464 <I2C_Master_ISR_IT+0x24a>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <I2C_Master_ISR_IT+0x5a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00d      	beq.n	8004274 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f001 f814 	bl	800529a <I2C_Flush_TXDR>
 8004272:	e0e2      	b.n	800443a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <I2C_Master_ISR_IT+0xae>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01d      	beq.n	80042c8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0304 	bic.w	r3, r3, #4
 8004292:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c6:	e0b8      	b.n	800443a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01e      	beq.n	8004312 <I2C_Master_ISR_IT+0xf8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d018      	beq.n	8004312 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004310:	e093      	b.n	800443a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	09db      	lsrs	r3, r3, #7
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d05e      	beq.n	80043dc <I2C_Master_ISR_IT+0x1c2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d058      	beq.n	80043dc <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d041      	beq.n	80043b8 <I2C_Master_ISR_IT+0x19e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d13d      	bne.n	80043b8 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004348:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2bff      	cmp	r3, #255	; 0xff
 8004352:	d90e      	bls.n	8004372 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	22ff      	movs	r2, #255	; 0xff
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	b2da      	uxtb	r2, r3
 8004360:	8a79      	ldrh	r1, [r7, #18]
 8004362:	2300      	movs	r3, #0
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f001 f87a 	bl	8005464 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004370:	e033      	b.n	80043da <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004384:	d00c      	beq.n	80043a0 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004390:	8a79      	ldrh	r1, [r7, #18]
 8004392:	2300      	movs	r3, #0
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4603      	mov	r3, r0
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f001 f863 	bl	8005464 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439e:	e01c      	b.n	80043da <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	8a79      	ldrh	r1, [r7, #18]
 80043a8:	2300      	movs	r3, #0
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f001 f857 	bl	8005464 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b6:	e010      	b.n	80043da <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c6:	d003      	beq.n	80043d0 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fba9 	bl	8004b20 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043ce:	e034      	b.n	800443a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043d0:	2140      	movs	r1, #64	; 0x40
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fe6a 	bl	80050ac <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043d8:	e02f      	b.n	800443a <I2C_Master_ISR_IT+0x220>
 80043da:	e02e      	b.n	800443a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d028      	beq.n	800443a <I2C_Master_ISR_IT+0x220>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d119      	bne.n	8004432 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440c:	d015      	beq.n	800443a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004416:	d108      	bne.n	800442a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004426:	605a      	str	r2, [r3, #4]
 8004428:	e007      	b.n	800443a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fb78 	bl	8004b20 <I2C_ITMasterSeqCplt>
 8004430:	e003      	b.n	800443a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fe39 	bl	80050ac <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <I2C_Master_ISR_IT+0x240>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fbff 	bl	8004c58 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <I2C_Slave_ISR_IT+0x24>
 800448c:	2302      	movs	r3, #2
 800448e:	e0ec      	b.n	800466a <I2C_Slave_ISR_IT+0x1fe>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <I2C_Slave_ISR_IT+0x4c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044b0:	6939      	ldr	r1, [r7, #16]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fc9a 	bl	8004dec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d04d      	beq.n	8004560 <I2C_Slave_ISR_IT+0xf4>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d047      	beq.n	8004560 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d128      	bne.n	800452c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b28      	cmp	r3, #40	; 0x28
 80044e4:	d108      	bne.n	80044f8 <I2C_Slave_ISR_IT+0x8c>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ec:	d104      	bne.n	80044f8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fd85 	bl	8005000 <I2C_ITListenCplt>
 80044f6:	e032      	b.n	800455e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b29      	cmp	r3, #41	; 0x29
 8004502:	d10e      	bne.n	8004522 <I2C_Slave_ISR_IT+0xb6>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800450a:	d00a      	beq.n	8004522 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2210      	movs	r2, #16
 8004512:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fec0 	bl	800529a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fb3d 	bl	8004b9a <I2C_ITSlaveSeqCplt>
 8004520:	e01d      	b.n	800455e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2210      	movs	r2, #16
 8004528:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800452a:	e096      	b.n	800465a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2210      	movs	r2, #16
 8004532:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <I2C_Slave_ISR_IT+0xe4>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800454c:	f040 8085 	bne.w	800465a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fda8 	bl	80050ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800455c:	e07d      	b.n	800465a <I2C_Slave_ISR_IT+0x1ee>
 800455e:	e07c      	b.n	800465a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d030      	beq.n	80045ce <I2C_Slave_ISR_IT+0x162>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d02a      	beq.n	80045ce <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d14f      	bne.n	800465e <I2C_Slave_ISR_IT+0x1f2>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c4:	d04b      	beq.n	800465e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fae7 	bl	8004b9a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045cc:	e047      	b.n	800465e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d004      	beq.n	80045f0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80045e6:	6939      	ldr	r1, [r7, #16]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fa15 	bl	8004a18 <I2C_ITAddrCplt>
 80045ee:	e037      	b.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d031      	beq.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02b      	beq.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	; 0x28
 8004642:	e00d      	b.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800464a:	d002      	beq.n	8004652 <I2C_Slave_ISR_IT+0x1e6>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 faa1 	bl	8004b9a <I2C_ITSlaveSeqCplt>
 8004658:	e002      	b.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800465e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b088      	sub	sp, #32
 8004676:	af02      	add	r7, sp, #8
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <I2C_Master_ISR_DMA+0x1a>
 8004688:	2302      	movs	r3, #2
 800468a:	e0e1      	b.n	8004850 <I2C_Master_ISR_DMA+0x1de>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <I2C_Master_ISR_DMA+0x5e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2210      	movs	r2, #16
 80046b2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f043 0204 	orr.w	r2, r3, #4
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80046c0:	2120      	movs	r1, #32
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fefc 	bl	80054c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fde6 	bl	800529a <I2C_Flush_TXDR>
 80046ce:	e0ba      	b.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	09db      	lsrs	r3, r3, #7
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d072      	beq.n	80047c2 <I2C_Master_ISR_DMA+0x150>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d06c      	beq.n	80047c2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04e      	beq.n	80047a0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2bff      	cmp	r3, #255	; 0xff
 8004718:	d906      	bls.n	8004728 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e010      	b.n	800474a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800473a:	d003      	beq.n	8004744 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e002      	b.n	800474a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004748:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	b2da      	uxtb	r2, r3
 8004750:	8a79      	ldrh	r1, [r7, #18]
 8004752:	2300      	movs	r3, #0
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fe83 	bl	8005464 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b22      	cmp	r3, #34	; 0x22
 800477a:	d108      	bne.n	800478e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800478c:	e05b      	b.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800479e:	e052      	b.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ae:	d003      	beq.n	80047b8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f9b5 	bl	8004b20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047b6:	e046      	b.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fc76 	bl	80050ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80047c0:	e041      	b.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d029      	beq.n	8004822 <I2C_Master_ISR_DMA+0x1b0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d023      	beq.n	8004822 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d119      	bne.n	8004818 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f2:	d027      	beq.n	8004844 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047fc:	d108      	bne.n	8004810 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800480e:	e019      	b.n	8004844 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f985 	bl	8004b20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004816:	e015      	b.n	8004844 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fc46 	bl	80050ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004820:	e010      	b.n	8004844 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fa0b 	bl	8004c58 <I2C_ITMasterCplt>
 8004842:	e000      	b.n	8004846 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004844:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <I2C_Slave_ISR_DMA+0x24>
 8004878:	2302      	movs	r3, #2
 800487a:	e0c9      	b.n	8004a10 <I2C_Slave_ISR_DMA+0x1b8>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <I2C_Slave_ISR_DMA+0x4c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 faa4 	bl	8004dec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 809a 	beq.w	80049e6 <I2C_Slave_ISR_DMA+0x18e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8093 	beq.w	80049e6 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0b9b      	lsrs	r3, r3, #14
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0bdb      	lsrs	r3, r3, #15
 80048d0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d07f      	beq.n	80049d8 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0bdb      	lsrs	r3, r3, #15
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80048f8:	2301      	movs	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00d      	beq.n	8004920 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0b9b      	lsrs	r3, r3, #14
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d128      	bne.n	8004978 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b28      	cmp	r3, #40	; 0x28
 8004930:	d108      	bne.n	8004944 <I2C_Slave_ISR_DMA+0xec>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004938:	d104      	bne.n	8004944 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb5f 	bl	8005000 <I2C_ITListenCplt>
 8004942:	e048      	b.n	80049d6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b29      	cmp	r3, #41	; 0x29
 800494e:	d10e      	bne.n	800496e <I2C_Slave_ISR_DMA+0x116>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004956:	d00a      	beq.n	800496e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2210      	movs	r2, #16
 800495e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fc9a 	bl	800529a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f917 	bl	8004b9a <I2C_ITSlaveSeqCplt>
 800496c:	e033      	b.n	80049d6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2210      	movs	r2, #16
 8004974:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004976:	e034      	b.n	80049e2 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2210      	movs	r2, #16
 800497e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	f043 0204 	orr.w	r2, r3, #4
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004992:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <I2C_Slave_ISR_DMA+0x14a>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049a0:	d11f      	bne.n	80049e2 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	2b21      	cmp	r3, #33	; 0x21
 80049a6:	d002      	beq.n	80049ae <I2C_Slave_ISR_DMA+0x156>
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b29      	cmp	r3, #41	; 0x29
 80049ac:	d103      	bne.n	80049b6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2221      	movs	r2, #33	; 0x21
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
 80049b4:	e008      	b.n	80049c8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b22      	cmp	r3, #34	; 0x22
 80049ba:	d002      	beq.n	80049c2 <I2C_Slave_ISR_DMA+0x16a>
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b2a      	cmp	r3, #42	; 0x2a
 80049c0:	d102      	bne.n	80049c8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2222      	movs	r2, #34	; 0x22
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	4619      	mov	r1, r3
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fb6c 	bl	80050ac <I2C_ITError>
      if (treatdmanack == 1U)
 80049d4:	e005      	b.n	80049e2 <I2C_Slave_ISR_DMA+0x18a>
 80049d6:	e004      	b.n	80049e2 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2210      	movs	r2, #16
 80049de:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80049e0:	e011      	b.n	8004a06 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80049e2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80049e4:	e00f      	b.n	8004a06 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <I2C_Slave_ISR_DMA+0x1ae>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	08db      	lsrs	r3, r3, #3
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f809 	bl	8004a18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a2e:	2b28      	cmp	r3, #40	; 0x28
 8004a30:	d16a      	bne.n	8004b08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d138      	bne.n	8004ae8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	09db      	lsrs	r3, r3, #7
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	89bb      	ldrh	r3, [r7, #12]
 8004a7e:	4053      	eors	r3, r2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d11c      	bne.n	8004ac4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d13b      	bne.n	8004b18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2208      	movs	r2, #8
 8004aac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ab6:	89ba      	ldrh	r2, [r7, #12]
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fb68 	bl	8004192 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ac2:	e029      	b.n	8004b18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fd5b 	bl	8005588 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ada:	89ba      	ldrh	r2, [r7, #12]
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fb56 	bl	8004192 <HAL_I2C_AddrCallback>
}
 8004ae6:	e017      	b.n	8004b18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fd4b 	bl	8005588 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004afa:	89ba      	ldrh	r2, [r7, #12]
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fb46 	bl	8004192 <HAL_I2C_AddrCallback>
}
 8004b06:	e007      	b.n	8004b18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b21      	cmp	r3, #33	; 0x21
 8004b3a:	d115      	bne.n	8004b68 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2211      	movs	r2, #17
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b50:	2101      	movs	r1, #1
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fd18 	bl	8005588 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fc fa2d 	bl	8000fc0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b66:	e014      	b.n	8004b92 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2212      	movs	r2, #18
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fd02 	bl	8005588 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fc fa22 	bl	8000fd6 <HAL_I2C_MasterRxCpltCallback>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0b9b      	lsrs	r3, r3, #14
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e00d      	b.n	8004bec <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	0bdb      	lsrs	r3, r3, #15
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bea:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b29      	cmp	r3, #41	; 0x29
 8004bf6:	d112      	bne.n	8004c1e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2228      	movs	r2, #40	; 0x28
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2221      	movs	r2, #33	; 0x21
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c06:	2101      	movs	r1, #1
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fcbd 	bl	8005588 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff faa7 	bl	800416a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c1c:	e017      	b.n	8004c4e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b2a      	cmp	r3, #42	; 0x2a
 8004c28:	d111      	bne.n	8004c4e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2228      	movs	r2, #40	; 0x28
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2222      	movs	r2, #34	; 0x22
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c38:	2102      	movs	r1, #2
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fca4 	bl	8005588 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fa98 	bl	800417e <HAL_I2C_SlaveRxCpltCallback>
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b21      	cmp	r3, #33	; 0x21
 8004c78:	d107      	bne.n	8004c8a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fc83 	bl	8005588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2211      	movs	r2, #17
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
 8004c88:	e00c      	b.n	8004ca4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b22      	cmp	r3, #34	; 0x22
 8004c94:	d106      	bne.n	8004ca4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c96:	2102      	movs	r1, #2
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fc75 	bl	8005588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2212      	movs	r2, #18
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b4d      	ldr	r3, [pc, #308]	; (8004de4 <I2C_ITMasterCplt+0x18c>)
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a4a      	ldr	r2, [pc, #296]	; (8004de8 <I2C_ITMasterCplt+0x190>)
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	f043 0204 	orr.w	r2, r3, #4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b60      	cmp	r3, #96	; 0x60
 8004cea:	d10b      	bne.n	8004d04 <I2C_ITMasterCplt+0xac>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004d02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fac8 	bl	800529a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b60      	cmp	r3, #96	; 0x60
 8004d1a:	d002      	beq.n	8004d22 <I2C_ITMasterCplt+0xca>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f9bf 	bl	80050ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d2e:	e054      	b.n	8004dda <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b21      	cmp	r3, #33	; 0x21
 8004d3a:	d124      	bne.n	8004d86 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d10b      	bne.n	8004d6e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fa2b 	bl	80041c2 <HAL_I2C_MemTxCpltCallback>
}
 8004d6c:	e035      	b.n	8004dda <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc f91e 	bl	8000fc0 <HAL_I2C_MasterTxCpltCallback>
}
 8004d84:	e029      	b.n	8004dda <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b22      	cmp	r3, #34	; 0x22
 8004d90:	d123      	bne.n	8004dda <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d10b      	bne.n	8004dc4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fa0a 	bl	80041d6 <HAL_I2C_MemRxCpltCallback>
}
 8004dc2:	e00a      	b.n	8004dda <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fc f8fe 	bl	8000fd6 <HAL_I2C_MasterRxCpltCallback>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	fe00e800 	.word	0xfe00e800
 8004de8:	ffff0000 	.word	0xffff0000

08004dec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b21      	cmp	r3, #33	; 0x21
 8004e16:	d002      	beq.n	8004e1e <I2C_ITSlaveCplt+0x32>
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b29      	cmp	r3, #41	; 0x29
 8004e1c:	d108      	bne.n	8004e30 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e1e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fbb0 	bl	8005588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2221      	movs	r2, #33	; 0x21
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2e:	e00d      	b.n	8004e4c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b22      	cmp	r3, #34	; 0x22
 8004e34:	d002      	beq.n	8004e3c <I2C_ITSlaveCplt+0x50>
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3a:	d107      	bne.n	8004e4c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e3c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fba1 	bl	8005588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2222      	movs	r2, #34	; 0x22
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b64      	ldr	r3, [pc, #400]	; (8004ff8 <I2C_ITSlaveCplt+0x20c>)
 8004e68:	400b      	ands	r3, r1
 8004e6a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa14 	bl	800529a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	0b9b      	lsrs	r3, r3, #14
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d013      	beq.n	8004ea6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ea4:	e018      	b.n	8004ed8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	0bdb      	lsrs	r3, r3, #15
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d012      	beq.n	8004ed8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d006      	beq.n	8004ed8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00c      	beq.n	8004f26 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f043 0204 	orr.w	r2, r3, #4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8a7 	bl	80050ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b28      	cmp	r3, #40	; 0x28
 8004f68:	d141      	bne.n	8004fee <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f6a:	6979      	ldr	r1, [r7, #20]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f847 	bl	8005000 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f72:	e03c      	b.n	8004fee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f7c:	d014      	beq.n	8004fa8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe0b 	bl	8004b9a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <I2C_ITSlaveCplt+0x210>)
 8004f88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff f904 	bl	80041ae <HAL_I2C_ListenCpltCallback>
}
 8004fa6:	e022      	b.n	8004fee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b22      	cmp	r3, #34	; 0x22
 8004fb2:	d10e      	bne.n	8004fd2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff f8d7 	bl	800417e <HAL_I2C_SlaveRxCpltCallback>
}
 8004fd0:	e00d      	b.n	8004fee <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff f8be 	bl	800416a <HAL_I2C_SlaveTxCpltCallback>
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	fe00e800 	.word	0xfe00e800
 8004ffc:	ffff0000 	.word	0xffff0000

08005000 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <I2C_ITListenCplt+0xa8>)
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	f043 0204 	orr.w	r2, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800507e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa80 	bl	8005588 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2210      	movs	r2, #16
 800508e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff f888 	bl	80041ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	ffff0000 	.word	0xffff0000

080050ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a5d      	ldr	r2, [pc, #372]	; (8005240 <I2C_ITError+0x194>)
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b28      	cmp	r3, #40	; 0x28
 80050e2:	d005      	beq.n	80050f0 <I2C_ITError+0x44>
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b29      	cmp	r3, #41	; 0x29
 80050e8:	d002      	beq.n	80050f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b2a      	cmp	r3, #42	; 0x2a
 80050ee:	d10b      	bne.n	8005108 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050f0:	2103      	movs	r1, #3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa48 	bl	8005588 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2228      	movs	r2, #40	; 0x28
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a50      	ldr	r2, [pc, #320]	; (8005244 <I2C_ITError+0x198>)
 8005104:	635a      	str	r2, [r3, #52]	; 0x34
 8005106:	e011      	b.n	800512c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005108:	f248 0103 	movw	r1, #32771	; 0x8003
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fa3b 	bl	8005588 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b60      	cmp	r3, #96	; 0x60
 800511c:	d003      	beq.n	8005126 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d039      	beq.n	80051ae <I2C_ITError+0x102>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b11      	cmp	r3, #17
 800513e:	d002      	beq.n	8005146 <I2C_ITError+0x9a>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b21      	cmp	r3, #33	; 0x21
 8005144:	d133      	bne.n	80051ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005154:	d107      	bne.n	8005166 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005164:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe fb6c 	bl	8003848 <HAL_DMA_GetState>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d017      	beq.n	80051a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4a33      	ldr	r2, [pc, #204]	; (8005248 <I2C_ITError+0x19c>)
 800517c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe fa6c 	bl	8003668 <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d04d      	beq.n	8005232 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051a4:	e045      	b.n	8005232 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f850 	bl	800524c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ac:	e041      	b.n	8005232 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d039      	beq.n	800522a <I2C_ITError+0x17e>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b12      	cmp	r3, #18
 80051ba:	d002      	beq.n	80051c2 <I2C_ITError+0x116>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b22      	cmp	r3, #34	; 0x22
 80051c0:	d133      	bne.n	800522a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d0:	d107      	bne.n	80051e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe fb2e 	bl	8003848 <HAL_DMA_GetState>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d017      	beq.n	8005222 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <I2C_ITError+0x19c>)
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fa2e 	bl	8003668 <HAL_DMA_Abort_IT>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d011      	beq.n	8005236 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005220:	e009      	b.n	8005236 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f812 	bl	800524c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005228:	e005      	b.n	8005236 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f80e 	bl	800524c <I2C_TreatErrorCallback>
  }
}
 8005230:	e002      	b.n	8005238 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005236:	bf00      	nop
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	ffff0000 	.word	0xffff0000
 8005244:	0800446d 	.word	0x0800446d
 8005248:	080053a7 	.word	0x080053a7

0800524c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d10e      	bne.n	800527e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fe ffb7 	bl	80041ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800527c:	e009      	b.n	8005292 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fb fead 	bl	8000fec <HAL_I2C_ErrorCallback>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d103      	bne.n	80052b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d007      	beq.n	80052d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	619a      	str	r2, [r3, #24]
  }
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052fe:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800530a:	2120      	movs	r1, #32
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f8d7 	bl	80054c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005312:	e02d      	b.n	8005370 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800531c:	441a      	add	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2bff      	cmp	r3, #255	; 0xff
 800532a:	d903      	bls.n	8005334 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	; 0xff
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
 8005332:	e004      	b.n	800533e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	4619      	mov	r1, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3328      	adds	r3, #40	; 0x28
 800534e:	461a      	mov	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	f7fe f928 	bl	80035a8 <HAL_DMA_Start_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800535e:	2110      	movs	r1, #16
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fea3 	bl	80050ac <I2C_ITError>
}
 8005366:	e003      	b.n	8005370 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005368:	2140      	movs	r1, #64	; 0x40
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f8a8 	bl	80054c0 <I2C_Enable_IRQ>
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005394:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005396:	2110      	movs	r1, #16
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fe87 	bl	80050ac <I2C_ITError>
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	2200      	movs	r2, #0
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	2200      	movs	r2, #0
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff ff39 	bl	800524c <I2C_TreatErrorCallback>
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f2:	e022      	b.n	800543a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fa:	d01e      	beq.n	800543a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fc:	f7fc fbd2 	bl	8001ba4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x30>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d113      	bne.n	800543a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e00f      	b.n	800545a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d0cd      	beq.n	80053f4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	817b      	strh	r3, [r7, #10]
 8005472:	4613      	mov	r3, r2
 8005474:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	0d5b      	lsrs	r3, r3, #21
 8005480:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005484:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <I2C_TransferConfig+0x58>)
 8005486:	430b      	orrs	r3, r1
 8005488:	43db      	mvns	r3, r3
 800548a:	ea02 0103 	and.w	r1, r2, r3
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005494:	7a7b      	ldrb	r3, [r7, #9]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	03ff63ff 	.word	0x03ff63ff

080054c0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <I2C_Enable_IRQ+0xc0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80054de:	4a29      	ldr	r2, [pc, #164]	; (8005584 <I2C_Enable_IRQ+0xc4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d11d      	bne.n	8005520 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80054e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da03      	bge.n	80054f4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80054f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80054f4:	887b      	ldrh	r3, [r7, #2]
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d103      	bne.n	8005502 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005500:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005502:	887b      	ldrh	r3, [r7, #2]
 8005504:	2b20      	cmp	r3, #32
 8005506:	d103      	bne.n	8005510 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800550e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005510:	887b      	ldrh	r3, [r7, #2]
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d125      	bne.n	8005562 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800551e:	e020      	b.n	8005562 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005524:	2b00      	cmp	r3, #0
 8005526:	da03      	bge.n	8005530 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800552e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005530:	887b      	ldrh	r3, [r7, #2]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005540:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005552:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	2b20      	cmp	r3, #32
 8005558:	d103      	bne.n	8005562 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f043 0320 	orr.w	r3, r3, #32
 8005560:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6819      	ldr	r1, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	08004673 	.word	0x08004673
 8005584:	08004859 	.word	0x08004859

08005588 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005598:	887b      	ldrh	r3, [r7, #2]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00f      	beq.n	80055c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80055a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055b6:	2b28      	cmp	r3, #40	; 0x28
 80055b8:	d003      	beq.n	80055c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80055c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80055c2:	887b      	ldrh	r3, [r7, #2]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00f      	beq.n	80055ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80055d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055e0:	2b28      	cmp	r3, #40	; 0x28
 80055e2:	d003      	beq.n	80055ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80055ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80055ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da03      	bge.n	80055fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d103      	bne.n	800560a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800560a:	887b      	ldrh	r3, [r7, #2]
 800560c:	2b20      	cmp	r3, #32
 800560e:	d103      	bne.n	8005618 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f043 0320 	orr.w	r3, r3, #32
 8005616:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005618:	887b      	ldrh	r3, [r7, #2]
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d103      	bne.n	8005626 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005624:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	43da      	mvns	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	400a      	ands	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	d138      	bne.n	80056cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005664:	2302      	movs	r3, #2
 8005666:	e032      	b.n	80056ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	; 0x24
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d139      	bne.n	8005764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e033      	b.n	8005766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2224      	movs	r2, #36	; 0x24
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800572c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	e000      	b.n	8005766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <HAL_I2CEx_EnableFastModePlus+0x38>)
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6613      	str	r3, [r2, #96]	; 0x60
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <HAL_I2CEx_EnableFastModePlus+0x38>)
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4905      	ldr	r1, [pc, #20]	; (80057b0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40010000 	.word	0x40010000

080057b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c2:	6013      	str	r3, [r2, #0]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40007000 	.word	0x40007000

080057d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <HAL_PWREx_GetVoltageRange+0x18>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40007000 	.word	0x40007000

080057f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057fe:	d130      	bne.n	8005862 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005800:	4b23      	ldr	r3, [pc, #140]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580c:	d038      	beq.n	8005880 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800580e:	4b20      	ldr	r3, [pc, #128]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005816:	4a1e      	ldr	r2, [pc, #120]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800581c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800581e:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2232      	movs	r2, #50	; 0x32
 8005824:	fb02 f303 	mul.w	r3, r2, r3
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0c9b      	lsrs	r3, r3, #18
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005834:	e002      	b.n	800583c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3b01      	subs	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800583c:	4b14      	ldr	r3, [pc, #80]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005848:	d102      	bne.n	8005850 <HAL_PWREx_ControlVoltageScaling+0x60>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f2      	bne.n	8005836 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585c:	d110      	bne.n	8005880 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e00f      	b.n	8005882 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d007      	beq.n	8005880 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800587a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800587e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40007000 	.word	0x40007000
 8005894:	20000198 	.word	0x20000198
 8005898:	431bde83 	.word	0x431bde83

0800589c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f000 bc11 	b.w	80060d2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b0:	4ba0      	ldr	r3, [pc, #640]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 030c 	and.w	r3, r3, #12
 80058b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058ba:	4b9e      	ldr	r3, [pc, #632]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80e4 	beq.w	8005a9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4c>
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	f040 808b 	bne.w	80059f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 8087 	bne.w	80059f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058e8:	4b92      	ldr	r3, [pc, #584]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_OscConfig+0x64>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e3e8      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	4b8b      	ldr	r3, [pc, #556]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <HAL_RCC_OscConfig+0x7e>
 8005910:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005918:	e005      	b.n	8005926 <HAL_RCC_OscConfig+0x8a>
 800591a:	4b86      	ldr	r3, [pc, #536]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 800591c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005926:	4293      	cmp	r3, r2
 8005928:	d223      	bcs.n	8005972 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fd78 	bl	8006424 <RCC_SetFlashLatencyFromMSIRange>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e3c9      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800593e:	4b7d      	ldr	r3, [pc, #500]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a7c      	ldr	r2, [pc, #496]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005944:	f043 0308 	orr.w	r3, r3, #8
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	4b7a      	ldr	r3, [pc, #488]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	4977      	ldr	r1, [pc, #476]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800595c:	4b75      	ldr	r3, [pc, #468]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	4972      	ldr	r1, [pc, #456]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
 8005970:	e025      	b.n	80059be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005972:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a6f      	ldr	r2, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005978:	f043 0308 	orr.w	r3, r3, #8
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	496a      	ldr	r1, [pc, #424]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005990:	4b68      	ldr	r3, [pc, #416]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4965      	ldr	r1, [pc, #404]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fd38 	bl	8006424 <RCC_SetFlashLatencyFromMSIRange>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e389      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059be:	f000 fc6f 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 80059c2:	4601      	mov	r1, r0
 80059c4:	4b5b      	ldr	r3, [pc, #364]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	4a5a      	ldr	r2, [pc, #360]	; (8005b38 <HAL_RCC_OscConfig+0x29c>)
 80059d0:	5cd3      	ldrb	r3, [r2, r3]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	fa21 f303 	lsr.w	r3, r1, r3
 80059da:	4a58      	ldr	r2, [pc, #352]	; (8005b3c <HAL_RCC_OscConfig+0x2a0>)
 80059dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059de:	4b58      	ldr	r3, [pc, #352]	; (8005b40 <HAL_RCC_OscConfig+0x2a4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fc f88e 	bl	8001b04 <HAL_InitTick>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d052      	beq.n	8005a98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	e36d      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d032      	beq.n	8005a64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059fe:	4b4d      	ldr	r3, [pc, #308]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a4c      	ldr	r2, [pc, #304]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a0a:	f7fc f8cb 	bl	8001ba4 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a12:	f7fc f8c7 	bl	8001ba4 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e356      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a24:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a30:	4b40      	ldr	r3, [pc, #256]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a3f      	ldr	r2, [pc, #252]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a36:	f043 0308 	orr.w	r3, r3, #8
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b3d      	ldr	r3, [pc, #244]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	493a      	ldr	r1, [pc, #232]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a4e:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	4935      	ldr	r1, [pc, #212]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	604b      	str	r3, [r1, #4]
 8005a62:	e01a      	b.n	8005a9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a64:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a32      	ldr	r2, [pc, #200]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a70:	f7fc f898 	bl	8001ba4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a78:	f7fc f894 	bl	8001ba4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e323      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x1dc>
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d073      	beq.n	8005b8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x21c>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d063      	beq.n	8005b8c <HAL_RCC_OscConfig+0x2f0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d15f      	bne.n	8005b8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e300      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d106      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x24c>
 8005ada:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a15      	ldr	r2, [pc, #84]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e01d      	b.n	8005b24 <HAL_RCC_OscConfig+0x288>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x270>
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0x288>
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <HAL_RCC_OscConfig+0x298>)
 8005b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fc f83a 	bl	8001ba4 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b32:	e010      	b.n	8005b56 <HAL_RCC_OscConfig+0x2ba>
 8005b34:	40021000 	.word	0x40021000
 8005b38:	080092f4 	.word	0x080092f4
 8005b3c:	20000198 	.word	0x20000198
 8005b40:	2000019c 	.word	0x2000019c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fc f82e 	bl	8001ba4 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e2bd      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b56:	4baf      	ldr	r3, [pc, #700]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x2a8>
 8005b62:	e014      	b.n	8005b8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc f81e 	bl	8001ba4 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fc f81a 	bl	8001ba4 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e2a9      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b7e:	4ba5      	ldr	r3, [pc, #660]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x2d0>
 8005b8a:	e000      	b.n	8005b8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d060      	beq.n	8005c5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d005      	beq.n	8005bac <HAL_RCC_OscConfig+0x310>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b0c      	cmp	r3, #12
 8005ba4:	d119      	bne.n	8005bda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d116      	bne.n	8005bda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bac:	4b99      	ldr	r3, [pc, #612]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x328>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e286      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc4:	4b93      	ldr	r3, [pc, #588]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	061b      	lsls	r3, r3, #24
 8005bd2:	4990      	ldr	r1, [pc, #576]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd8:	e040      	b.n	8005c5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d023      	beq.n	8005c2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be2:	4b8c      	ldr	r3, [pc, #560]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a8b      	ldr	r2, [pc, #556]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fb ffd9 	bl	8001ba4 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf6:	f7fb ffd5 	bl	8001ba4 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e264      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c08:	4b82      	ldr	r3, [pc, #520]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c14:	4b7f      	ldr	r3, [pc, #508]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	061b      	lsls	r3, r3, #24
 8005c22:	497c      	ldr	r1, [pc, #496]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	604b      	str	r3, [r1, #4]
 8005c28:	e018      	b.n	8005c5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c2a:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a79      	ldr	r2, [pc, #484]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fb ffb5 	bl	8001ba4 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3e:	f7fb ffb1 	bl	8001ba4 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e240      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c50:	4b70      	ldr	r3, [pc, #448]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d03c      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01c      	beq.n	8005caa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c70:	4b68      	ldr	r3, [pc, #416]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c76:	4a67      	ldr	r2, [pc, #412]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fb ff90 	bl	8001ba4 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c88:	f7fb ff8c 	bl	8001ba4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e21b      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c9a:	4b5e      	ldr	r3, [pc, #376]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ef      	beq.n	8005c88 <HAL_RCC_OscConfig+0x3ec>
 8005ca8:	e01b      	b.n	8005ce2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005caa:	4b5a      	ldr	r3, [pc, #360]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb0:	4a58      	ldr	r2, [pc, #352]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cba:	f7fb ff73 	bl	8001ba4 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7fb ff6f 	bl	8001ba4 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e1fe      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cd4:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ef      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80a6 	beq.w	8005e3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cf4:	4b47      	ldr	r3, [pc, #284]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10d      	bne.n	8005d1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d00:	4b44      	ldr	r3, [pc, #272]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	4a43      	ldr	r2, [pc, #268]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d0c:	4b41      	ldr	r3, [pc, #260]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1c:	4b3e      	ldr	r3, [pc, #248]	; (8005e18 <HAL_RCC_OscConfig+0x57c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d118      	bne.n	8005d5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d28:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <HAL_RCC_OscConfig+0x57c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a3a      	ldr	r2, [pc, #232]	; (8005e18 <HAL_RCC_OscConfig+0x57c>)
 8005d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d34:	f7fb ff36 	bl	8001ba4 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d3c:	f7fb ff32 	bl	8001ba4 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e1c1      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4e:	4b32      	ldr	r3, [pc, #200]	; (8005e18 <HAL_RCC_OscConfig+0x57c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d108      	bne.n	8005d74 <HAL_RCC_OscConfig+0x4d8>
 8005d62:	4b2c      	ldr	r3, [pc, #176]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d68:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d72:	e024      	b.n	8005dbe <HAL_RCC_OscConfig+0x522>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d110      	bne.n	8005d9e <HAL_RCC_OscConfig+0x502>
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d84:	f043 0304 	orr.w	r3, r3, #4
 8005d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d9c:	e00f      	b.n	8005dbe <HAL_RCC_OscConfig+0x522>
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dae:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005db6:	f023 0304 	bic.w	r3, r3, #4
 8005dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fb feed 	bl	8001ba4 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fb fee9 	bl	8001ba4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e176      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_RCC_OscConfig+0x578>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0ed      	beq.n	8005dce <HAL_RCC_OscConfig+0x532>
 8005df2:	e01a      	b.n	8005e2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df4:	f7fb fed6 	bl	8001ba4 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dfa:	e00f      	b.n	8005e1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfc:	f7fb fed2 	bl	8001ba4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d906      	bls.n	8005e1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e15f      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
 8005e12:	bf00      	nop
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e1c:	4baa      	ldr	r3, [pc, #680]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e8      	bne.n	8005dfc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e2a:	7ffb      	ldrb	r3, [r7, #31]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4ba5      	ldr	r3, [pc, #660]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	4aa4      	ldr	r2, [pc, #656]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d03c      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01c      	beq.n	8005e8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e50:	4b9d      	ldr	r3, [pc, #628]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e56:	4a9c      	ldr	r2, [pc, #624]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e60:	f7fb fea0 	bl	8001ba4 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e68:	f7fb fe9c 	bl	8001ba4 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e12b      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e7a:	4b93      	ldr	r3, [pc, #588]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ef      	beq.n	8005e68 <HAL_RCC_OscConfig+0x5cc>
 8005e88:	e01b      	b.n	8005ec2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e8a:	4b8f      	ldr	r3, [pc, #572]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e90:	4a8d      	ldr	r2, [pc, #564]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005e92:	f023 0301 	bic.w	r3, r3, #1
 8005e96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9a:	f7fb fe83 	bl	8001ba4 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ea2:	f7fb fe7f 	bl	8001ba4 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e10e      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eb4:	4b84      	ldr	r3, [pc, #528]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1ef      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8102 	beq.w	80060d0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	f040 80c5 	bne.w	8006060 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ed6:	4b7c      	ldr	r3, [pc, #496]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0203 	and.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d12c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d123      	bne.n	8005f44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d11b      	bne.n	8005f44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d113      	bne.n	8005f44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d109      	bne.n	8005f44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d067      	beq.n	8006014 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d062      	beq.n	8006010 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f4a:	4b5f      	ldr	r3, [pc, #380]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e0bb      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f5a:	4b5b      	ldr	r3, [pc, #364]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a5a      	ldr	r2, [pc, #360]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f66:	f7fb fe1d 	bl	8001ba4 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fb fe19 	bl	8001ba4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e0a8      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f80:	4b51      	ldr	r3, [pc, #324]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f0      	bne.n	8005f6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f8c:	4b4e      	ldr	r3, [pc, #312]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4b4e      	ldr	r3, [pc, #312]	; (80060cc <HAL_RCC_OscConfig+0x830>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f9c:	3a01      	subs	r2, #1
 8005f9e:	0112      	lsls	r2, r2, #4
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fa6:	0212      	lsls	r2, r2, #8
 8005fa8:	4311      	orrs	r1, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fae:	0852      	lsrs	r2, r2, #1
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	0552      	lsls	r2, r2, #21
 8005fb4:	4311      	orrs	r1, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fba:	0852      	lsrs	r2, r2, #1
 8005fbc:	3a01      	subs	r2, #1
 8005fbe:	0652      	lsls	r2, r2, #25
 8005fc0:	4311      	orrs	r1, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc6:	06d2      	lsls	r2, r2, #27
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	493f      	ldr	r1, [pc, #252]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fd0:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fdc:	4b3a      	ldr	r3, [pc, #232]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8005fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fe8:	f7fb fddc 	bl	8001ba4 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fb fdd8 	bl	8001ba4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e067      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006002:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800600e:	e05f      	b.n	80060d0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e05e      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006014:	4b2c      	ldr	r3, [pc, #176]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d157      	bne.n	80060d0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006020:	4b29      	ldr	r3, [pc, #164]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800602a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006038:	f7fb fdb4 	bl	8001ba4 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006040:	f7fb fdb0 	bl	8001ba4 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e03f      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x7a4>
 800605e:	e037      	b.n	80060d0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d02d      	beq.n	80060c2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 800606c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006070:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006084:	f023 0303 	bic.w	r3, r3, #3
 8006088:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 8006090:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fb fd83 	bl	8001ba4 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a2:	f7fb fd7f 	bl	8001ba4 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e00e      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <HAL_RCC_OscConfig+0x82c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCC_OscConfig+0x806>
 80060c0:	e006      	b.n	80060d0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e005      	b.n	80060d2 <HAL_RCC_OscConfig+0x836>
 80060c6:	bf00      	nop
 80060c8:	40021000 	.word	0x40021000
 80060cc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop

080060dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0c8      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060f0:	4b66      	ldr	r3, [pc, #408]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d910      	bls.n	8006120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fe:	4b63      	ldr	r3, [pc, #396]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 0207 	bic.w	r2, r3, #7
 8006106:	4961      	ldr	r1, [pc, #388]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800610e:	4b5f      	ldr	r3, [pc, #380]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d001      	beq.n	8006120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0b0      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d04c      	beq.n	80061c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d107      	bne.n	8006144 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006134:	4b56      	ldr	r3, [pc, #344]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d121      	bne.n	8006184 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e09e      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d107      	bne.n	800615c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800614c:	4b50      	ldr	r3, [pc, #320]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d115      	bne.n	8006184 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e092      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d107      	bne.n	8006174 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006164:	4b4a      	ldr	r3, [pc, #296]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e086      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006174:	4b46      	ldr	r3, [pc, #280]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e07e      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006184:	4b42      	ldr	r3, [pc, #264]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f023 0203 	bic.w	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	493f      	ldr	r1, [pc, #252]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006196:	f7fb fd05 	bl	8001ba4 <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800619e:	f7fb fd01 	bl	8001ba4 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e066      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b4:	4b36      	ldr	r3, [pc, #216]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 020c 	and.w	r2, r3, #12
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d1eb      	bne.n	800619e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d2:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	492c      	ldr	r1, [pc, #176]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061e4:	4b29      	ldr	r3, [pc, #164]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d210      	bcs.n	8006214 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b26      	ldr	r3, [pc, #152]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f023 0207 	bic.w	r2, r3, #7
 80061fa:	4924      	ldr	r1, [pc, #144]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <HAL_RCC_ClockConfig+0x1b0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e036      	b.n	8006282 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006220:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4918      	ldr	r1, [pc, #96]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4910      	ldr	r1, [pc, #64]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006252:	f000 f825 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 8006256:	4601      	mov	r1, r0
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <HAL_RCC_ClockConfig+0x1b4>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4a0c      	ldr	r2, [pc, #48]	; (8006294 <HAL_RCC_ClockConfig+0x1b8>)
 8006264:	5cd3      	ldrb	r3, [r2, r3]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	fa21 f303 	lsr.w	r3, r1, r3
 800626e:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fb fc44 	bl	8001b04 <HAL_InitTick>
 800627c:	4603      	mov	r3, r0
 800627e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006280:	7afb      	ldrb	r3, [r7, #11]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40022000 	.word	0x40022000
 8006290:	40021000 	.word	0x40021000
 8006294:	080092f4 	.word	0x080092f4
 8006298:	20000198 	.word	0x20000198
 800629c:	2000019c 	.word	0x2000019c

080062a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b089      	sub	sp, #36	; 0x24
 80062a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ae:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b8:	4b3a      	ldr	r3, [pc, #232]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_GetSysClockFreq+0x34>
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d121      	bne.n	8006312 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d11e      	bne.n	8006312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062d4:	4b33      	ldr	r3, [pc, #204]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062e0:	4b30      	ldr	r3, [pc, #192]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80062e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	e005      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062f0:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062fc:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006304:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10d      	bne.n	8006328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006310:	e00a      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b04      	cmp	r3, #4
 8006316:	d102      	bne.n	800631e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e004      	b.n	8006328 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d101      	bne.n	8006328 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006324:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006326:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b0c      	cmp	r3, #12
 800632c:	d133      	bne.n	8006396 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800632e:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d002      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0xa4>
 800633e:	2b03      	cmp	r3, #3
 8006340:	d003      	beq.n	800634a <HAL_RCC_GetSysClockFreq+0xaa>
 8006342:	e005      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8006346:	617b      	str	r3, [r7, #20]
      break;
 8006348:	e005      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800634a:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800634c:	617b      	str	r3, [r7, #20]
      break;
 800634e:	e002      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	617b      	str	r3, [r7, #20]
      break;
 8006354:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	3301      	adds	r3, #1
 8006362:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	fb02 f203 	mul.w	r2, r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	0e5b      	lsrs	r3, r3, #25
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	3301      	adds	r3, #1
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006396:	69bb      	ldr	r3, [r7, #24]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3724      	adds	r7, #36	; 0x24
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40021000 	.word	0x40021000
 80063a8:	0800930c 	.word	0x0800930c
 80063ac:	00f42400 	.word	0x00f42400
 80063b0:	007a1200 	.word	0x007a1200

080063b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000198 	.word	0x20000198

080063cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063d0:	f7ff fff0 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063d4:	4601      	mov	r1, r0
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063e2:	5cd3      	ldrb	r3, [r2, r3]
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40021000 	.word	0x40021000
 80063f4:	08009304 	.word	0x08009304

080063f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063fc:	f7ff ffda 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 8006400:	4601      	mov	r1, r0
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	0adb      	lsrs	r3, r3, #11
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800640e:	5cd3      	ldrb	r3, [r2, r3]
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021000 	.word	0x40021000
 8006420:	08009304 	.word	0x08009304

08006424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006430:	4b2a      	ldr	r3, [pc, #168]	; (80064dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800643c:	f7ff f9ca 	bl	80057d4 <HAL_PWREx_GetVoltageRange>
 8006440:	6178      	str	r0, [r7, #20]
 8006442:	e014      	b.n	800646e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	4a24      	ldr	r2, [pc, #144]	; (80064dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800644a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644e:	6593      	str	r3, [r2, #88]	; 0x58
 8006450:	4b22      	ldr	r3, [pc, #136]	; (80064dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800645c:	f7ff f9ba 	bl	80057d4 <HAL_PWREx_GetVoltageRange>
 8006460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d10b      	bne.n	800648e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d919      	bls.n	80064b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2ba0      	cmp	r3, #160	; 0xa0
 8006480:	d902      	bls.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006482:	2302      	movs	r3, #2
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	e013      	b.n	80064b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006488:	2301      	movs	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e010      	b.n	80064b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b80      	cmp	r3, #128	; 0x80
 8006492:	d902      	bls.n	800649a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006494:	2303      	movs	r3, #3
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	e00a      	b.n	80064b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b80      	cmp	r3, #128	; 0x80
 800649e:	d102      	bne.n	80064a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064a0:	2302      	movs	r3, #2
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	e004      	b.n	80064b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b70      	cmp	r3, #112	; 0x70
 80064aa:	d101      	bne.n	80064b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064ac:	2301      	movs	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f023 0207 	bic.w	r2, r3, #7
 80064b8:	4909      	ldr	r1, [pc, #36]	; (80064e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d001      	beq.n	80064d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40021000 	.word	0x40021000
 80064e0:	40022000 	.word	0x40022000

080064e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064ec:	2300      	movs	r3, #0
 80064ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064f0:	2300      	movs	r3, #0
 80064f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02f      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006508:	d005      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800650a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800650e:	d015      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006516:	4bac      	ldr	r3, [pc, #688]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4aab      	ldr	r2, [pc, #684]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006520:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006522:	e00c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f9dc 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006534:	e003      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	74fb      	strb	r3, [r7, #19]
      break;
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800653c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006544:	4ba0      	ldr	r3, [pc, #640]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	499d      	ldr	r1, [pc, #628]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800655a:	e001      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8099 	beq.w	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656e:	2300      	movs	r3, #0
 8006570:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006572:	4b95      	ldr	r3, [pc, #596]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00d      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006588:	4b8f      	ldr	r3, [pc, #572]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658c:	4a8e      	ldr	r2, [pc, #568]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800658e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006592:	6593      	str	r3, [r2, #88]	; 0x58
 8006594:	4b8c      	ldr	r3, [pc, #560]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065a0:	2301      	movs	r3, #1
 80065a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065a4:	4b89      	ldr	r3, [pc, #548]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a88      	ldr	r2, [pc, #544]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065b0:	f7fb faf8 	bl	8001ba4 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065b6:	e009      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b8:	f7fb faf4 	bl	8001ba4 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d902      	bls.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	74fb      	strb	r3, [r7, #19]
        break;
 80065ca:	e005      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065cc:	4b7f      	ldr	r3, [pc, #508]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0ef      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d155      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065de:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d019      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065fa:	4b73      	ldr	r3, [pc, #460]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006604:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006606:	4b70      	ldr	r3, [pc, #448]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	4a6e      	ldr	r2, [pc, #440]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800660e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006616:	4b6c      	ldr	r3, [pc, #432]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661c:	4a6a      	ldr	r2, [pc, #424]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800661e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006626:	4a68      	ldr	r2, [pc, #416]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d016      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fb fab4 	bl	8001ba4 <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663e:	e00b      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006640:	f7fb fab0 	bl	8001ba4 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	; 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d902      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	74fb      	strb	r3, [r7, #19]
            break;
 8006656:	e006      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006658:	4b5b      	ldr	r3, [pc, #364]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0ec      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8006666:	7cfb      	ldrb	r3, [r7, #19]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666c:	4b56      	ldr	r3, [pc, #344]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	4953      	ldr	r1, [pc, #332]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006682:	e004      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	74bb      	strb	r3, [r7, #18]
 8006688:	e001      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	7cfb      	ldrb	r3, [r7, #19]
 800668c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800668e:	7c7b      	ldrb	r3, [r7, #17]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006694:	4b4c      	ldr	r3, [pc, #304]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006698:	4a4b      	ldr	r2, [pc, #300]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800669a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066ac:	4b46      	ldr	r3, [pc, #280]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f023 0203 	bic.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	4943      	ldr	r1, [pc, #268]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ce:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	f023 020c 	bic.w	r2, r3, #12
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	493a      	ldr	r1, [pc, #232]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066f0:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	4932      	ldr	r1, [pc, #200]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006712:	4b2d      	ldr	r3, [pc, #180]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	4929      	ldr	r1, [pc, #164]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006734:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	4921      	ldr	r1, [pc, #132]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006756:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4918      	ldr	r1, [pc, #96]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006778:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4910      	ldr	r1, [pc, #64]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d02c      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800679a:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	4907      	ldr	r1, [pc, #28]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b8:	d10a      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	4a02      	ldr	r2, [pc, #8]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c4:	60d3      	str	r3, [r2, #12]
 80067c6:	e015      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80067c8:	40021000 	.word	0x40021000
 80067cc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3304      	adds	r3, #4
 80067de:	2101      	movs	r1, #1
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 f881 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80067ea:	7cfb      	ldrb	r3, [r7, #19]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d028      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006800:	4b30      	ldr	r3, [pc, #192]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	492d      	ldr	r1, [pc, #180]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800681e:	d106      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006820:	4b28      	ldr	r3, [pc, #160]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682a:	60d3      	str	r3, [r2, #12]
 800682c:	e011      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006836:	d10c      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2101      	movs	r1, #1
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f852 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006848:	7cfb      	ldrb	r3, [r7, #19]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800684e:	7cfb      	ldrb	r3, [r7, #19]
 8006850:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01c      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686c:	4915      	ldr	r1, [pc, #84]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800687c:	d10c      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f82f 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800688e:	7cfb      	ldrb	r3, [r7, #19]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8006894:	7cfb      	ldrb	r3, [r7, #19]
 8006896:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	4904      	ldr	r1, [pc, #16]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40021000 	.word	0x40021000

080068c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a04      	ldr	r2, [pc, #16]	; (80068e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40021000 	.word	0x40021000

080068e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006902:	4b70      	ldr	r3, [pc, #448]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0203 	and.w	r2, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d10d      	bne.n	800692e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
       ||
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800691a:	4b6a      	ldr	r3, [pc, #424]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
       ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d044      	beq.n	80069b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
 8006932:	e041      	b.n	80069b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d00c      	beq.n	8006956 <RCCEx_PLLSAI1_Config+0x6e>
 800693c:	2b03      	cmp	r3, #3
 800693e:	d013      	beq.n	8006968 <RCCEx_PLLSAI1_Config+0x80>
 8006940:	2b01      	cmp	r3, #1
 8006942:	d120      	bne.n	8006986 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006944:	4b5f      	ldr	r3, [pc, #380]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11d      	bne.n	800698c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006954:	e01a      	b.n	800698c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006956:	4b5b      	ldr	r3, [pc, #364]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695e:	2b00      	cmp	r3, #0
 8006960:	d116      	bne.n	8006990 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006966:	e013      	b.n	8006990 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006968:	4b56      	ldr	r3, [pc, #344]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10f      	bne.n	8006994 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006974:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006984:	e006      	b.n	8006994 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
      break;
 800698a:	e004      	b.n	8006996 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006994:	bf00      	nop
    }

    if(status == HAL_OK)
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10d      	bne.n	80069b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800699c:	4b49      	ldr	r3, [pc, #292]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6819      	ldr	r1, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	430b      	orrs	r3, r1
 80069b2:	4944      	ldr	r1, [pc, #272]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d17c      	bne.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a40      	ldr	r2, [pc, #256]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ca:	f7fb f8eb 	bl	8001ba4 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069d0:	e009      	b.n	80069e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d2:	f7fb f8e7 	bl	8001ba4 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d902      	bls.n	80069e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	73fb      	strb	r3, [r7, #15]
        break;
 80069e4:	e005      	b.n	80069f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069e6:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1ef      	bne.n	80069d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d15f      	bne.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d110      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6892      	ldr	r2, [r2, #8]
 8006a0e:	0211      	lsls	r1, r2, #8
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68d2      	ldr	r2, [r2, #12]
 8006a14:	06d2      	lsls	r2, r2, #27
 8006a16:	430a      	orrs	r2, r1
 8006a18:	492a      	ldr	r1, [pc, #168]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]
 8006a1e:	e027      	b.n	8006a70 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d112      	bne.n	8006a4c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a26:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6892      	ldr	r2, [r2, #8]
 8006a36:	0211      	lsls	r1, r2, #8
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6912      	ldr	r2, [r2, #16]
 8006a3c:	0852      	lsrs	r2, r2, #1
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	0552      	lsls	r2, r2, #21
 8006a42:	430a      	orrs	r2, r1
 8006a44:	491f      	ldr	r1, [pc, #124]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]
 8006a4a:	e011      	b.n	8006a70 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6892      	ldr	r2, [r2, #8]
 8006a5c:	0211      	lsls	r1, r2, #8
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6952      	ldr	r2, [r2, #20]
 8006a62:	0852      	lsrs	r2, r2, #1
 8006a64:	3a01      	subs	r2, #1
 8006a66:	0652      	lsls	r2, r2, #25
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	4916      	ldr	r1, [pc, #88]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7c:	f7fb f892 	bl	8001ba4 <HAL_GetTick>
 8006a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a82:	e009      	b.n	8006a98 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a84:	f7fb f88e 	bl	8001ba4 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d902      	bls.n	8006a98 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	73fb      	strb	r3, [r7, #15]
          break;
 8006a96:	e005      	b.n	8006aa4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0ef      	beq.n	8006a84 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	4904      	ldr	r1, [pc, #16]	; (8006ac4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e049      	b.n	8006b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fa ff22 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f000 f882 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d001      	beq.n	8006b90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e033      	b.n	8006bf8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <HAL_TIM_Base_Start+0x8c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_TIM_Base_Start+0x3e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006baa:	d004      	beq.n	8006bb6 <HAL_TIM_Base_Start+0x3e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_TIM_Base_Start+0x90>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d115      	bne.n	8006be2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <HAL_TIM_Base_Start+0x94>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b06      	cmp	r3, #6
 8006bc6:	d015      	beq.n	8006bf4 <HAL_TIM_Base_Start+0x7c>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bce:	d011      	beq.n	8006bf4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be0:	e008      	b.n	8006bf4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e000      	b.n	8006bf6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40014000 	.word	0x40014000
 8006c0c:	00010007 	.word	0x00010007

08006c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_Base_SetConfig+0xbc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_Base_SetConfig+0x20>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d108      	bne.n	8006c42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a21      	ldr	r2, [pc, #132]	; (8006ccc <TIM_Base_SetConfig+0xbc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00b      	beq.n	8006c62 <TIM_Base_SetConfig+0x52>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d007      	beq.n	8006c62 <TIM_Base_SetConfig+0x52>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <TIM_Base_SetConfig+0xc0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_Base_SetConfig+0x52>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <TIM_Base_SetConfig+0xc4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d108      	bne.n	8006c74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a0c      	ldr	r2, [pc, #48]	; (8006ccc <TIM_Base_SetConfig+0xbc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_Base_SetConfig+0xa0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a0b      	ldr	r2, [pc, #44]	; (8006cd0 <TIM_Base_SetConfig+0xc0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_Base_SetConfig+0xa0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <TIM_Base_SetConfig+0xc4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d103      	bne.n	8006cb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	615a      	str	r2, [r3, #20]
}
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40012c00 	.word	0x40012c00
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400

08006cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e04f      	b.n	8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d108      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a14      	ldr	r2, [pc, #80]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d009      	beq.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d58:	d004      	beq.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d10c      	bne.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40014000 	.word	0x40014000

08006da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e040      	b.n	8006e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fa fe06 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2224      	movs	r2, #36	; 0x24
 8006dd0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0201 	bic.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f8c0 	bl	8006f68 <UART_SetConfig>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e022      	b.n	8006e38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fac4 	bl	8007388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb4b 	bl	80074cc <UART_CheckIdleState>
 8006e36:	4603      	mov	r3, r0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	f040 8081 	bne.w	8006f5c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <HAL_UART_Transmit+0x26>
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e079      	b.n	8006f5e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_UART_Transmit+0x38>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e072      	b.n	8006f5e <HAL_UART_Transmit+0x11e>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2221      	movs	r2, #33	; 0x21
 8006e8a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006e8c:	f7fa fe8a 	bl	8001ba4 <HAL_GetTick>
 8006e90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eaa:	d108      	bne.n	8006ebe <HAL_UART_Transmit+0x7e>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e003      	b.n	8006ec6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006ece:	e02d      	b.n	8006f2c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2180      	movs	r1, #128	; 0x80
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fb3b 	bl	8007556 <UART_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e039      	b.n	8006f5e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	881a      	ldrh	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006efc:	b292      	uxth	r2, r2
 8006efe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	3302      	adds	r3, #2
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e008      	b.n	8006f1a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	b292      	uxth	r2, r2
 8006f12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1cb      	bne.n	8006ed0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2140      	movs	r1, #64	; 0x40
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fb07 	bl	8007556 <UART_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e005      	b.n	8006f5e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e000      	b.n	8006f5e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006f5c:	2302      	movs	r3, #2
  }
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006f6c:	b088      	sub	sp, #32
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4bb0      	ldr	r3, [pc, #704]	; (8007258 <UART_SetConfig+0x2f0>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	69f9      	ldr	r1, [r7, #28]
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4aa6      	ldr	r2, [pc, #664]	; (800725c <UART_SetConfig+0x2f4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a9d      	ldr	r2, [pc, #628]	; (8007260 <UART_SetConfig+0x2f8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d121      	bne.n	8007034 <UART_SetConfig+0xcc>
 8006ff0:	4b9c      	ldr	r3, [pc, #624]	; (8007264 <UART_SetConfig+0x2fc>)
 8006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d816      	bhi.n	800702c <UART_SetConfig+0xc4>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x9c>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007015 	.word	0x08007015
 8007008:	08007021 	.word	0x08007021
 800700c:	0800701b 	.word	0x0800701b
 8007010:	08007027 	.word	0x08007027
 8007014:	2301      	movs	r3, #1
 8007016:	76fb      	strb	r3, [r7, #27]
 8007018:	e072      	b.n	8007100 <UART_SetConfig+0x198>
 800701a:	2302      	movs	r3, #2
 800701c:	76fb      	strb	r3, [r7, #27]
 800701e:	e06f      	b.n	8007100 <UART_SetConfig+0x198>
 8007020:	2304      	movs	r3, #4
 8007022:	76fb      	strb	r3, [r7, #27]
 8007024:	e06c      	b.n	8007100 <UART_SetConfig+0x198>
 8007026:	2308      	movs	r3, #8
 8007028:	76fb      	strb	r3, [r7, #27]
 800702a:	e069      	b.n	8007100 <UART_SetConfig+0x198>
 800702c:	2310      	movs	r3, #16
 800702e:	76fb      	strb	r3, [r7, #27]
 8007030:	bf00      	nop
 8007032:	e065      	b.n	8007100 <UART_SetConfig+0x198>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a8b      	ldr	r2, [pc, #556]	; (8007268 <UART_SetConfig+0x300>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d134      	bne.n	80070a8 <UART_SetConfig+0x140>
 800703e:	4b89      	ldr	r3, [pc, #548]	; (8007264 <UART_SetConfig+0x2fc>)
 8007040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b0c      	cmp	r3, #12
 800704a:	d829      	bhi.n	80070a0 <UART_SetConfig+0x138>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0xec>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007089 	.word	0x08007089
 8007058:	080070a1 	.word	0x080070a1
 800705c:	080070a1 	.word	0x080070a1
 8007060:	080070a1 	.word	0x080070a1
 8007064:	08007095 	.word	0x08007095
 8007068:	080070a1 	.word	0x080070a1
 800706c:	080070a1 	.word	0x080070a1
 8007070:	080070a1 	.word	0x080070a1
 8007074:	0800708f 	.word	0x0800708f
 8007078:	080070a1 	.word	0x080070a1
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a1 	.word	0x080070a1
 8007084:	0800709b 	.word	0x0800709b
 8007088:	2300      	movs	r3, #0
 800708a:	76fb      	strb	r3, [r7, #27]
 800708c:	e038      	b.n	8007100 <UART_SetConfig+0x198>
 800708e:	2302      	movs	r3, #2
 8007090:	76fb      	strb	r3, [r7, #27]
 8007092:	e035      	b.n	8007100 <UART_SetConfig+0x198>
 8007094:	2304      	movs	r3, #4
 8007096:	76fb      	strb	r3, [r7, #27]
 8007098:	e032      	b.n	8007100 <UART_SetConfig+0x198>
 800709a:	2308      	movs	r3, #8
 800709c:	76fb      	strb	r3, [r7, #27]
 800709e:	e02f      	b.n	8007100 <UART_SetConfig+0x198>
 80070a0:	2310      	movs	r3, #16
 80070a2:	76fb      	strb	r3, [r7, #27]
 80070a4:	bf00      	nop
 80070a6:	e02b      	b.n	8007100 <UART_SetConfig+0x198>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6b      	ldr	r2, [pc, #428]	; (800725c <UART_SetConfig+0x2f4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d124      	bne.n	80070fc <UART_SetConfig+0x194>
 80070b2:	4b6c      	ldr	r3, [pc, #432]	; (8007264 <UART_SetConfig+0x2fc>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c0:	d012      	beq.n	80070e8 <UART_SetConfig+0x180>
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c6:	d802      	bhi.n	80070ce <UART_SetConfig+0x166>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <UART_SetConfig+0x174>
 80070cc:	e012      	b.n	80070f4 <UART_SetConfig+0x18c>
 80070ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d2:	d006      	beq.n	80070e2 <UART_SetConfig+0x17a>
 80070d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d8:	d009      	beq.n	80070ee <UART_SetConfig+0x186>
 80070da:	e00b      	b.n	80070f4 <UART_SetConfig+0x18c>
 80070dc:	2300      	movs	r3, #0
 80070de:	76fb      	strb	r3, [r7, #27]
 80070e0:	e00e      	b.n	8007100 <UART_SetConfig+0x198>
 80070e2:	2302      	movs	r3, #2
 80070e4:	76fb      	strb	r3, [r7, #27]
 80070e6:	e00b      	b.n	8007100 <UART_SetConfig+0x198>
 80070e8:	2304      	movs	r3, #4
 80070ea:	76fb      	strb	r3, [r7, #27]
 80070ec:	e008      	b.n	8007100 <UART_SetConfig+0x198>
 80070ee:	2308      	movs	r3, #8
 80070f0:	76fb      	strb	r3, [r7, #27]
 80070f2:	e005      	b.n	8007100 <UART_SetConfig+0x198>
 80070f4:	2310      	movs	r3, #16
 80070f6:	76fb      	strb	r3, [r7, #27]
 80070f8:	bf00      	nop
 80070fa:	e001      	b.n	8007100 <UART_SetConfig+0x198>
 80070fc:	2310      	movs	r3, #16
 80070fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a55      	ldr	r2, [pc, #340]	; (800725c <UART_SetConfig+0x2f4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d174      	bne.n	80071f4 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800710a:	7efb      	ldrb	r3, [r7, #27]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d824      	bhi.n	800715a <UART_SetConfig+0x1f2>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <UART_SetConfig+0x1b0>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800713d 	.word	0x0800713d
 800711c:	0800715b 	.word	0x0800715b
 8007120:	08007145 	.word	0x08007145
 8007124:	0800715b 	.word	0x0800715b
 8007128:	0800714b 	.word	0x0800714b
 800712c:	0800715b 	.word	0x0800715b
 8007130:	0800715b 	.word	0x0800715b
 8007134:	0800715b 	.word	0x0800715b
 8007138:	08007153 	.word	0x08007153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800713c:	f7ff f946 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 8007140:	6178      	str	r0, [r7, #20]
        break;
 8007142:	e00f      	b.n	8007164 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007144:	4b49      	ldr	r3, [pc, #292]	; (800726c <UART_SetConfig+0x304>)
 8007146:	617b      	str	r3, [r7, #20]
        break;
 8007148:	e00c      	b.n	8007164 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800714a:	f7ff f8a9 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 800714e:	6178      	str	r0, [r7, #20]
        break;
 8007150:	e008      	b.n	8007164 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007156:	617b      	str	r3, [r7, #20]
        break;
 8007158:	e004      	b.n	8007164 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	76bb      	strb	r3, [r7, #26]
        break;
 8007162:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8100 	beq.w	800736c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	4413      	add	r3, r2
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	429a      	cmp	r2, r3
 800717a:	d305      	bcc.n	8007188 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	429a      	cmp	r2, r3
 8007186:	d902      	bls.n	800718e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	76bb      	strb	r3, [r7, #26]
 800718c:	e0ee      	b.n	800736c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4619      	mov	r1, r3
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	f04f 0400 	mov.w	r4, #0
 800719e:	0214      	lsls	r4, r2, #8
 80071a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80071a4:	020b      	lsls	r3, r1, #8
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6852      	ldr	r2, [r2, #4]
 80071aa:	0852      	lsrs	r2, r2, #1
 80071ac:	4611      	mov	r1, r2
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	eb13 0b01 	adds.w	fp, r3, r1
 80071b6:	eb44 0c02 	adc.w	ip, r4, r2
 80071ba:	4658      	mov	r0, fp
 80071bc:	4661      	mov	r1, ip
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f04f 0400 	mov.w	r4, #0
 80071c6:	461a      	mov	r2, r3
 80071c8:	4623      	mov	r3, r4
 80071ca:	f7f9 f851 	bl	8000270 <__aeabi_uldivmod>
 80071ce:	4603      	mov	r3, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071da:	d308      	bcc.n	80071ee <UART_SetConfig+0x286>
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e2:	d204      	bcs.n	80071ee <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	60da      	str	r2, [r3, #12]
 80071ec:	e0be      	b.n	800736c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	76bb      	strb	r3, [r7, #26]
 80071f2:	e0bb      	b.n	800736c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fc:	d169      	bne.n	80072d2 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80071fe:	7efb      	ldrb	r3, [r7, #27]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d835      	bhi.n	8007270 <UART_SetConfig+0x308>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x2a4>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007231 	.word	0x08007231
 8007210:	08007239 	.word	0x08007239
 8007214:	08007241 	.word	0x08007241
 8007218:	08007271 	.word	0x08007271
 800721c:	08007247 	.word	0x08007247
 8007220:	08007271 	.word	0x08007271
 8007224:	08007271 	.word	0x08007271
 8007228:	08007271 	.word	0x08007271
 800722c:	0800724f 	.word	0x0800724f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007230:	f7ff f8cc 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 8007234:	6178      	str	r0, [r7, #20]
        break;
 8007236:	e020      	b.n	800727a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007238:	f7ff f8de 	bl	80063f8 <HAL_RCC_GetPCLK2Freq>
 800723c:	6178      	str	r0, [r7, #20]
        break;
 800723e:	e01c      	b.n	800727a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <UART_SetConfig+0x304>)
 8007242:	617b      	str	r3, [r7, #20]
        break;
 8007244:	e019      	b.n	800727a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007246:	f7ff f82b 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 800724a:	6178      	str	r0, [r7, #20]
        break;
 800724c:	e015      	b.n	800727a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007252:	617b      	str	r3, [r7, #20]
        break;
 8007254:	e011      	b.n	800727a <UART_SetConfig+0x312>
 8007256:	bf00      	nop
 8007258:	efff69f3 	.word	0xefff69f3
 800725c:	40008000 	.word	0x40008000
 8007260:	40013800 	.word	0x40013800
 8007264:	40021000 	.word	0x40021000
 8007268:	40004400 	.word	0x40004400
 800726c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	76bb      	strb	r3, [r7, #26]
        break;
 8007278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d075      	beq.n	800736c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	005a      	lsls	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	441a      	add	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	b29b      	uxth	r3, r3
 8007296:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b0f      	cmp	r3, #15
 800729c:	d916      	bls.n	80072cc <UART_SetConfig+0x364>
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a4:	d212      	bcs.n	80072cc <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f023 030f 	bic.w	r3, r3, #15
 80072ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	89fb      	ldrh	r3, [r7, #14]
 80072be:	4313      	orrs	r3, r2
 80072c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	89fa      	ldrh	r2, [r7, #14]
 80072c8:	60da      	str	r2, [r3, #12]
 80072ca:	e04f      	b.n	800736c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	76bb      	strb	r3, [r7, #26]
 80072d0:	e04c      	b.n	800736c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d2:	7efb      	ldrb	r3, [r7, #27]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d828      	bhi.n	800732a <UART_SetConfig+0x3c2>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <UART_SetConfig+0x378>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	08007305 	.word	0x08007305
 80072e4:	0800730d 	.word	0x0800730d
 80072e8:	08007315 	.word	0x08007315
 80072ec:	0800732b 	.word	0x0800732b
 80072f0:	0800731b 	.word	0x0800731b
 80072f4:	0800732b 	.word	0x0800732b
 80072f8:	0800732b 	.word	0x0800732b
 80072fc:	0800732b 	.word	0x0800732b
 8007300:	08007323 	.word	0x08007323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007304:	f7ff f862 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 8007308:	6178      	str	r0, [r7, #20]
        break;
 800730a:	e013      	b.n	8007334 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800730c:	f7ff f874 	bl	80063f8 <HAL_RCC_GetPCLK2Freq>
 8007310:	6178      	str	r0, [r7, #20]
        break;
 8007312:	e00f      	b.n	8007334 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <UART_SetConfig+0x41c>)
 8007316:	617b      	str	r3, [r7, #20]
        break;
 8007318:	e00c      	b.n	8007334 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731a:	f7fe ffc1 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 800731e:	6178      	str	r0, [r7, #20]
        break;
 8007320:	e008      	b.n	8007334 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007326:	617b      	str	r3, [r7, #20]
        break;
 8007328:	e004      	b.n	8007334 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	76bb      	strb	r3, [r7, #26]
        break;
 8007332:	bf00      	nop
    }

    if (pclk != 0U)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d018      	beq.n	800736c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	085a      	lsrs	r2, r3, #1
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	441a      	add	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	b29b      	uxth	r3, r3
 800734e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d908      	bls.n	8007368 <UART_SetConfig+0x400>
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735c:	d204      	bcs.n	8007368 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	60da      	str	r2, [r3, #12]
 8007366:	e001      	b.n	800736c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007378:	7ebb      	ldrb	r3, [r7, #26]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007384:	00f42400 	.word	0x00f42400

08007388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01a      	beq.n	800749e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007486:	d10a      	bne.n	800749e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	605a      	str	r2, [r3, #4]
  }
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80074da:	f7fa fb63 	bl	8001ba4 <HAL_GetTick>
 80074de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d10e      	bne.n	800750c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f82a 	bl	8007556 <UART_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e020      	b.n	800754e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b04      	cmp	r3, #4
 8007518:	d10e      	bne.n	8007538 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f814 	bl	8007556 <UART_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e00a      	b.n	800754e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007566:	e05d      	b.n	8007624 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756e:	d059      	beq.n	8007624 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007570:	f7fa fb18 	bl	8001ba4 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	429a      	cmp	r2, r3
 800757e:	d302      	bcc.n	8007586 <UART_WaitOnFlagUntilTimeout+0x30>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d11b      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007594:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0201 	bic.w	r2, r2, #1
 80075a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e042      	b.n	8007644 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d02b      	beq.n	8007624 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075da:	d123      	bne.n	8007624 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e00f      	b.n	8007644 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69da      	ldr	r2, [r3, #28]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4013      	ands	r3, r2
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	429a      	cmp	r2, r3
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	429a      	cmp	r2, r3
 8007640:	d092      	beq.n	8007568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <__errno>:
 800764c:	4b01      	ldr	r3, [pc, #4]	; (8007654 <__errno+0x8>)
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	200001a4 	.word	0x200001a4

08007658 <__libc_init_array>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	4e0d      	ldr	r6, [pc, #52]	; (8007690 <__libc_init_array+0x38>)
 800765c:	4c0d      	ldr	r4, [pc, #52]	; (8007694 <__libc_init_array+0x3c>)
 800765e:	1ba4      	subs	r4, r4, r6
 8007660:	10a4      	asrs	r4, r4, #2
 8007662:	2500      	movs	r5, #0
 8007664:	42a5      	cmp	r5, r4
 8007666:	d109      	bne.n	800767c <__libc_init_array+0x24>
 8007668:	4e0b      	ldr	r6, [pc, #44]	; (8007698 <__libc_init_array+0x40>)
 800766a:	4c0c      	ldr	r4, [pc, #48]	; (800769c <__libc_init_array+0x44>)
 800766c:	f000 ff68 	bl	8008540 <_init>
 8007670:	1ba4      	subs	r4, r4, r6
 8007672:	10a4      	asrs	r4, r4, #2
 8007674:	2500      	movs	r5, #0
 8007676:	42a5      	cmp	r5, r4
 8007678:	d105      	bne.n	8007686 <__libc_init_array+0x2e>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007680:	4798      	blx	r3
 8007682:	3501      	adds	r5, #1
 8007684:	e7ee      	b.n	8007664 <__libc_init_array+0xc>
 8007686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800768a:	4798      	blx	r3
 800768c:	3501      	adds	r5, #1
 800768e:	e7f2      	b.n	8007676 <__libc_init_array+0x1e>
 8007690:	080093dc 	.word	0x080093dc
 8007694:	080093dc 	.word	0x080093dc
 8007698:	080093dc 	.word	0x080093dc
 800769c:	080093e0 	.word	0x080093e0

080076a0 <memset>:
 80076a0:	4402      	add	r2, r0
 80076a2:	4603      	mov	r3, r0
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d100      	bne.n	80076aa <memset+0xa>
 80076a8:	4770      	bx	lr
 80076aa:	f803 1b01 	strb.w	r1, [r3], #1
 80076ae:	e7f9      	b.n	80076a4 <memset+0x4>

080076b0 <iprintf>:
 80076b0:	b40f      	push	{r0, r1, r2, r3}
 80076b2:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <iprintf+0x2c>)
 80076b4:	b513      	push	{r0, r1, r4, lr}
 80076b6:	681c      	ldr	r4, [r3, #0]
 80076b8:	b124      	cbz	r4, 80076c4 <iprintf+0x14>
 80076ba:	69a3      	ldr	r3, [r4, #24]
 80076bc:	b913      	cbnz	r3, 80076c4 <iprintf+0x14>
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 fa22 	bl	8007b08 <__sinit>
 80076c4:	ab05      	add	r3, sp, #20
 80076c6:	9a04      	ldr	r2, [sp, #16]
 80076c8:	68a1      	ldr	r1, [r4, #8]
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fbdb 	bl	8007e88 <_vfiprintf_r>
 80076d2:	b002      	add	sp, #8
 80076d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d8:	b004      	add	sp, #16
 80076da:	4770      	bx	lr
 80076dc:	200001a4 	.word	0x200001a4

080076e0 <_puts_r>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	460e      	mov	r6, r1
 80076e4:	4605      	mov	r5, r0
 80076e6:	b118      	cbz	r0, 80076f0 <_puts_r+0x10>
 80076e8:	6983      	ldr	r3, [r0, #24]
 80076ea:	b90b      	cbnz	r3, 80076f0 <_puts_r+0x10>
 80076ec:	f000 fa0c 	bl	8007b08 <__sinit>
 80076f0:	69ab      	ldr	r3, [r5, #24]
 80076f2:	68ac      	ldr	r4, [r5, #8]
 80076f4:	b913      	cbnz	r3, 80076fc <_puts_r+0x1c>
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 fa06 	bl	8007b08 <__sinit>
 80076fc:	4b23      	ldr	r3, [pc, #140]	; (800778c <_puts_r+0xac>)
 80076fe:	429c      	cmp	r4, r3
 8007700:	d117      	bne.n	8007732 <_puts_r+0x52>
 8007702:	686c      	ldr	r4, [r5, #4]
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	071b      	lsls	r3, r3, #28
 8007708:	d51d      	bpl.n	8007746 <_puts_r+0x66>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	b1db      	cbz	r3, 8007746 <_puts_r+0x66>
 800770e:	3e01      	subs	r6, #1
 8007710:	68a3      	ldr	r3, [r4, #8]
 8007712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007716:	3b01      	subs	r3, #1
 8007718:	60a3      	str	r3, [r4, #8]
 800771a:	b9e9      	cbnz	r1, 8007758 <_puts_r+0x78>
 800771c:	2b00      	cmp	r3, #0
 800771e:	da2e      	bge.n	800777e <_puts_r+0x9e>
 8007720:	4622      	mov	r2, r4
 8007722:	210a      	movs	r1, #10
 8007724:	4628      	mov	r0, r5
 8007726:	f000 f83f 	bl	80077a8 <__swbuf_r>
 800772a:	3001      	adds	r0, #1
 800772c:	d011      	beq.n	8007752 <_puts_r+0x72>
 800772e:	200a      	movs	r0, #10
 8007730:	e011      	b.n	8007756 <_puts_r+0x76>
 8007732:	4b17      	ldr	r3, [pc, #92]	; (8007790 <_puts_r+0xb0>)
 8007734:	429c      	cmp	r4, r3
 8007736:	d101      	bne.n	800773c <_puts_r+0x5c>
 8007738:	68ac      	ldr	r4, [r5, #8]
 800773a:	e7e3      	b.n	8007704 <_puts_r+0x24>
 800773c:	4b15      	ldr	r3, [pc, #84]	; (8007794 <_puts_r+0xb4>)
 800773e:	429c      	cmp	r4, r3
 8007740:	bf08      	it	eq
 8007742:	68ec      	ldreq	r4, [r5, #12]
 8007744:	e7de      	b.n	8007704 <_puts_r+0x24>
 8007746:	4621      	mov	r1, r4
 8007748:	4628      	mov	r0, r5
 800774a:	f000 f87f 	bl	800784c <__swsetup_r>
 800774e:	2800      	cmp	r0, #0
 8007750:	d0dd      	beq.n	800770e <_puts_r+0x2e>
 8007752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	2b00      	cmp	r3, #0
 800775a:	da04      	bge.n	8007766 <_puts_r+0x86>
 800775c:	69a2      	ldr	r2, [r4, #24]
 800775e:	429a      	cmp	r2, r3
 8007760:	dc06      	bgt.n	8007770 <_puts_r+0x90>
 8007762:	290a      	cmp	r1, #10
 8007764:	d004      	beq.n	8007770 <_puts_r+0x90>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	6022      	str	r2, [r4, #0]
 800776c:	7019      	strb	r1, [r3, #0]
 800776e:	e7cf      	b.n	8007710 <_puts_r+0x30>
 8007770:	4622      	mov	r2, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f818 	bl	80077a8 <__swbuf_r>
 8007778:	3001      	adds	r0, #1
 800777a:	d1c9      	bne.n	8007710 <_puts_r+0x30>
 800777c:	e7e9      	b.n	8007752 <_puts_r+0x72>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	200a      	movs	r0, #10
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	7018      	strb	r0, [r3, #0]
 8007788:	e7e5      	b.n	8007756 <_puts_r+0x76>
 800778a:	bf00      	nop
 800778c:	08009360 	.word	0x08009360
 8007790:	08009380 	.word	0x08009380
 8007794:	08009340 	.word	0x08009340

08007798 <puts>:
 8007798:	4b02      	ldr	r3, [pc, #8]	; (80077a4 <puts+0xc>)
 800779a:	4601      	mov	r1, r0
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	f7ff bf9f 	b.w	80076e0 <_puts_r>
 80077a2:	bf00      	nop
 80077a4:	200001a4 	.word	0x200001a4

080077a8 <__swbuf_r>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	460e      	mov	r6, r1
 80077ac:	4614      	mov	r4, r2
 80077ae:	4605      	mov	r5, r0
 80077b0:	b118      	cbz	r0, 80077ba <__swbuf_r+0x12>
 80077b2:	6983      	ldr	r3, [r0, #24]
 80077b4:	b90b      	cbnz	r3, 80077ba <__swbuf_r+0x12>
 80077b6:	f000 f9a7 	bl	8007b08 <__sinit>
 80077ba:	4b21      	ldr	r3, [pc, #132]	; (8007840 <__swbuf_r+0x98>)
 80077bc:	429c      	cmp	r4, r3
 80077be:	d12a      	bne.n	8007816 <__swbuf_r+0x6e>
 80077c0:	686c      	ldr	r4, [r5, #4]
 80077c2:	69a3      	ldr	r3, [r4, #24]
 80077c4:	60a3      	str	r3, [r4, #8]
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	071a      	lsls	r2, r3, #28
 80077ca:	d52e      	bpl.n	800782a <__swbuf_r+0x82>
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	b363      	cbz	r3, 800782a <__swbuf_r+0x82>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	6820      	ldr	r0, [r4, #0]
 80077d4:	1ac0      	subs	r0, r0, r3
 80077d6:	6963      	ldr	r3, [r4, #20]
 80077d8:	b2f6      	uxtb	r6, r6
 80077da:	4283      	cmp	r3, r0
 80077dc:	4637      	mov	r7, r6
 80077de:	dc04      	bgt.n	80077ea <__swbuf_r+0x42>
 80077e0:	4621      	mov	r1, r4
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 f926 	bl	8007a34 <_fflush_r>
 80077e8:	bb28      	cbnz	r0, 8007836 <__swbuf_r+0x8e>
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	60a3      	str	r3, [r4, #8]
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	6022      	str	r2, [r4, #0]
 80077f6:	701e      	strb	r6, [r3, #0]
 80077f8:	6963      	ldr	r3, [r4, #20]
 80077fa:	3001      	adds	r0, #1
 80077fc:	4283      	cmp	r3, r0
 80077fe:	d004      	beq.n	800780a <__swbuf_r+0x62>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	07db      	lsls	r3, r3, #31
 8007804:	d519      	bpl.n	800783a <__swbuf_r+0x92>
 8007806:	2e0a      	cmp	r6, #10
 8007808:	d117      	bne.n	800783a <__swbuf_r+0x92>
 800780a:	4621      	mov	r1, r4
 800780c:	4628      	mov	r0, r5
 800780e:	f000 f911 	bl	8007a34 <_fflush_r>
 8007812:	b190      	cbz	r0, 800783a <__swbuf_r+0x92>
 8007814:	e00f      	b.n	8007836 <__swbuf_r+0x8e>
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <__swbuf_r+0x9c>)
 8007818:	429c      	cmp	r4, r3
 800781a:	d101      	bne.n	8007820 <__swbuf_r+0x78>
 800781c:	68ac      	ldr	r4, [r5, #8]
 800781e:	e7d0      	b.n	80077c2 <__swbuf_r+0x1a>
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <__swbuf_r+0xa0>)
 8007822:	429c      	cmp	r4, r3
 8007824:	bf08      	it	eq
 8007826:	68ec      	ldreq	r4, [r5, #12]
 8007828:	e7cb      	b.n	80077c2 <__swbuf_r+0x1a>
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f000 f80d 	bl	800784c <__swsetup_r>
 8007832:	2800      	cmp	r0, #0
 8007834:	d0cc      	beq.n	80077d0 <__swbuf_r+0x28>
 8007836:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800783a:	4638      	mov	r0, r7
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783e:	bf00      	nop
 8007840:	08009360 	.word	0x08009360
 8007844:	08009380 	.word	0x08009380
 8007848:	08009340 	.word	0x08009340

0800784c <__swsetup_r>:
 800784c:	4b32      	ldr	r3, [pc, #200]	; (8007918 <__swsetup_r+0xcc>)
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	681d      	ldr	r5, [r3, #0]
 8007852:	4606      	mov	r6, r0
 8007854:	460c      	mov	r4, r1
 8007856:	b125      	cbz	r5, 8007862 <__swsetup_r+0x16>
 8007858:	69ab      	ldr	r3, [r5, #24]
 800785a:	b913      	cbnz	r3, 8007862 <__swsetup_r+0x16>
 800785c:	4628      	mov	r0, r5
 800785e:	f000 f953 	bl	8007b08 <__sinit>
 8007862:	4b2e      	ldr	r3, [pc, #184]	; (800791c <__swsetup_r+0xd0>)
 8007864:	429c      	cmp	r4, r3
 8007866:	d10f      	bne.n	8007888 <__swsetup_r+0x3c>
 8007868:	686c      	ldr	r4, [r5, #4]
 800786a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786e:	b29a      	uxth	r2, r3
 8007870:	0715      	lsls	r5, r2, #28
 8007872:	d42c      	bmi.n	80078ce <__swsetup_r+0x82>
 8007874:	06d0      	lsls	r0, r2, #27
 8007876:	d411      	bmi.n	800789c <__swsetup_r+0x50>
 8007878:	2209      	movs	r2, #9
 800787a:	6032      	str	r2, [r6, #0]
 800787c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007886:	e03e      	b.n	8007906 <__swsetup_r+0xba>
 8007888:	4b25      	ldr	r3, [pc, #148]	; (8007920 <__swsetup_r+0xd4>)
 800788a:	429c      	cmp	r4, r3
 800788c:	d101      	bne.n	8007892 <__swsetup_r+0x46>
 800788e:	68ac      	ldr	r4, [r5, #8]
 8007890:	e7eb      	b.n	800786a <__swsetup_r+0x1e>
 8007892:	4b24      	ldr	r3, [pc, #144]	; (8007924 <__swsetup_r+0xd8>)
 8007894:	429c      	cmp	r4, r3
 8007896:	bf08      	it	eq
 8007898:	68ec      	ldreq	r4, [r5, #12]
 800789a:	e7e6      	b.n	800786a <__swsetup_r+0x1e>
 800789c:	0751      	lsls	r1, r2, #29
 800789e:	d512      	bpl.n	80078c6 <__swsetup_r+0x7a>
 80078a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a2:	b141      	cbz	r1, 80078b6 <__swsetup_r+0x6a>
 80078a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d002      	beq.n	80078b2 <__swsetup_r+0x66>
 80078ac:	4630      	mov	r0, r6
 80078ae:	f000 fa19 	bl	8007ce4 <_free_r>
 80078b2:	2300      	movs	r3, #0
 80078b4:	6363      	str	r3, [r4, #52]	; 0x34
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	2300      	movs	r3, #0
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f043 0308 	orr.w	r3, r3, #8
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	b94b      	cbnz	r3, 80078e6 <__swsetup_r+0x9a>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078dc:	d003      	beq.n	80078e6 <__swsetup_r+0x9a>
 80078de:	4621      	mov	r1, r4
 80078e0:	4630      	mov	r0, r6
 80078e2:	f000 f9bf 	bl	8007c64 <__smakebuf_r>
 80078e6:	89a2      	ldrh	r2, [r4, #12]
 80078e8:	f012 0301 	ands.w	r3, r2, #1
 80078ec:	d00c      	beq.n	8007908 <__swsetup_r+0xbc>
 80078ee:	2300      	movs	r3, #0
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	6963      	ldr	r3, [r4, #20]
 80078f4:	425b      	negs	r3, r3
 80078f6:	61a3      	str	r3, [r4, #24]
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	b953      	cbnz	r3, 8007912 <__swsetup_r+0xc6>
 80078fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007900:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007904:	d1ba      	bne.n	800787c <__swsetup_r+0x30>
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	0792      	lsls	r2, r2, #30
 800790a:	bf58      	it	pl
 800790c:	6963      	ldrpl	r3, [r4, #20]
 800790e:	60a3      	str	r3, [r4, #8]
 8007910:	e7f2      	b.n	80078f8 <__swsetup_r+0xac>
 8007912:	2000      	movs	r0, #0
 8007914:	e7f7      	b.n	8007906 <__swsetup_r+0xba>
 8007916:	bf00      	nop
 8007918:	200001a4 	.word	0x200001a4
 800791c:	08009360 	.word	0x08009360
 8007920:	08009380 	.word	0x08009380
 8007924:	08009340 	.word	0x08009340

08007928 <__sflush_r>:
 8007928:	898a      	ldrh	r2, [r1, #12]
 800792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792e:	4605      	mov	r5, r0
 8007930:	0710      	lsls	r0, r2, #28
 8007932:	460c      	mov	r4, r1
 8007934:	d458      	bmi.n	80079e8 <__sflush_r+0xc0>
 8007936:	684b      	ldr	r3, [r1, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc05      	bgt.n	8007948 <__sflush_r+0x20>
 800793c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	dc02      	bgt.n	8007948 <__sflush_r+0x20>
 8007942:	2000      	movs	r0, #0
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800794a:	2e00      	cmp	r6, #0
 800794c:	d0f9      	beq.n	8007942 <__sflush_r+0x1a>
 800794e:	2300      	movs	r3, #0
 8007950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007954:	682f      	ldr	r7, [r5, #0]
 8007956:	6a21      	ldr	r1, [r4, #32]
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	d032      	beq.n	80079c2 <__sflush_r+0x9a>
 800795c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	075a      	lsls	r2, r3, #29
 8007962:	d505      	bpl.n	8007970 <__sflush_r+0x48>
 8007964:	6863      	ldr	r3, [r4, #4]
 8007966:	1ac0      	subs	r0, r0, r3
 8007968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800796a:	b10b      	cbz	r3, 8007970 <__sflush_r+0x48>
 800796c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800796e:	1ac0      	subs	r0, r0, r3
 8007970:	2300      	movs	r3, #0
 8007972:	4602      	mov	r2, r0
 8007974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007976:	6a21      	ldr	r1, [r4, #32]
 8007978:	4628      	mov	r0, r5
 800797a:	47b0      	blx	r6
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	d106      	bne.n	8007990 <__sflush_r+0x68>
 8007982:	6829      	ldr	r1, [r5, #0]
 8007984:	291d      	cmp	r1, #29
 8007986:	d848      	bhi.n	8007a1a <__sflush_r+0xf2>
 8007988:	4a29      	ldr	r2, [pc, #164]	; (8007a30 <__sflush_r+0x108>)
 800798a:	40ca      	lsrs	r2, r1
 800798c:	07d6      	lsls	r6, r2, #31
 800798e:	d544      	bpl.n	8007a1a <__sflush_r+0xf2>
 8007990:	2200      	movs	r2, #0
 8007992:	6062      	str	r2, [r4, #4]
 8007994:	04d9      	lsls	r1, r3, #19
 8007996:	6922      	ldr	r2, [r4, #16]
 8007998:	6022      	str	r2, [r4, #0]
 800799a:	d504      	bpl.n	80079a6 <__sflush_r+0x7e>
 800799c:	1c42      	adds	r2, r0, #1
 800799e:	d101      	bne.n	80079a4 <__sflush_r+0x7c>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b903      	cbnz	r3, 80079a6 <__sflush_r+0x7e>
 80079a4:	6560      	str	r0, [r4, #84]	; 0x54
 80079a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a8:	602f      	str	r7, [r5, #0]
 80079aa:	2900      	cmp	r1, #0
 80079ac:	d0c9      	beq.n	8007942 <__sflush_r+0x1a>
 80079ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b2:	4299      	cmp	r1, r3
 80079b4:	d002      	beq.n	80079bc <__sflush_r+0x94>
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 f994 	bl	8007ce4 <_free_r>
 80079bc:	2000      	movs	r0, #0
 80079be:	6360      	str	r0, [r4, #52]	; 0x34
 80079c0:	e7c0      	b.n	8007944 <__sflush_r+0x1c>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b0      	blx	r6
 80079c8:	1c41      	adds	r1, r0, #1
 80079ca:	d1c8      	bne.n	800795e <__sflush_r+0x36>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c5      	beq.n	800795e <__sflush_r+0x36>
 80079d2:	2b1d      	cmp	r3, #29
 80079d4:	d001      	beq.n	80079da <__sflush_r+0xb2>
 80079d6:	2b16      	cmp	r3, #22
 80079d8:	d101      	bne.n	80079de <__sflush_r+0xb6>
 80079da:	602f      	str	r7, [r5, #0]
 80079dc:	e7b1      	b.n	8007942 <__sflush_r+0x1a>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	e7ad      	b.n	8007944 <__sflush_r+0x1c>
 80079e8:	690f      	ldr	r7, [r1, #16]
 80079ea:	2f00      	cmp	r7, #0
 80079ec:	d0a9      	beq.n	8007942 <__sflush_r+0x1a>
 80079ee:	0793      	lsls	r3, r2, #30
 80079f0:	680e      	ldr	r6, [r1, #0]
 80079f2:	bf08      	it	eq
 80079f4:	694b      	ldreq	r3, [r1, #20]
 80079f6:	600f      	str	r7, [r1, #0]
 80079f8:	bf18      	it	ne
 80079fa:	2300      	movne	r3, #0
 80079fc:	eba6 0807 	sub.w	r8, r6, r7
 8007a00:	608b      	str	r3, [r1, #8]
 8007a02:	f1b8 0f00 	cmp.w	r8, #0
 8007a06:	dd9c      	ble.n	8007942 <__sflush_r+0x1a>
 8007a08:	4643      	mov	r3, r8
 8007a0a:	463a      	mov	r2, r7
 8007a0c:	6a21      	ldr	r1, [r4, #32]
 8007a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b0      	blx	r6
 8007a14:	2800      	cmp	r0, #0
 8007a16:	dc06      	bgt.n	8007a26 <__sflush_r+0xfe>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a24:	e78e      	b.n	8007944 <__sflush_r+0x1c>
 8007a26:	4407      	add	r7, r0
 8007a28:	eba8 0800 	sub.w	r8, r8, r0
 8007a2c:	e7e9      	b.n	8007a02 <__sflush_r+0xda>
 8007a2e:	bf00      	nop
 8007a30:	20400001 	.word	0x20400001

08007a34 <_fflush_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	690b      	ldr	r3, [r1, #16]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	b1db      	cbz	r3, 8007a76 <_fflush_r+0x42>
 8007a3e:	b118      	cbz	r0, 8007a48 <_fflush_r+0x14>
 8007a40:	6983      	ldr	r3, [r0, #24]
 8007a42:	b90b      	cbnz	r3, 8007a48 <_fflush_r+0x14>
 8007a44:	f000 f860 	bl	8007b08 <__sinit>
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <_fflush_r+0x48>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d109      	bne.n	8007a62 <_fflush_r+0x2e>
 8007a4e:	686c      	ldr	r4, [r5, #4]
 8007a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a54:	b17b      	cbz	r3, 8007a76 <_fflush_r+0x42>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a5e:	f7ff bf63 	b.w	8007928 <__sflush_r>
 8007a62:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <_fflush_r+0x4c>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	d101      	bne.n	8007a6c <_fflush_r+0x38>
 8007a68:	68ac      	ldr	r4, [r5, #8]
 8007a6a:	e7f1      	b.n	8007a50 <_fflush_r+0x1c>
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <_fflush_r+0x50>)
 8007a6e:	429c      	cmp	r4, r3
 8007a70:	bf08      	it	eq
 8007a72:	68ec      	ldreq	r4, [r5, #12]
 8007a74:	e7ec      	b.n	8007a50 <_fflush_r+0x1c>
 8007a76:	2000      	movs	r0, #0
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08009360 	.word	0x08009360
 8007a80:	08009380 	.word	0x08009380
 8007a84:	08009340 	.word	0x08009340

08007a88 <std>:
 8007a88:	2300      	movs	r3, #0
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a92:	6083      	str	r3, [r0, #8]
 8007a94:	8181      	strh	r1, [r0, #12]
 8007a96:	6643      	str	r3, [r0, #100]	; 0x64
 8007a98:	81c2      	strh	r2, [r0, #14]
 8007a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a9e:	6183      	str	r3, [r0, #24]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	305c      	adds	r0, #92	; 0x5c
 8007aa6:	f7ff fdfb 	bl	80076a0 <memset>
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <std+0x38>)
 8007aac:	6263      	str	r3, [r4, #36]	; 0x24
 8007aae:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <std+0x3c>)
 8007ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <std+0x40>)
 8007ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ab6:	4b05      	ldr	r3, [pc, #20]	; (8007acc <std+0x44>)
 8007ab8:	6224      	str	r4, [r4, #32]
 8007aba:	6323      	str	r3, [r4, #48]	; 0x30
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	bf00      	nop
 8007ac0:	080083e5 	.word	0x080083e5
 8007ac4:	08008407 	.word	0x08008407
 8007ac8:	0800843f 	.word	0x0800843f
 8007acc:	08008463 	.word	0x08008463

08007ad0 <_cleanup_r>:
 8007ad0:	4901      	ldr	r1, [pc, #4]	; (8007ad8 <_cleanup_r+0x8>)
 8007ad2:	f000 b885 	b.w	8007be0 <_fwalk_reent>
 8007ad6:	bf00      	nop
 8007ad8:	08007a35 	.word	0x08007a35

08007adc <__sfmoreglue>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	1e4a      	subs	r2, r1, #1
 8007ae0:	2568      	movs	r5, #104	; 0x68
 8007ae2:	4355      	muls	r5, r2
 8007ae4:	460e      	mov	r6, r1
 8007ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aea:	f000 f949 	bl	8007d80 <_malloc_r>
 8007aee:	4604      	mov	r4, r0
 8007af0:	b140      	cbz	r0, 8007b04 <__sfmoreglue+0x28>
 8007af2:	2100      	movs	r1, #0
 8007af4:	e9c0 1600 	strd	r1, r6, [r0]
 8007af8:	300c      	adds	r0, #12
 8007afa:	60a0      	str	r0, [r4, #8]
 8007afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b00:	f7ff fdce 	bl	80076a0 <memset>
 8007b04:	4620      	mov	r0, r4
 8007b06:	bd70      	pop	{r4, r5, r6, pc}

08007b08 <__sinit>:
 8007b08:	6983      	ldr	r3, [r0, #24]
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	bb33      	cbnz	r3, 8007b5e <__sinit+0x56>
 8007b10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007b14:	6503      	str	r3, [r0, #80]	; 0x50
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <__sinit+0x58>)
 8007b18:	4a12      	ldr	r2, [pc, #72]	; (8007b64 <__sinit+0x5c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6282      	str	r2, [r0, #40]	; 0x28
 8007b1e:	4298      	cmp	r0, r3
 8007b20:	bf04      	itt	eq
 8007b22:	2301      	moveq	r3, #1
 8007b24:	6183      	streq	r3, [r0, #24]
 8007b26:	f000 f81f 	bl	8007b68 <__sfp>
 8007b2a:	6060      	str	r0, [r4, #4]
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 f81b 	bl	8007b68 <__sfp>
 8007b32:	60a0      	str	r0, [r4, #8]
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 f817 	bl	8007b68 <__sfp>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	60e0      	str	r0, [r4, #12]
 8007b3e:	2104      	movs	r1, #4
 8007b40:	6860      	ldr	r0, [r4, #4]
 8007b42:	f7ff ffa1 	bl	8007a88 <std>
 8007b46:	2201      	movs	r2, #1
 8007b48:	2109      	movs	r1, #9
 8007b4a:	68a0      	ldr	r0, [r4, #8]
 8007b4c:	f7ff ff9c 	bl	8007a88 <std>
 8007b50:	2202      	movs	r2, #2
 8007b52:	2112      	movs	r1, #18
 8007b54:	68e0      	ldr	r0, [r4, #12]
 8007b56:	f7ff ff97 	bl	8007a88 <std>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	61a3      	str	r3, [r4, #24]
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	0800933c 	.word	0x0800933c
 8007b64:	08007ad1 	.word	0x08007ad1

08007b68 <__sfp>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <__sfp+0x70>)
 8007b6c:	681e      	ldr	r6, [r3, #0]
 8007b6e:	69b3      	ldr	r3, [r6, #24]
 8007b70:	4607      	mov	r7, r0
 8007b72:	b913      	cbnz	r3, 8007b7a <__sfp+0x12>
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff ffc7 	bl	8007b08 <__sinit>
 8007b7a:	3648      	adds	r6, #72	; 0x48
 8007b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	d503      	bpl.n	8007b8c <__sfp+0x24>
 8007b84:	6833      	ldr	r3, [r6, #0]
 8007b86:	b133      	cbz	r3, 8007b96 <__sfp+0x2e>
 8007b88:	6836      	ldr	r6, [r6, #0]
 8007b8a:	e7f7      	b.n	8007b7c <__sfp+0x14>
 8007b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b90:	b16d      	cbz	r5, 8007bae <__sfp+0x46>
 8007b92:	3468      	adds	r4, #104	; 0x68
 8007b94:	e7f4      	b.n	8007b80 <__sfp+0x18>
 8007b96:	2104      	movs	r1, #4
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff ff9f 	bl	8007adc <__sfmoreglue>
 8007b9e:	6030      	str	r0, [r6, #0]
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d1f1      	bne.n	8007b88 <__sfp+0x20>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4620      	mov	r0, r4
 8007bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bae:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <__sfp+0x74>)
 8007bb0:	6665      	str	r5, [r4, #100]	; 0x64
 8007bb2:	e9c4 5500 	strd	r5, r5, [r4]
 8007bb6:	60a5      	str	r5, [r4, #8]
 8007bb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007bbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bc8:	f7ff fd6a 	bl	80076a0 <memset>
 8007bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bd4:	e7e9      	b.n	8007baa <__sfp+0x42>
 8007bd6:	bf00      	nop
 8007bd8:	0800933c 	.word	0x0800933c
 8007bdc:	ffff0001 	.word	0xffff0001

08007be0 <_fwalk_reent>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4680      	mov	r8, r0
 8007be6:	4689      	mov	r9, r1
 8007be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bec:	2600      	movs	r6, #0
 8007bee:	b914      	cbnz	r4, 8007bf6 <_fwalk_reent+0x16>
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007bfa:	3f01      	subs	r7, #1
 8007bfc:	d501      	bpl.n	8007c02 <_fwalk_reent+0x22>
 8007bfe:	6824      	ldr	r4, [r4, #0]
 8007c00:	e7f5      	b.n	8007bee <_fwalk_reent+0xe>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d907      	bls.n	8007c18 <_fwalk_reent+0x38>
 8007c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	d003      	beq.n	8007c18 <_fwalk_reent+0x38>
 8007c10:	4629      	mov	r1, r5
 8007c12:	4640      	mov	r0, r8
 8007c14:	47c8      	blx	r9
 8007c16:	4306      	orrs	r6, r0
 8007c18:	3568      	adds	r5, #104	; 0x68
 8007c1a:	e7ee      	b.n	8007bfa <_fwalk_reent+0x1a>

08007c1c <__swhatbuf_r>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	460e      	mov	r6, r1
 8007c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c24:	2900      	cmp	r1, #0
 8007c26:	b096      	sub	sp, #88	; 0x58
 8007c28:	4614      	mov	r4, r2
 8007c2a:	461d      	mov	r5, r3
 8007c2c:	da07      	bge.n	8007c3e <__swhatbuf_r+0x22>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	89b3      	ldrh	r3, [r6, #12]
 8007c34:	061a      	lsls	r2, r3, #24
 8007c36:	d410      	bmi.n	8007c5a <__swhatbuf_r+0x3e>
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	e00e      	b.n	8007c5c <__swhatbuf_r+0x40>
 8007c3e:	466a      	mov	r2, sp
 8007c40:	f000 fc36 	bl	80084b0 <_fstat_r>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	dbf2      	blt.n	8007c2e <__swhatbuf_r+0x12>
 8007c48:	9a01      	ldr	r2, [sp, #4]
 8007c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c52:	425a      	negs	r2, r3
 8007c54:	415a      	adcs	r2, r3
 8007c56:	602a      	str	r2, [r5, #0]
 8007c58:	e7ee      	b.n	8007c38 <__swhatbuf_r+0x1c>
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	b016      	add	sp, #88	; 0x58
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <__smakebuf_r>:
 8007c64:	898b      	ldrh	r3, [r1, #12]
 8007c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c68:	079d      	lsls	r5, r3, #30
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	d507      	bpl.n	8007c80 <__smakebuf_r+0x1c>
 8007c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	2301      	movs	r3, #1
 8007c7a:	6163      	str	r3, [r4, #20]
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	ab01      	add	r3, sp, #4
 8007c82:	466a      	mov	r2, sp
 8007c84:	f7ff ffca 	bl	8007c1c <__swhatbuf_r>
 8007c88:	9900      	ldr	r1, [sp, #0]
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 f877 	bl	8007d80 <_malloc_r>
 8007c92:	b948      	cbnz	r0, 8007ca8 <__smakebuf_r+0x44>
 8007c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c98:	059a      	lsls	r2, r3, #22
 8007c9a:	d4ef      	bmi.n	8007c7c <__smakebuf_r+0x18>
 8007c9c:	f023 0303 	bic.w	r3, r3, #3
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	e7e3      	b.n	8007c70 <__smakebuf_r+0xc>
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <__smakebuf_r+0x7c>)
 8007caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	6163      	str	r3, [r4, #20]
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	6120      	str	r0, [r4, #16]
 8007cbe:	b15b      	cbz	r3, 8007cd8 <__smakebuf_r+0x74>
 8007cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f000 fc05 	bl	80084d4 <_isatty_r>
 8007cca:	b128      	cbz	r0, 8007cd8 <__smakebuf_r+0x74>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f023 0303 	bic.w	r3, r3, #3
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	431d      	orrs	r5, r3
 8007cdc:	81a5      	strh	r5, [r4, #12]
 8007cde:	e7cd      	b.n	8007c7c <__smakebuf_r+0x18>
 8007ce0:	08007ad1 	.word	0x08007ad1

08007ce4 <_free_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	d045      	beq.n	8007d78 <_free_r+0x94>
 8007cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf0:	1f0c      	subs	r4, r1, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfb8      	it	lt
 8007cf6:	18e4      	addlt	r4, r4, r3
 8007cf8:	f000 fc0e 	bl	8008518 <__malloc_lock>
 8007cfc:	4a1f      	ldr	r2, [pc, #124]	; (8007d7c <_free_r+0x98>)
 8007cfe:	6813      	ldr	r3, [r2, #0]
 8007d00:	4610      	mov	r0, r2
 8007d02:	b933      	cbnz	r3, 8007d12 <_free_r+0x2e>
 8007d04:	6063      	str	r3, [r4, #4]
 8007d06:	6014      	str	r4, [r2, #0]
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d0e:	f000 bc04 	b.w	800851a <__malloc_unlock>
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	d90c      	bls.n	8007d30 <_free_r+0x4c>
 8007d16:	6821      	ldr	r1, [r4, #0]
 8007d18:	1862      	adds	r2, r4, r1
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bf04      	itt	eq
 8007d1e:	681a      	ldreq	r2, [r3, #0]
 8007d20:	685b      	ldreq	r3, [r3, #4]
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	bf04      	itt	eq
 8007d26:	1852      	addeq	r2, r2, r1
 8007d28:	6022      	streq	r2, [r4, #0]
 8007d2a:	6004      	str	r4, [r0, #0]
 8007d2c:	e7ec      	b.n	8007d08 <_free_r+0x24>
 8007d2e:	4613      	mov	r3, r2
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	b10a      	cbz	r2, 8007d38 <_free_r+0x54>
 8007d34:	42a2      	cmp	r2, r4
 8007d36:	d9fa      	bls.n	8007d2e <_free_r+0x4a>
 8007d38:	6819      	ldr	r1, [r3, #0]
 8007d3a:	1858      	adds	r0, r3, r1
 8007d3c:	42a0      	cmp	r0, r4
 8007d3e:	d10b      	bne.n	8007d58 <_free_r+0x74>
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	4401      	add	r1, r0
 8007d44:	1858      	adds	r0, r3, r1
 8007d46:	4282      	cmp	r2, r0
 8007d48:	6019      	str	r1, [r3, #0]
 8007d4a:	d1dd      	bne.n	8007d08 <_free_r+0x24>
 8007d4c:	6810      	ldr	r0, [r2, #0]
 8007d4e:	6852      	ldr	r2, [r2, #4]
 8007d50:	605a      	str	r2, [r3, #4]
 8007d52:	4401      	add	r1, r0
 8007d54:	6019      	str	r1, [r3, #0]
 8007d56:	e7d7      	b.n	8007d08 <_free_r+0x24>
 8007d58:	d902      	bls.n	8007d60 <_free_r+0x7c>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	e7d3      	b.n	8007d08 <_free_r+0x24>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	1821      	adds	r1, r4, r0
 8007d64:	428a      	cmp	r2, r1
 8007d66:	bf04      	itt	eq
 8007d68:	6811      	ldreq	r1, [r2, #0]
 8007d6a:	6852      	ldreq	r2, [r2, #4]
 8007d6c:	6062      	str	r2, [r4, #4]
 8007d6e:	bf04      	itt	eq
 8007d70:	1809      	addeq	r1, r1, r0
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	605c      	str	r4, [r3, #4]
 8007d76:	e7c7      	b.n	8007d08 <_free_r+0x24>
 8007d78:	bd38      	pop	{r3, r4, r5, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000640 	.word	0x20000640

08007d80 <_malloc_r>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	1ccd      	adds	r5, r1, #3
 8007d84:	f025 0503 	bic.w	r5, r5, #3
 8007d88:	3508      	adds	r5, #8
 8007d8a:	2d0c      	cmp	r5, #12
 8007d8c:	bf38      	it	cc
 8007d8e:	250c      	movcc	r5, #12
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	4606      	mov	r6, r0
 8007d94:	db01      	blt.n	8007d9a <_malloc_r+0x1a>
 8007d96:	42a9      	cmp	r1, r5
 8007d98:	d903      	bls.n	8007da2 <_malloc_r+0x22>
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	2000      	movs	r0, #0
 8007da0:	bd70      	pop	{r4, r5, r6, pc}
 8007da2:	f000 fbb9 	bl	8008518 <__malloc_lock>
 8007da6:	4a21      	ldr	r2, [pc, #132]	; (8007e2c <_malloc_r+0xac>)
 8007da8:	6814      	ldr	r4, [r2, #0]
 8007daa:	4621      	mov	r1, r4
 8007dac:	b991      	cbnz	r1, 8007dd4 <_malloc_r+0x54>
 8007dae:	4c20      	ldr	r4, [pc, #128]	; (8007e30 <_malloc_r+0xb0>)
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	b91b      	cbnz	r3, 8007dbc <_malloc_r+0x3c>
 8007db4:	4630      	mov	r0, r6
 8007db6:	f000 fb05 	bl	80083c4 <_sbrk_r>
 8007dba:	6020      	str	r0, [r4, #0]
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f000 fb00 	bl	80083c4 <_sbrk_r>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d124      	bne.n	8007e12 <_malloc_r+0x92>
 8007dc8:	230c      	movs	r3, #12
 8007dca:	6033      	str	r3, [r6, #0]
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 fba4 	bl	800851a <__malloc_unlock>
 8007dd2:	e7e4      	b.n	8007d9e <_malloc_r+0x1e>
 8007dd4:	680b      	ldr	r3, [r1, #0]
 8007dd6:	1b5b      	subs	r3, r3, r5
 8007dd8:	d418      	bmi.n	8007e0c <_malloc_r+0x8c>
 8007dda:	2b0b      	cmp	r3, #11
 8007ddc:	d90f      	bls.n	8007dfe <_malloc_r+0x7e>
 8007dde:	600b      	str	r3, [r1, #0]
 8007de0:	50cd      	str	r5, [r1, r3]
 8007de2:	18cc      	adds	r4, r1, r3
 8007de4:	4630      	mov	r0, r6
 8007de6:	f000 fb98 	bl	800851a <__malloc_unlock>
 8007dea:	f104 000b 	add.w	r0, r4, #11
 8007dee:	1d23      	adds	r3, r4, #4
 8007df0:	f020 0007 	bic.w	r0, r0, #7
 8007df4:	1ac3      	subs	r3, r0, r3
 8007df6:	d0d3      	beq.n	8007da0 <_malloc_r+0x20>
 8007df8:	425a      	negs	r2, r3
 8007dfa:	50e2      	str	r2, [r4, r3]
 8007dfc:	e7d0      	b.n	8007da0 <_malloc_r+0x20>
 8007dfe:	428c      	cmp	r4, r1
 8007e00:	684b      	ldr	r3, [r1, #4]
 8007e02:	bf16      	itet	ne
 8007e04:	6063      	strne	r3, [r4, #4]
 8007e06:	6013      	streq	r3, [r2, #0]
 8007e08:	460c      	movne	r4, r1
 8007e0a:	e7eb      	b.n	8007de4 <_malloc_r+0x64>
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	6849      	ldr	r1, [r1, #4]
 8007e10:	e7cc      	b.n	8007dac <_malloc_r+0x2c>
 8007e12:	1cc4      	adds	r4, r0, #3
 8007e14:	f024 0403 	bic.w	r4, r4, #3
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d005      	beq.n	8007e28 <_malloc_r+0xa8>
 8007e1c:	1a21      	subs	r1, r4, r0
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f000 fad0 	bl	80083c4 <_sbrk_r>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d0cf      	beq.n	8007dc8 <_malloc_r+0x48>
 8007e28:	6025      	str	r5, [r4, #0]
 8007e2a:	e7db      	b.n	8007de4 <_malloc_r+0x64>
 8007e2c:	20000640 	.word	0x20000640
 8007e30:	20000644 	.word	0x20000644

08007e34 <__sfputc_r>:
 8007e34:	6893      	ldr	r3, [r2, #8]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	b410      	push	{r4}
 8007e3c:	6093      	str	r3, [r2, #8]
 8007e3e:	da08      	bge.n	8007e52 <__sfputc_r+0x1e>
 8007e40:	6994      	ldr	r4, [r2, #24]
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	db01      	blt.n	8007e4a <__sfputc_r+0x16>
 8007e46:	290a      	cmp	r1, #10
 8007e48:	d103      	bne.n	8007e52 <__sfputc_r+0x1e>
 8007e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e4e:	f7ff bcab 	b.w	80077a8 <__swbuf_r>
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	1c58      	adds	r0, r3, #1
 8007e56:	6010      	str	r0, [r2, #0]
 8007e58:	7019      	strb	r1, [r3, #0]
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <__sfputs_r>:
 8007e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	4614      	mov	r4, r2
 8007e6a:	18d5      	adds	r5, r2, r3
 8007e6c:	42ac      	cmp	r4, r5
 8007e6e:	d101      	bne.n	8007e74 <__sfputs_r+0x12>
 8007e70:	2000      	movs	r0, #0
 8007e72:	e007      	b.n	8007e84 <__sfputs_r+0x22>
 8007e74:	463a      	mov	r2, r7
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ffda 	bl	8007e34 <__sfputc_r>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d1f3      	bne.n	8007e6c <__sfputs_r+0xa>
 8007e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e88 <_vfiprintf_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	b09d      	sub	sp, #116	; 0x74
 8007e90:	4617      	mov	r7, r2
 8007e92:	461d      	mov	r5, r3
 8007e94:	4606      	mov	r6, r0
 8007e96:	b118      	cbz	r0, 8007ea0 <_vfiprintf_r+0x18>
 8007e98:	6983      	ldr	r3, [r0, #24]
 8007e9a:	b90b      	cbnz	r3, 8007ea0 <_vfiprintf_r+0x18>
 8007e9c:	f7ff fe34 	bl	8007b08 <__sinit>
 8007ea0:	4b7c      	ldr	r3, [pc, #496]	; (8008094 <_vfiprintf_r+0x20c>)
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	d158      	bne.n	8007f58 <_vfiprintf_r+0xd0>
 8007ea6:	6874      	ldr	r4, [r6, #4]
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	0718      	lsls	r0, r3, #28
 8007eac:	d55e      	bpl.n	8007f6c <_vfiprintf_r+0xe4>
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d05b      	beq.n	8007f6c <_vfiprintf_r+0xe4>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ebe:	2330      	movs	r3, #48	; 0x30
 8007ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec4:	9503      	str	r5, [sp, #12]
 8007ec6:	f04f 0b01 	mov.w	fp, #1
 8007eca:	46b8      	mov	r8, r7
 8007ecc:	4645      	mov	r5, r8
 8007ece:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ed2:	b10b      	cbz	r3, 8007ed8 <_vfiprintf_r+0x50>
 8007ed4:	2b25      	cmp	r3, #37	; 0x25
 8007ed6:	d154      	bne.n	8007f82 <_vfiprintf_r+0xfa>
 8007ed8:	ebb8 0a07 	subs.w	sl, r8, r7
 8007edc:	d00b      	beq.n	8007ef6 <_vfiprintf_r+0x6e>
 8007ede:	4653      	mov	r3, sl
 8007ee0:	463a      	mov	r2, r7
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7ff ffbc 	bl	8007e62 <__sfputs_r>
 8007eea:	3001      	adds	r0, #1
 8007eec:	f000 80c2 	beq.w	8008074 <_vfiprintf_r+0x1ec>
 8007ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef2:	4453      	add	r3, sl
 8007ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef6:	f898 3000 	ldrb.w	r3, [r8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80ba 	beq.w	8008074 <_vfiprintf_r+0x1ec>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	9307      	str	r3, [sp, #28]
 8007f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f12:	931a      	str	r3, [sp, #104]	; 0x68
 8007f14:	46a8      	mov	r8, r5
 8007f16:	2205      	movs	r2, #5
 8007f18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007f1c:	485e      	ldr	r0, [pc, #376]	; (8008098 <_vfiprintf_r+0x210>)
 8007f1e:	f7f8 f957 	bl	80001d0 <memchr>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	bb78      	cbnz	r0, 8007f86 <_vfiprintf_r+0xfe>
 8007f26:	06d9      	lsls	r1, r3, #27
 8007f28:	bf44      	itt	mi
 8007f2a:	2220      	movmi	r2, #32
 8007f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f30:	071a      	lsls	r2, r3, #28
 8007f32:	bf44      	itt	mi
 8007f34:	222b      	movmi	r2, #43	; 0x2b
 8007f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f3a:	782a      	ldrb	r2, [r5, #0]
 8007f3c:	2a2a      	cmp	r2, #42	; 0x2a
 8007f3e:	d02a      	beq.n	8007f96 <_vfiprintf_r+0x10e>
 8007f40:	9a07      	ldr	r2, [sp, #28]
 8007f42:	46a8      	mov	r8, r5
 8007f44:	2000      	movs	r0, #0
 8007f46:	250a      	movs	r5, #10
 8007f48:	4641      	mov	r1, r8
 8007f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f4e:	3b30      	subs	r3, #48	; 0x30
 8007f50:	2b09      	cmp	r3, #9
 8007f52:	d969      	bls.n	8008028 <_vfiprintf_r+0x1a0>
 8007f54:	b360      	cbz	r0, 8007fb0 <_vfiprintf_r+0x128>
 8007f56:	e024      	b.n	8007fa2 <_vfiprintf_r+0x11a>
 8007f58:	4b50      	ldr	r3, [pc, #320]	; (800809c <_vfiprintf_r+0x214>)
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d101      	bne.n	8007f62 <_vfiprintf_r+0xda>
 8007f5e:	68b4      	ldr	r4, [r6, #8]
 8007f60:	e7a2      	b.n	8007ea8 <_vfiprintf_r+0x20>
 8007f62:	4b4f      	ldr	r3, [pc, #316]	; (80080a0 <_vfiprintf_r+0x218>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	bf08      	it	eq
 8007f68:	68f4      	ldreq	r4, [r6, #12]
 8007f6a:	e79d      	b.n	8007ea8 <_vfiprintf_r+0x20>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7ff fc6c 	bl	800784c <__swsetup_r>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d09d      	beq.n	8007eb4 <_vfiprintf_r+0x2c>
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f7c:	b01d      	add	sp, #116	; 0x74
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	46a8      	mov	r8, r5
 8007f84:	e7a2      	b.n	8007ecc <_vfiprintf_r+0x44>
 8007f86:	4a44      	ldr	r2, [pc, #272]	; (8008098 <_vfiprintf_r+0x210>)
 8007f88:	1a80      	subs	r0, r0, r2
 8007f8a:	fa0b f000 	lsl.w	r0, fp, r0
 8007f8e:	4318      	orrs	r0, r3
 8007f90:	9004      	str	r0, [sp, #16]
 8007f92:	4645      	mov	r5, r8
 8007f94:	e7be      	b.n	8007f14 <_vfiprintf_r+0x8c>
 8007f96:	9a03      	ldr	r2, [sp, #12]
 8007f98:	1d11      	adds	r1, r2, #4
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	9103      	str	r1, [sp, #12]
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	db01      	blt.n	8007fa6 <_vfiprintf_r+0x11e>
 8007fa2:	9207      	str	r2, [sp, #28]
 8007fa4:	e004      	b.n	8007fb0 <_vfiprintf_r+0x128>
 8007fa6:	4252      	negs	r2, r2
 8007fa8:	f043 0302 	orr.w	r3, r3, #2
 8007fac:	9207      	str	r2, [sp, #28]
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	f898 3000 	ldrb.w	r3, [r8]
 8007fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8007fb6:	d10e      	bne.n	8007fd6 <_vfiprintf_r+0x14e>
 8007fb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007fbe:	d138      	bne.n	8008032 <_vfiprintf_r+0x1aa>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	1d1a      	adds	r2, r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	9203      	str	r2, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bfb8      	it	lt
 8007fcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fd0:	f108 0802 	add.w	r8, r8, #2
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	4d33      	ldr	r5, [pc, #204]	; (80080a4 <_vfiprintf_r+0x21c>)
 8007fd8:	f898 1000 	ldrb.w	r1, [r8]
 8007fdc:	2203      	movs	r2, #3
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f7f8 f8f6 	bl	80001d0 <memchr>
 8007fe4:	b140      	cbz	r0, 8007ff8 <_vfiprintf_r+0x170>
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	1b40      	subs	r0, r0, r5
 8007fea:	fa03 f000 	lsl.w	r0, r3, r0
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	4303      	orrs	r3, r0
 8007ff2:	f108 0801 	add.w	r8, r8, #1
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	f898 1000 	ldrb.w	r1, [r8]
 8007ffc:	482a      	ldr	r0, [pc, #168]	; (80080a8 <_vfiprintf_r+0x220>)
 8007ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008002:	2206      	movs	r2, #6
 8008004:	f108 0701 	add.w	r7, r8, #1
 8008008:	f7f8 f8e2 	bl	80001d0 <memchr>
 800800c:	2800      	cmp	r0, #0
 800800e:	d037      	beq.n	8008080 <_vfiprintf_r+0x1f8>
 8008010:	4b26      	ldr	r3, [pc, #152]	; (80080ac <_vfiprintf_r+0x224>)
 8008012:	bb1b      	cbnz	r3, 800805c <_vfiprintf_r+0x1d4>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	3307      	adds	r3, #7
 8008018:	f023 0307 	bic.w	r3, r3, #7
 800801c:	3308      	adds	r3, #8
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008022:	444b      	add	r3, r9
 8008024:	9309      	str	r3, [sp, #36]	; 0x24
 8008026:	e750      	b.n	8007eca <_vfiprintf_r+0x42>
 8008028:	fb05 3202 	mla	r2, r5, r2, r3
 800802c:	2001      	movs	r0, #1
 800802e:	4688      	mov	r8, r1
 8008030:	e78a      	b.n	8007f48 <_vfiprintf_r+0xc0>
 8008032:	2300      	movs	r3, #0
 8008034:	f108 0801 	add.w	r8, r8, #1
 8008038:	9305      	str	r3, [sp, #20]
 800803a:	4619      	mov	r1, r3
 800803c:	250a      	movs	r5, #10
 800803e:	4640      	mov	r0, r8
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	3a30      	subs	r2, #48	; 0x30
 8008046:	2a09      	cmp	r2, #9
 8008048:	d903      	bls.n	8008052 <_vfiprintf_r+0x1ca>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0c3      	beq.n	8007fd6 <_vfiprintf_r+0x14e>
 800804e:	9105      	str	r1, [sp, #20]
 8008050:	e7c1      	b.n	8007fd6 <_vfiprintf_r+0x14e>
 8008052:	fb05 2101 	mla	r1, r5, r1, r2
 8008056:	2301      	movs	r3, #1
 8008058:	4680      	mov	r8, r0
 800805a:	e7f0      	b.n	800803e <_vfiprintf_r+0x1b6>
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4622      	mov	r2, r4
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <_vfiprintf_r+0x228>)
 8008064:	a904      	add	r1, sp, #16
 8008066:	4630      	mov	r0, r6
 8008068:	f3af 8000 	nop.w
 800806c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008070:	4681      	mov	r9, r0
 8008072:	d1d5      	bne.n	8008020 <_vfiprintf_r+0x198>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	065b      	lsls	r3, r3, #25
 8008078:	f53f af7e 	bmi.w	8007f78 <_vfiprintf_r+0xf0>
 800807c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800807e:	e77d      	b.n	8007f7c <_vfiprintf_r+0xf4>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4622      	mov	r2, r4
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <_vfiprintf_r+0x228>)
 8008088:	a904      	add	r1, sp, #16
 800808a:	4630      	mov	r0, r6
 800808c:	f000 f888 	bl	80081a0 <_printf_i>
 8008090:	e7ec      	b.n	800806c <_vfiprintf_r+0x1e4>
 8008092:	bf00      	nop
 8008094:	08009360 	.word	0x08009360
 8008098:	080093a0 	.word	0x080093a0
 800809c:	08009380 	.word	0x08009380
 80080a0:	08009340 	.word	0x08009340
 80080a4:	080093a6 	.word	0x080093a6
 80080a8:	080093aa 	.word	0x080093aa
 80080ac:	00000000 	.word	0x00000000
 80080b0:	08007e63 	.word	0x08007e63

080080b4 <_printf_common>:
 80080b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b8:	4691      	mov	r9, r2
 80080ba:	461f      	mov	r7, r3
 80080bc:	688a      	ldr	r2, [r1, #8]
 80080be:	690b      	ldr	r3, [r1, #16]
 80080c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	bfb8      	it	lt
 80080c8:	4613      	movlt	r3, r2
 80080ca:	f8c9 3000 	str.w	r3, [r9]
 80080ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	b112      	cbz	r2, 80080de <_printf_common+0x2a>
 80080d8:	3301      	adds	r3, #1
 80080da:	f8c9 3000 	str.w	r3, [r9]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	0699      	lsls	r1, r3, #26
 80080e2:	bf42      	ittt	mi
 80080e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080e8:	3302      	addmi	r3, #2
 80080ea:	f8c9 3000 	strmi.w	r3, [r9]
 80080ee:	6825      	ldr	r5, [r4, #0]
 80080f0:	f015 0506 	ands.w	r5, r5, #6
 80080f4:	d107      	bne.n	8008106 <_printf_common+0x52>
 80080f6:	f104 0a19 	add.w	sl, r4, #25
 80080fa:	68e3      	ldr	r3, [r4, #12]
 80080fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	42ab      	cmp	r3, r5
 8008104:	dc28      	bgt.n	8008158 <_printf_common+0xa4>
 8008106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	3300      	adds	r3, #0
 800810e:	bf18      	it	ne
 8008110:	2301      	movne	r3, #1
 8008112:	0692      	lsls	r2, r2, #26
 8008114:	d42d      	bmi.n	8008172 <_printf_common+0xbe>
 8008116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800811a:	4639      	mov	r1, r7
 800811c:	4630      	mov	r0, r6
 800811e:	47c0      	blx	r8
 8008120:	3001      	adds	r0, #1
 8008122:	d020      	beq.n	8008166 <_printf_common+0xb2>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	68e5      	ldr	r5, [r4, #12]
 8008128:	f8d9 2000 	ldr.w	r2, [r9]
 800812c:	f003 0306 	and.w	r3, r3, #6
 8008130:	2b04      	cmp	r3, #4
 8008132:	bf08      	it	eq
 8008134:	1aad      	subeq	r5, r5, r2
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	6922      	ldr	r2, [r4, #16]
 800813a:	bf0c      	ite	eq
 800813c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008140:	2500      	movne	r5, #0
 8008142:	4293      	cmp	r3, r2
 8008144:	bfc4      	itt	gt
 8008146:	1a9b      	subgt	r3, r3, r2
 8008148:	18ed      	addgt	r5, r5, r3
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	341a      	adds	r4, #26
 8008150:	454d      	cmp	r5, r9
 8008152:	d11a      	bne.n	800818a <_printf_common+0xd6>
 8008154:	2000      	movs	r0, #0
 8008156:	e008      	b.n	800816a <_printf_common+0xb6>
 8008158:	2301      	movs	r3, #1
 800815a:	4652      	mov	r2, sl
 800815c:	4639      	mov	r1, r7
 800815e:	4630      	mov	r0, r6
 8008160:	47c0      	blx	r8
 8008162:	3001      	adds	r0, #1
 8008164:	d103      	bne.n	800816e <_printf_common+0xba>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800816a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816e:	3501      	adds	r5, #1
 8008170:	e7c3      	b.n	80080fa <_printf_common+0x46>
 8008172:	18e1      	adds	r1, r4, r3
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	2030      	movs	r0, #48	; 0x30
 8008178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800817c:	4422      	add	r2, r4
 800817e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008182:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008186:	3302      	adds	r3, #2
 8008188:	e7c5      	b.n	8008116 <_printf_common+0x62>
 800818a:	2301      	movs	r3, #1
 800818c:	4622      	mov	r2, r4
 800818e:	4639      	mov	r1, r7
 8008190:	4630      	mov	r0, r6
 8008192:	47c0      	blx	r8
 8008194:	3001      	adds	r0, #1
 8008196:	d0e6      	beq.n	8008166 <_printf_common+0xb2>
 8008198:	f109 0901 	add.w	r9, r9, #1
 800819c:	e7d8      	b.n	8008150 <_printf_common+0x9c>
	...

080081a0 <_printf_i>:
 80081a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081a8:	460c      	mov	r4, r1
 80081aa:	7e09      	ldrb	r1, [r1, #24]
 80081ac:	b085      	sub	sp, #20
 80081ae:	296e      	cmp	r1, #110	; 0x6e
 80081b0:	4617      	mov	r7, r2
 80081b2:	4606      	mov	r6, r0
 80081b4:	4698      	mov	r8, r3
 80081b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b8:	f000 80b3 	beq.w	8008322 <_printf_i+0x182>
 80081bc:	d822      	bhi.n	8008204 <_printf_i+0x64>
 80081be:	2963      	cmp	r1, #99	; 0x63
 80081c0:	d036      	beq.n	8008230 <_printf_i+0x90>
 80081c2:	d80a      	bhi.n	80081da <_printf_i+0x3a>
 80081c4:	2900      	cmp	r1, #0
 80081c6:	f000 80b9 	beq.w	800833c <_printf_i+0x19c>
 80081ca:	2958      	cmp	r1, #88	; 0x58
 80081cc:	f000 8083 	beq.w	80082d6 <_printf_i+0x136>
 80081d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081d8:	e032      	b.n	8008240 <_printf_i+0xa0>
 80081da:	2964      	cmp	r1, #100	; 0x64
 80081dc:	d001      	beq.n	80081e2 <_printf_i+0x42>
 80081de:	2969      	cmp	r1, #105	; 0x69
 80081e0:	d1f6      	bne.n	80081d0 <_printf_i+0x30>
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	6813      	ldr	r3, [r2, #0]
 80081e6:	0605      	lsls	r5, r0, #24
 80081e8:	f103 0104 	add.w	r1, r3, #4
 80081ec:	d52a      	bpl.n	8008244 <_printf_i+0xa4>
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6011      	str	r1, [r2, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	da03      	bge.n	80081fe <_printf_i+0x5e>
 80081f6:	222d      	movs	r2, #45	; 0x2d
 80081f8:	425b      	negs	r3, r3
 80081fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081fe:	486f      	ldr	r0, [pc, #444]	; (80083bc <_printf_i+0x21c>)
 8008200:	220a      	movs	r2, #10
 8008202:	e039      	b.n	8008278 <_printf_i+0xd8>
 8008204:	2973      	cmp	r1, #115	; 0x73
 8008206:	f000 809d 	beq.w	8008344 <_printf_i+0x1a4>
 800820a:	d808      	bhi.n	800821e <_printf_i+0x7e>
 800820c:	296f      	cmp	r1, #111	; 0x6f
 800820e:	d020      	beq.n	8008252 <_printf_i+0xb2>
 8008210:	2970      	cmp	r1, #112	; 0x70
 8008212:	d1dd      	bne.n	80081d0 <_printf_i+0x30>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	f043 0320 	orr.w	r3, r3, #32
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	e003      	b.n	8008226 <_printf_i+0x86>
 800821e:	2975      	cmp	r1, #117	; 0x75
 8008220:	d017      	beq.n	8008252 <_printf_i+0xb2>
 8008222:	2978      	cmp	r1, #120	; 0x78
 8008224:	d1d4      	bne.n	80081d0 <_printf_i+0x30>
 8008226:	2378      	movs	r3, #120	; 0x78
 8008228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800822c:	4864      	ldr	r0, [pc, #400]	; (80083c0 <_printf_i+0x220>)
 800822e:	e055      	b.n	80082dc <_printf_i+0x13c>
 8008230:	6813      	ldr	r3, [r2, #0]
 8008232:	1d19      	adds	r1, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6011      	str	r1, [r2, #0]
 8008238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800823c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008240:	2301      	movs	r3, #1
 8008242:	e08c      	b.n	800835e <_printf_i+0x1be>
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6011      	str	r1, [r2, #0]
 8008248:	f010 0f40 	tst.w	r0, #64	; 0x40
 800824c:	bf18      	it	ne
 800824e:	b21b      	sxthne	r3, r3
 8008250:	e7cf      	b.n	80081f2 <_printf_i+0x52>
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	6825      	ldr	r5, [r4, #0]
 8008256:	1d18      	adds	r0, r3, #4
 8008258:	6010      	str	r0, [r2, #0]
 800825a:	0628      	lsls	r0, r5, #24
 800825c:	d501      	bpl.n	8008262 <_printf_i+0xc2>
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	e002      	b.n	8008268 <_printf_i+0xc8>
 8008262:	0668      	lsls	r0, r5, #25
 8008264:	d5fb      	bpl.n	800825e <_printf_i+0xbe>
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	4854      	ldr	r0, [pc, #336]	; (80083bc <_printf_i+0x21c>)
 800826a:	296f      	cmp	r1, #111	; 0x6f
 800826c:	bf14      	ite	ne
 800826e:	220a      	movne	r2, #10
 8008270:	2208      	moveq	r2, #8
 8008272:	2100      	movs	r1, #0
 8008274:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008278:	6865      	ldr	r5, [r4, #4]
 800827a:	60a5      	str	r5, [r4, #8]
 800827c:	2d00      	cmp	r5, #0
 800827e:	f2c0 8095 	blt.w	80083ac <_printf_i+0x20c>
 8008282:	6821      	ldr	r1, [r4, #0]
 8008284:	f021 0104 	bic.w	r1, r1, #4
 8008288:	6021      	str	r1, [r4, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d13d      	bne.n	800830a <_printf_i+0x16a>
 800828e:	2d00      	cmp	r5, #0
 8008290:	f040 808e 	bne.w	80083b0 <_printf_i+0x210>
 8008294:	4665      	mov	r5, ip
 8008296:	2a08      	cmp	r2, #8
 8008298:	d10b      	bne.n	80082b2 <_printf_i+0x112>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	07db      	lsls	r3, r3, #31
 800829e:	d508      	bpl.n	80082b2 <_printf_i+0x112>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	6862      	ldr	r2, [r4, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	bfde      	ittt	le
 80082a8:	2330      	movle	r3, #48	; 0x30
 80082aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082b2:	ebac 0305 	sub.w	r3, ip, r5
 80082b6:	6123      	str	r3, [r4, #16]
 80082b8:	f8cd 8000 	str.w	r8, [sp]
 80082bc:	463b      	mov	r3, r7
 80082be:	aa03      	add	r2, sp, #12
 80082c0:	4621      	mov	r1, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff fef6 	bl	80080b4 <_printf_common>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d14d      	bne.n	8008368 <_printf_i+0x1c8>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082d0:	b005      	add	sp, #20
 80082d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082d6:	4839      	ldr	r0, [pc, #228]	; (80083bc <_printf_i+0x21c>)
 80082d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082dc:	6813      	ldr	r3, [r2, #0]
 80082de:	6821      	ldr	r1, [r4, #0]
 80082e0:	1d1d      	adds	r5, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6015      	str	r5, [r2, #0]
 80082e6:	060a      	lsls	r2, r1, #24
 80082e8:	d50b      	bpl.n	8008302 <_printf_i+0x162>
 80082ea:	07ca      	lsls	r2, r1, #31
 80082ec:	bf44      	itt	mi
 80082ee:	f041 0120 	orrmi.w	r1, r1, #32
 80082f2:	6021      	strmi	r1, [r4, #0]
 80082f4:	b91b      	cbnz	r3, 80082fe <_printf_i+0x15e>
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	f022 0220 	bic.w	r2, r2, #32
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	2210      	movs	r2, #16
 8008300:	e7b7      	b.n	8008272 <_printf_i+0xd2>
 8008302:	064d      	lsls	r5, r1, #25
 8008304:	bf48      	it	mi
 8008306:	b29b      	uxthmi	r3, r3
 8008308:	e7ef      	b.n	80082ea <_printf_i+0x14a>
 800830a:	4665      	mov	r5, ip
 800830c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008310:	fb02 3311 	mls	r3, r2, r1, r3
 8008314:	5cc3      	ldrb	r3, [r0, r3]
 8008316:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800831a:	460b      	mov	r3, r1
 800831c:	2900      	cmp	r1, #0
 800831e:	d1f5      	bne.n	800830c <_printf_i+0x16c>
 8008320:	e7b9      	b.n	8008296 <_printf_i+0xf6>
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	6961      	ldr	r1, [r4, #20]
 8008328:	1d18      	adds	r0, r3, #4
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	0628      	lsls	r0, r5, #24
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	d501      	bpl.n	8008336 <_printf_i+0x196>
 8008332:	6019      	str	r1, [r3, #0]
 8008334:	e002      	b.n	800833c <_printf_i+0x19c>
 8008336:	066a      	lsls	r2, r5, #25
 8008338:	d5fb      	bpl.n	8008332 <_printf_i+0x192>
 800833a:	8019      	strh	r1, [r3, #0]
 800833c:	2300      	movs	r3, #0
 800833e:	6123      	str	r3, [r4, #16]
 8008340:	4665      	mov	r5, ip
 8008342:	e7b9      	b.n	80082b8 <_printf_i+0x118>
 8008344:	6813      	ldr	r3, [r2, #0]
 8008346:	1d19      	adds	r1, r3, #4
 8008348:	6011      	str	r1, [r2, #0]
 800834a:	681d      	ldr	r5, [r3, #0]
 800834c:	6862      	ldr	r2, [r4, #4]
 800834e:	2100      	movs	r1, #0
 8008350:	4628      	mov	r0, r5
 8008352:	f7f7 ff3d 	bl	80001d0 <memchr>
 8008356:	b108      	cbz	r0, 800835c <_printf_i+0x1bc>
 8008358:	1b40      	subs	r0, r0, r5
 800835a:	6060      	str	r0, [r4, #4]
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	2300      	movs	r3, #0
 8008362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008366:	e7a7      	b.n	80082b8 <_printf_i+0x118>
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	462a      	mov	r2, r5
 800836c:	4639      	mov	r1, r7
 800836e:	4630      	mov	r0, r6
 8008370:	47c0      	blx	r8
 8008372:	3001      	adds	r0, #1
 8008374:	d0aa      	beq.n	80082cc <_printf_i+0x12c>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	079b      	lsls	r3, r3, #30
 800837a:	d413      	bmi.n	80083a4 <_printf_i+0x204>
 800837c:	68e0      	ldr	r0, [r4, #12]
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	4298      	cmp	r0, r3
 8008382:	bfb8      	it	lt
 8008384:	4618      	movlt	r0, r3
 8008386:	e7a3      	b.n	80082d0 <_printf_i+0x130>
 8008388:	2301      	movs	r3, #1
 800838a:	464a      	mov	r2, r9
 800838c:	4639      	mov	r1, r7
 800838e:	4630      	mov	r0, r6
 8008390:	47c0      	blx	r8
 8008392:	3001      	adds	r0, #1
 8008394:	d09a      	beq.n	80082cc <_printf_i+0x12c>
 8008396:	3501      	adds	r5, #1
 8008398:	68e3      	ldr	r3, [r4, #12]
 800839a:	9a03      	ldr	r2, [sp, #12]
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	42ab      	cmp	r3, r5
 80083a0:	dcf2      	bgt.n	8008388 <_printf_i+0x1e8>
 80083a2:	e7eb      	b.n	800837c <_printf_i+0x1dc>
 80083a4:	2500      	movs	r5, #0
 80083a6:	f104 0919 	add.w	r9, r4, #25
 80083aa:	e7f5      	b.n	8008398 <_printf_i+0x1f8>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1ac      	bne.n	800830a <_printf_i+0x16a>
 80083b0:	7803      	ldrb	r3, [r0, #0]
 80083b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083ba:	e76c      	b.n	8008296 <_printf_i+0xf6>
 80083bc:	080093b1 	.word	0x080093b1
 80083c0:	080093c2 	.word	0x080093c2

080083c4 <_sbrk_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4c06      	ldr	r4, [pc, #24]	; (80083e0 <_sbrk_r+0x1c>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4605      	mov	r5, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	f7f9 fa10 	bl	80017f4 <_sbrk>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_sbrk_r+0x1a>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	b103      	cbz	r3, 80083de <_sbrk_r+0x1a>
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	2000157c 	.word	0x2000157c

080083e4 <__sread>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	460c      	mov	r4, r1
 80083e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ec:	f000 f896 	bl	800851c <_read_r>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	bfab      	itete	ge
 80083f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083f6:	89a3      	ldrhlt	r3, [r4, #12]
 80083f8:	181b      	addge	r3, r3, r0
 80083fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083fe:	bfac      	ite	ge
 8008400:	6563      	strge	r3, [r4, #84]	; 0x54
 8008402:	81a3      	strhlt	r3, [r4, #12]
 8008404:	bd10      	pop	{r4, pc}

08008406 <__swrite>:
 8008406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840a:	461f      	mov	r7, r3
 800840c:	898b      	ldrh	r3, [r1, #12]
 800840e:	05db      	lsls	r3, r3, #23
 8008410:	4605      	mov	r5, r0
 8008412:	460c      	mov	r4, r1
 8008414:	4616      	mov	r6, r2
 8008416:	d505      	bpl.n	8008424 <__swrite+0x1e>
 8008418:	2302      	movs	r3, #2
 800841a:	2200      	movs	r2, #0
 800841c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008420:	f000 f868 	bl	80084f4 <_lseek_r>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800842a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	4632      	mov	r2, r6
 8008432:	463b      	mov	r3, r7
 8008434:	4628      	mov	r0, r5
 8008436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843a:	f000 b817 	b.w	800846c <_write_r>

0800843e <__sseek>:
 800843e:	b510      	push	{r4, lr}
 8008440:	460c      	mov	r4, r1
 8008442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008446:	f000 f855 	bl	80084f4 <_lseek_r>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	bf15      	itete	ne
 8008450:	6560      	strne	r0, [r4, #84]	; 0x54
 8008452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800845a:	81a3      	strheq	r3, [r4, #12]
 800845c:	bf18      	it	ne
 800845e:	81a3      	strhne	r3, [r4, #12]
 8008460:	bd10      	pop	{r4, pc}

08008462 <__sclose>:
 8008462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008466:	f000 b813 	b.w	8008490 <_close_r>
	...

0800846c <_write_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4c07      	ldr	r4, [pc, #28]	; (800848c <_write_r+0x20>)
 8008470:	4605      	mov	r5, r0
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	2200      	movs	r2, #0
 8008478:	6022      	str	r2, [r4, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f7f9 f969 	bl	8001752 <_write>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_write_r+0x1e>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	b103      	cbz	r3, 800848a <_write_r+0x1e>
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	2000157c 	.word	0x2000157c

08008490 <_close_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4c06      	ldr	r4, [pc, #24]	; (80084ac <_close_r+0x1c>)
 8008494:	2300      	movs	r3, #0
 8008496:	4605      	mov	r5, r0
 8008498:	4608      	mov	r0, r1
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	f7f9 f975 	bl	800178a <_close>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_close_r+0x1a>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_close_r+0x1a>
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	2000157c 	.word	0x2000157c

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4c07      	ldr	r4, [pc, #28]	; (80084d0 <_fstat_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4605      	mov	r5, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	f7f9 f970 	bl	80017a2 <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	2000157c 	.word	0x2000157c

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4c06      	ldr	r4, [pc, #24]	; (80084f0 <_isatty_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4605      	mov	r5, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	f7f9 f96f 	bl	80017c2 <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	602b      	str	r3, [r5, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	2000157c 	.word	0x2000157c

080084f4 <_lseek_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4c07      	ldr	r4, [pc, #28]	; (8008514 <_lseek_r+0x20>)
 80084f8:	4605      	mov	r5, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	6022      	str	r2, [r4, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7f9 f968 	bl	80017d8 <_lseek>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_lseek_r+0x1e>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	b103      	cbz	r3, 8008512 <_lseek_r+0x1e>
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	2000157c 	.word	0x2000157c

08008518 <__malloc_lock>:
 8008518:	4770      	bx	lr

0800851a <__malloc_unlock>:
 800851a:	4770      	bx	lr

0800851c <_read_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4c07      	ldr	r4, [pc, #28]	; (800853c <_read_r+0x20>)
 8008520:	4605      	mov	r5, r0
 8008522:	4608      	mov	r0, r1
 8008524:	4611      	mov	r1, r2
 8008526:	2200      	movs	r2, #0
 8008528:	6022      	str	r2, [r4, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	f7f9 f8f4 	bl	8001718 <_read>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_read_r+0x1e>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	b103      	cbz	r3, 800853a <_read_r+0x1e>
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	2000157c 	.word	0x2000157c

08008540 <_init>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr

0800854c <_fini>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

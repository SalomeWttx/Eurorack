
projet_3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005360  08005360  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005368  08005368  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001974  20000070  080053e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019e4  080053e0  000219e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001217b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000281f  00000000  00000000  0003221b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00034a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00035818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023275  00000000  00000000  00036488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce98  00000000  00000000  000596fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4259  00000000  00000000  00066595  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a7ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c80  00000000  00000000  0013a86c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800528c 	.word	0x0800528c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	0800528c 	.word	0x0800528c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4b4f      	ldr	r3, [pc, #316]	; (8000620 <MX_ADC1_Init+0x154>)
 80004e4:	4a4f      	ldr	r2, [pc, #316]	; (8000624 <MX_ADC1_Init+0x158>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e8:	4b4d      	ldr	r3, [pc, #308]	; (8000620 <MX_ADC1_Init+0x154>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ee:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <MX_ADC1_Init+0x154>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <MX_ADC1_Init+0x154>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004fa:	4b49      	ldr	r3, [pc, #292]	; (8000620 <MX_ADC1_Init+0x154>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000500:	4b47      	ldr	r3, [pc, #284]	; (8000620 <MX_ADC1_Init+0x154>)
 8000502:	2204      	movs	r2, #4
 8000504:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000506:	4b46      	ldr	r3, [pc, #280]	; (8000620 <MX_ADC1_Init+0x154>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800050c:	4b44      	ldr	r3, [pc, #272]	; (8000620 <MX_ADC1_Init+0x154>)
 800050e:	2201      	movs	r2, #1
 8000510:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000512:	4b43      	ldr	r3, [pc, #268]	; (8000620 <MX_ADC1_Init+0x154>)
 8000514:	2206      	movs	r2, #6
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000518:	4b41      	ldr	r3, [pc, #260]	; (8000620 <MX_ADC1_Init+0x154>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <MX_ADC1_Init+0x154>)
 8000522:	2200      	movs	r2, #0
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000526:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <MX_ADC1_Init+0x154>)
 8000528:	2200      	movs	r2, #0
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052c:	4b3c      	ldr	r3, [pc, #240]	; (8000620 <MX_ADC1_Init+0x154>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000534:	4b3a      	ldr	r3, [pc, #232]	; (8000620 <MX_ADC1_Init+0x154>)
 8000536:	2200      	movs	r2, #0
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053a:	4b39      	ldr	r3, [pc, #228]	; (8000620 <MX_ADC1_Init+0x154>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000542:	4837      	ldr	r0, [pc, #220]	; (8000620 <MX_ADC1_Init+0x154>)
 8000544:	f000 ff88 	bl	8001458 <HAL_ADC_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800054e:	f000 fb1f 	bl	8000b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <MX_ADC1_Init+0x15c>)
 8000554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000556:	2306      	movs	r3, #6
 8000558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800055a:	2307      	movs	r3, #7
 800055c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055e:	237f      	movs	r3, #127	; 0x7f
 8000560:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000562:	2304      	movs	r3, #4
 8000564:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	482c      	ldr	r0, [pc, #176]	; (8000620 <MX_ADC1_Init+0x154>)
 8000570:	f001 f950 	bl	8001814 <HAL_ADC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800057a:	f000 fb09 	bl	8000b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <MX_ADC1_Init+0x160>)
 8000580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000582:	230c      	movs	r3, #12
 8000584:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	4825      	ldr	r0, [pc, #148]	; (8000620 <MX_ADC1_Init+0x154>)
 800058c:	f001 f942 	bl	8001814 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000596:	f000 fafb 	bl	8000b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800059a:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_ADC1_Init+0x164>)
 800059c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800059e:	2312      	movs	r3, #18
 80005a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <MX_ADC1_Init+0x154>)
 80005a8:	f001 f934 	bl	8001814 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80005b2:	f000 faed 	bl	8000b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_ADC1_Init+0x168>)
 80005b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005ba:	2318      	movs	r3, #24
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4619      	mov	r1, r3
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <MX_ADC1_Init+0x154>)
 80005c8:	f001 f924 	bl	8001814 <HAL_ADC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80005d2:	f000 fadd 	bl	8000b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_ADC1_Init+0x16c>)
 80005d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005e0:	2307      	movs	r3, #7
 80005e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <MX_ADC1_Init+0x154>)
 80005ea:	f001 f913 	bl	8001814 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80005f4:	f000 facc 	bl	8000b90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_ADC1_Init+0x170>)
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005fc:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_ADC1_Init+0x154>)
 8000608:	f001 f904 	bl	8001814 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8000612:	f000 fabd 	bl	8000b90 <Error_Handler>
  }

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000009c 	.word	0x2000009c
 8000624:	50040000 	.word	0x50040000
 8000628:	21800100 	.word	0x21800100
 800062c:	14f00020 	.word	0x14f00020
 8000630:	19200040 	.word	0x19200040
 8000634:	2e300800 	.word	0x2e300800
 8000638:	32601000 	.word	0x32601000
 800063c:	3ef08000 	.word	0x3ef08000

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a37      	ldr	r2, [pc, #220]	; (800073c <HAL_ADC_MspInit+0xfc>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d167      	bne.n	8000732 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000662:	4b37      	ldr	r3, [pc, #220]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a36      	ldr	r2, [pc, #216]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b34      	ldr	r3, [pc, #208]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b31      	ldr	r3, [pc, #196]	; (8000740 <HAL_ADC_MspInit+0x100>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a30      	ldr	r2, [pc, #192]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a2a      	ldr	r2, [pc, #168]	; (8000740 <HAL_ADC_MspInit+0x100>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <HAL_ADC_MspInit+0x100>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
 80006aa:	23cb      	movs	r3, #203	; 0xcb
 80006ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ae:	230b      	movs	r3, #11
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f002 f9ba 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c4:	2301      	movs	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006c8:	230b      	movs	r3, #11
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	481b      	ldr	r0, [pc, #108]	; (8000744 <HAL_ADC_MspInit+0x104>)
 80006d8:	f002 f9ae 	bl	8002a38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <HAL_ADC_MspInit+0x108>)
 80006de:	4a1b      	ldr	r2, [pc, #108]	; (800074c <HAL_ADC_MspInit+0x10c>)
 80006e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_ADC_MspInit+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_ADC_MspInit+0x108>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_ADC_MspInit+0x108>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_ADC_MspInit+0x108>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_ADC_MspInit+0x108>)
 80006fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_ADC_MspInit+0x108>)
 8000704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_ADC_MspInit+0x108>)
 800070c:	2220      	movs	r2, #32
 800070e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_ADC_MspInit+0x108>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <HAL_ADC_MspInit+0x108>)
 8000718:	f001 ff96 	bl	8002648 <HAL_DMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000722:	f000 fa35 	bl	8000b90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_ADC_MspInit+0x108>)
 800072a:	64da      	str	r2, [r3, #76]	; 0x4c
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_ADC_MspInit+0x108>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	50040000 	.word	0x50040000
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400
 8000748:	20000100 	.word	0x20000100
 800074c:	40020008 	.word	0x40020008

08000750 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2224      	movs	r2, #36	; 0x24
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f004 f925 	bl	80049ac <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_DAC1_Init+0x74>)
 8000764:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_DAC1_Init+0x78>)
 8000766:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_DAC1_Init+0x74>)
 800076a:	f001 fe30 	bl	80023ce <HAL_DAC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000774:	f000 fa0c 	bl	8000b90 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000780:	2302      	movs	r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_DAC1_Init+0x74>)
 8000794:	f001 fe3d 	bl	8002412 <HAL_DAC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f9f7 	bl	8000b90 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2210      	movs	r2, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_DAC1_Init+0x74>)
 80007ae:	f001 fe30 	bl	8002412 <HAL_DAC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 80007b8:	f000 f9ea 	bl	8000b90 <Error_Handler>
  }

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000148 	.word	0x20000148
 80007c8:	40007400 	.word	0x40007400

080007cc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a15      	ldr	r2, [pc, #84]	; (8000840 <HAL_DAC_MspInit+0x74>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d124      	bne.n	8000838 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_DAC_MspInit+0x78>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_DAC_MspInit+0x78>)
 80007f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_DAC_MspInit+0x78>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_DAC_MspInit+0x78>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_DAC_MspInit+0x78>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_DAC_MspInit+0x78>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800081e:	2330      	movs	r3, #48	; 0x30
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000822:	2303      	movs	r3, #3
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f002 f900 	bl	8002a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40007400 	.word	0x40007400
 8000844:	40021000 	.word	0x40021000

08000848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_DMA_Init+0x38>)
 8000850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <MX_DMA_Init+0x38>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6493      	str	r3, [r2, #72]	; 0x48
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_DMA_Init+0x38>)
 800085c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	200b      	movs	r0, #11
 800086c:	f001 fd79 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000870:	200b      	movs	r0, #11
 8000872:	f001 fd92 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0xf8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a37      	ldr	r2, [pc, #220]	; (800097c <MX_GPIO_Init+0xf8>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0xf8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_GPIO_Init+0xf8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a31      	ldr	r2, [pc, #196]	; (800097c <MX_GPIO_Init+0xf8>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_GPIO_Init+0xf8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0xf8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a2b      	ldr	r2, [pc, #172]	; (800097c <MX_GPIO_Init+0xf8>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0xf8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4826      	ldr	r0, [pc, #152]	; (8000980 <MX_GPIO_Init+0xfc>)
 80008e8:	f002 fa28 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ec:	2302      	movs	r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_GPIO_Init+0x100>)
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4820      	ldr	r0, [pc, #128]	; (8000980 <MX_GPIO_Init+0xfc>)
 8000900:	f002 f89a 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_SWITCH_Pin;
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_GPIO_Init+0x104>)
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f002 f88c 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000920:	2308      	movs	r3, #8
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <MX_GPIO_Init+0xfc>)
 8000938:	f002 f87e 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_CH_A_Pin;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_CH_A_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_GPIO_Init+0xfc>)
 8000950:	f002 f872 	bl	8002a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2007      	movs	r0, #7
 800095a:	f001 fd02 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800095e:	2007      	movs	r0, #7
 8000960:	f001 fd1b 	bl	800239a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	2017      	movs	r0, #23
 800096a:	f001 fcfa 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800096e:	2017      	movs	r0, #23
 8000970:	f001 fd13 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400
 8000984:	10210000 	.word	0x10210000
 8000988:	10110000 	.word	0x10110000

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fb03 	bl	8000f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f824 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f7ff ff74 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 800099c:	f7ff ff54 	bl	8000848 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009a0:	f000 fa4e 	bl	8000e40 <MX_USART2_UART_Init>
 // MX_I2C1_Init();
  MX_ADC1_Init();
 80009a4:	f7ff fd92 	bl	80004cc <MX_ADC1_Init>
  MX_DAC1_Init();
 80009a8:	f7ff fed2 	bl	8000750 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
  printf("oh, un gens\r\n");
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <main+0x44>)
 80009ae:	f004 f861 	bl	8004a74 <puts>
  SSD1306_GotoXY (10, 30);
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
  SSD1306_UpdateScreen(); // update screen*/


  HAL_ADC_Start_DMA(&hadc1 , (uint32_t *) adc_buffer, ADC_BUFFER_LENGTH);
 80009b2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009b6:	4907      	ldr	r1, [pc, #28]	; (80009d4 <main+0x48>)
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <main+0x4c>)
 80009ba:	f000 fe93 	bl	80016e4 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("%ld %ld %ld\r\n", value[0],value[1],value[2]);
	  if(DMA_finished){
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <main+0x50>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0fb      	beq.n	80009be <main+0x32>
		  DMA_finished = 0;
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <main+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
	  if(DMA_finished){
 80009cc:	e7f7      	b.n	80009be <main+0x32>
 80009ce:	bf00      	nop
 80009d0:	080052a4 	.word	0x080052a4
 80009d4:	2000015c 	.word	0x2000015c
 80009d8:	2000009c 	.word	0x2000009c
 80009dc:	2000008c 	.word	0x2000008c

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	; 0xb0
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009ea:	2244      	movs	r2, #68	; 0x44
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 ffdc 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2254      	movs	r2, #84	; 0x54
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 ffce 	bl	80049ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a10:	f002 f9c4 	bl	8002d9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a14:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <SystemClock_Config+0x128>)
 8000a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a1a:	4a3b      	ldr	r2, [pc, #236]	; (8000b08 <SystemClock_Config+0x128>)
 8000a1c:	f023 0318 	bic.w	r3, r3, #24
 8000a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a24:	2314      	movs	r3, #20
 8000a26:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a38:	2360      	movs	r3, #96	; 0x60
 8000a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a50:	2328      	movs	r3, #40	; 0x28
 8000a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fa09 	bl	8002e84 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a78:	f000 f88a 	bl	8000b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2303      	movs	r3, #3
 8000a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a94:	2104      	movs	r1, #4
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fe14 	bl	80036c4 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aa2:	f000 f875 	bl	8000b90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000aa6:	f244 0342 	movw	r3, #16450	; 0x4042
 8000aaa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fff6 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000ae6:	f000 f853 	bl	8000b90 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aee:	f002 f973 	bl	8002dd8 <HAL_PWREx_ControlVoltageScaling>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000af8:	f000 f84a 	bl	8000b90 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000afc:	f003 f9d8 	bl	8003eb0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b00:	bf00      	nop
 8000b02:	37b0      	adds	r7, #176	; 0xb0
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	__NOP();
 8000b14:	bf00      	nop
	DMA_finished = 1;
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	2000008c 	.word	0x2000008c

08000b2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
	//Pour le switch
	if(GPIO_Pin == KNOB_SWITCH_Pin){
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b3c:	d101      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x16>
		//On a appuyé sur le bouton
		__NOP();
 8000b3e:	bf00      	nop
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_EXTI_Callback+0x18>
	}else{
		__NOP();
 8000b42:	bf00      	nop
	}
	//Pour gérer la roue codeuse
	if(GPIO_Pin == GPIO_PIN_1){
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d119      	bne.n	8000b7e <HAL_GPIO_EXTI_Callback+0x52>
		//Gestion de l'interruption
		if(HAL_GPIO_ReadPin(KNOB_CH_A_GPIO_Port, KNOB_CH_A_Pin)){
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	480e      	ldr	r0, [pc, #56]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b4e:	f002 f8dd 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d009      	beq.n	8000b6c <HAL_GPIO_EXTI_Callback+0x40>
			counter++;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	3301      	adds	r3, #1
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b68:	801a      	strh	r2, [r3, #0]
		}else{
			counter--;
		}

	}
}
 8000b6a:	e008      	b.n	8000b7e <HAL_GPIO_EXTI_Callback+0x52>
			counter--;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b7c:	801a      	strh	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	2000008e 	.word	0x2000008e

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <Error_Handler+0x6>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x44>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x44>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000be8:	1d39      	adds	r1, r7, #4
 8000bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <__io_putchar+0x20>)
 8000bf2:	f003 faab 	bl	800414c <HAL_UART_Transmit>

  return ch;
 8000bf6:	687b      	ldr	r3, [r7, #4]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000195c 	.word	0x2000195c

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f9f8 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f002 f885 	bl	8002d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Channel1_IRQHandler+0x10>)
 8000c6e:	f001 fe03 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000100 	.word	0x20000100

08000c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c84:	f002 f872 	bl	8002d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
	}

return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff7d 	bl	8000be0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
	}
	return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f003 fdde 	bl	8004958 <__errno>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	230c      	movs	r3, #12
 8000da0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20010000 	.word	0x20010000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	200019e8 	.word	0x200019e8

08000dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <SystemInit+0x64>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <SystemInit+0x64>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <SystemInit+0x68>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <SystemInit+0x68>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <SystemInit+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <SystemInit+0x68>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <SystemInit+0x68>)
 8000e00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <SystemInit+0x68>)
 8000e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <SystemInit+0x68>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <SystemInit+0x68>)
 8000e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <SystemInit+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x64>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	40021000 	.word	0x40021000

08000e40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MX_USART2_UART_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e84:	f003 f914 	bl	80040b0 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f7ff fe7f 	bl	8000b90 <Error_Handler>
  }

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000195c 	.word	0x2000195c
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d13a      	bne.n	8000f38 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_UART_MspInit+0xa4>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_UART_MspInit+0xa4>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_UART_MspInit+0xa4>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0xa4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0xa4>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0xa4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f001 fd92 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f26:	2303      	movs	r3, #3
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f001 fd80 	bl	8002a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40021000 	.word	0x40021000

08000f48 <Reset_Handler>:
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>
 8000f4c:	f7ff ff42 	bl	8000dd4 <SystemInit>
 8000f50:	2100      	movs	r1, #0
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <LoopForever+0x6>)
 8000f56:	585b      	ldr	r3, [r3, r1]
 8000f58:	5043      	str	r3, [r0, r1]
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <LoopForever+0xa>)
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <LoopForever+0xe>)
 8000f60:	1842      	adds	r2, r0, r1
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <LoopForever+0x16>)
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>
 8000f76:	f003 fcf5 	bl	8004964 <__libc_init_array>
 8000f7a:	f7ff fd07 	bl	800098c <main>

08000f7e <LoopForever>:
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
 8000f80:	20010000 	.word	0x20010000
 8000f84:	08005370 	.word	0x08005370
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000070 	.word	0x20000070
 8000f90:	20000070 	.word	0x20000070
 8000f94:	200019e4 	.word	0x200019e4

08000f98 <ADC1_IRQHandler>:
 8000f98:	e7fe      	b.n	8000f98 <ADC1_IRQHandler>

08000f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f001 f9d1 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f80e 	bl	8000fcc <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e001      	b.n	8000fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fbc:	f7ff fdec 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_InitTick+0x6c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d023      	beq.n	8001028 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_InitTick+0x70>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x6c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 f9dd 	bl	80023b6 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10f      	bne.n	8001022 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d809      	bhi.n	800101c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001010:	f001 f9a7 	bl	8002362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_InitTick+0x74>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e007      	b.n	800102c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e004      	b.n	800102c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e001      	b.n	800102c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	200019dc 	.word	0x200019dc

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200019dc 	.word	0x200019dc

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_Delay+0x40>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000008 	.word	0x20000008

080010c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3360      	adds	r3, #96	; 0x60
 8001142:	461a      	mov	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <LL_ADC_SetOffset+0x44>)
 8001152:	4013      	ands	r3, r2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	4313      	orrs	r3, r2
 8001160:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001168:	bf00      	nop
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	03fff000 	.word	0x03fff000

08001178 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3360      	adds	r3, #96	; 0x60
 8001186:	461a      	mov	r2, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3360      	adds	r3, #96	; 0x60
 80011b4:	461a      	mov	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3330      	adds	r3, #48	; 0x30
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	4413      	add	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	211f      	movs	r1, #31
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	0e9b      	lsrs	r3, r3, #26
 8001238:	f003 011f 	and.w	r1, r3, #31
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	431a      	orrs	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800124c:	bf00      	nop
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3314      	adds	r3, #20
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	0e5b      	lsrs	r3, r3, #25
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	0d1b      	lsrs	r3, r3, #20
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2107      	movs	r1, #7
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	401a      	ands	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	0d1b      	lsrs	r3, r3, #20
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0318 	and.w	r3, r3, #24
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012d4:	40d9      	lsrs	r1, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	400b      	ands	r3, r1
 80012da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012de:	431a      	orrs	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0007ffff 	.word	0x0007ffff

080012f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6093      	str	r3, [r2, #8]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800132c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001330:	d101      	bne.n	8001336 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001380:	d101      	bne.n	8001386 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013a8:	f043 0201 	orr.w	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <LL_ADC_IsEnabled+0x18>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <LL_ADC_IsEnabled+0x1a>
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f6:	f043 0204 	orr.w	r2, r3, #4
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b04      	cmp	r3, #4
 800141c:	d101      	bne.n	8001422 <LL_ADC_REG_IsConversionOngoing+0x18>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b08      	cmp	r3, #8
 8001442:	d101      	bne.n	8001448 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e12a      	b.n	80016c8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff f8dd 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff3f 	bl	800131c <LL_ADC_IsDeepPowerDownEnabled>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff25 	bl	80012f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff5a 	bl	800136c <LL_ADC_IsInternalRegulatorEnabled>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d113      	bne.n	80014e6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff3e 	bl	8001344 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_ADC_Init+0x278>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	4a81      	ldr	r2, [pc, #516]	; (80016d4 <HAL_ADC_Init+0x27c>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff3e 	bl	800136c <LL_ADC_IsInternalRegulatorEnabled>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10d      	bne.n	8001512 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	f043 0210 	orr.w	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff77 	bl	800140a <LL_ADC_REG_IsConversionOngoing>
 800151c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80c5 	bne.w	80016b6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 80c1 	bne.w	80016b6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800153c:	f043 0202 	orr.w	r2, r3, #2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff37 	bl	80013bc <LL_ADC_IsEnabled>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10b      	bne.n	800156c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001554:	4860      	ldr	r0, [pc, #384]	; (80016d8 <HAL_ADC_Init+0x280>)
 8001556:	f7ff ff31 	bl	80013bc <LL_ADC_IsEnabled>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	485d      	ldr	r0, [pc, #372]	; (80016dc <HAL_ADC_Init+0x284>)
 8001568:	f7ff fdae 	bl	80010c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e5b      	ldrb	r3, [r3, #25]
 8001570:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001576:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800157c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001582:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	3b01      	subs	r3, #1
 80015a0:	045b      	lsls	r3, r3, #17
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d009      	beq.n	80015c4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <HAL_ADC_Init+0x288>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff14 	bl	800140a <LL_ADC_REG_IsConversionOngoing>
 80015e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff21 	bl	8001430 <LL_ADC_INJ_IsConversionOngoing>
 80015ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d13d      	bne.n	8001672 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d13a      	bne.n	8001672 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001600:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001608:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001618:	f023 0302 	bic.w	r3, r3, #2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	430b      	orrs	r3, r1
 8001624:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800162c:	2b01      	cmp	r3, #1
 800162e:	d118      	bne.n	8001662 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800164c:	4311      	orrs	r1, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001652:	430a      	orrs	r2, r1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	e007      	b.n	8001672 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10c      	bne.n	8001694 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	f023 010f 	bic.w	r1, r3, #15
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	1e5a      	subs	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
 8001692:	e007      	b.n	80016a4 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 020f 	bic.w	r2, r2, #15
 80016a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a8:	f023 0303 	bic.w	r3, r3, #3
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
 80016b4:	e007      	b.n	80016c6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ba:	f043 0210 	orr.w	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	053e2d63 	.word	0x053e2d63
 80016d8:	50040000 	.word	0x50040000
 80016dc:	50040300 	.word	0x50040300
 80016e0:	fff0c007 	.word	0xfff0c007

080016e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fe88 	bl	800140a <LL_ADC_REG_IsConversionOngoing>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d167      	bne.n	80017d0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start_DMA+0x2a>
 800170a:	2302      	movs	r3, #2
 800170c:	e063      	b.n	80017d6 <HAL_ADC_Start_DMA+0xf2>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fc5a 	bl	8001fd0 <ADC_Enable>
 800171c:	4603      	mov	r3, r0
 800171e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d14f      	bne.n	80017c6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f023 0206 	bic.w	r2, r3, #6
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
 8001752:	e002      	b.n	800175a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_ADC_Start_DMA+0xfc>)
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_ADC_Start_DMA+0x100>)
 8001768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_ADC_Start_DMA+0x104>)
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	221c      	movs	r2, #28
 8001778:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0210 	orr.w	r2, r2, #16
 8001790:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3340      	adds	r3, #64	; 0x40
 80017ac:	4619      	mov	r1, r3
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f001 f801 	bl	80027b8 <HAL_DMA_Start_IT>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe0f 	bl	80013e2 <LL_ADC_REG_StartConversion>
 80017c4:	e006      	b.n	80017d4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80017ce:	e001      	b.n	80017d4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
 80017d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08002085 	.word	0x08002085
 80017e4:	0800215d 	.word	0x0800215d
 80017e8:	08002179 	.word	0x08002179

080017ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0b6      	sub	sp, #216	; 0xd8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x22>
 8001832:	2302      	movs	r3, #2
 8001834:	e3b8      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x794>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fde1 	bl	800140a <LL_ADC_REG_IsConversionOngoing>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 839d 	bne.w	8001f8a <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d824      	bhi.n	80018a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	3b02      	subs	r3, #2
 800185e:	2b03      	cmp	r3, #3
 8001860:	d81b      	bhi.n	800189a <HAL_ADC_ConfigChannel+0x86>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <HAL_ADC_ConfigChannel+0x54>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001879 	.word	0x08001879
 800186c:	08001881 	.word	0x08001881
 8001870:	08001889 	.word	0x08001889
 8001874:	08001891 	.word	0x08001891
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	220c      	movs	r2, #12
 800187c:	605a      	str	r2, [r3, #4]
          break;
 800187e:	e011      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2212      	movs	r2, #18
 8001884:	605a      	str	r2, [r3, #4]
          break;
 8001886:	e00d      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2218      	movs	r2, #24
 800188c:	605a      	str	r2, [r3, #4]
          break;
 800188e:	e009      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	605a      	str	r2, [r3, #4]
          break;
 8001898:	e004      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2206      	movs	r2, #6
 800189e:	605a      	str	r2, [r3, #4]
          break;
 80018a0:	e000      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f7ff fca5 	bl	8001200 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fda5 	bl	800140a <LL_ADC_REG_IsConversionOngoing>
 80018c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fdb1 	bl	8001430 <LL_ADC_INJ_IsConversionOngoing>
 80018ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 81a6 	bne.w	8001c28 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 81a1 	bne.w	8001c28 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	461a      	mov	r2, r3
 80018f4:	f7ff fcb0 	bl	8001258 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d00a      	beq.n	8001930 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800192a:	f7ff fc01 	bl	8001130 <LL_ADC_SetOffset>
 800192e:	e17b      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fc1e 	bl	8001178 <LL_ADC_GetOffsetChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <HAL_ADC_ConfigChannel+0x148>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fc13 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	f003 021f 	and.w	r2, r3, #31
 800195a:	e01e      	b.n	800199a <HAL_ADC_ConfigChannel+0x186>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fc08 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800197e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e004      	b.n	8001998 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800198e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x19e>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	e018      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1d0>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019d6:	2320      	movs	r3, #32
 80019d8:	e004      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d106      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fbd7 	bl	80011a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fbbb 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x20e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fbb0 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	e01e      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x24c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2101      	movs	r1, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fba5 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a50:	2320      	movs	r3, #32
 8001a52:	e004      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x264>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x296>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	e004      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d106      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb74 	bl	80011a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fb58 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x2d4>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fb4d 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	f003 021f 	and.w	r2, r3, #31
 8001ae6:	e01e      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x312>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fb42 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b16:	2320      	movs	r3, #32
 8001b18:	e004      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x32a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0e9b      	lsrs	r3, r3, #26
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	e016      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x358>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2102      	movs	r1, #2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fb13 	bl	80011a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2103      	movs	r1, #3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff faf7 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x396>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff faec 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	e017      	b.n	8001bda <HAL_ADC_ConfigChannel+0x3c6>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2103      	movs	r1, #3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fae1 	bl	8001178 <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e003      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x3de>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	e011      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x402>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2103      	movs	r1, #3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fabe 	bl	80011a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fbc5 	bl	80013bc <LL_ADC_IsEnabled>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 813f 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f7ff fb32 	bl	80012b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a8e      	ldr	r2, [pc, #568]	; (8001e8c <HAL_ADC_ConfigChannel+0x678>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f040 8130 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x46c>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	bf94      	ite	ls
 8001c78:	2301      	movls	r3, #1
 8001c7a:	2300      	movhi	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e019      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x4a0>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c90:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	bf94      	ite	ls
 8001cae:	2301      	movls	r3, #1
 8001cb0:	2300      	movhi	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d079      	beq.n	8001dac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x4c0>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	069b      	lsls	r3, r3, #26
 8001cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd2:	e015      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x4ec>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	069b      	lsls	r3, r3, #26
 8001cfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x50c>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	e017      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x53c>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	e003      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	ea42 0103 	orr.w	r1, r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x562>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	3301      	adds	r3, #1
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	051b      	lsls	r3, r3, #20
 8001d74:	e018      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x594>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da8:	430b      	orrs	r3, r1
 8001daa:	e080      	b.n	8001eae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x5b4>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	069b      	lsls	r3, r3, #26
 8001dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc6:	e015      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x5e0>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001de0:	2320      	movs	r3, #32
 8001de2:	e003      	b.n	8001dec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x600>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	3301      	adds	r3, #1
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	e017      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x630>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	61fb      	str	r3, [r7, #28]
  return result;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	e003      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	ea42 0103 	orr.w	r1, r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10d      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x65c>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	3b1e      	subs	r3, #30
 8001e68:	051b      	lsls	r3, r3, #20
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	e01d      	b.n	8001eac <HAL_ADC_ConfigChannel+0x698>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	613b      	str	r3, [r7, #16]
  return result;
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e005      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x684>
 8001e8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	051b      	lsls	r3, r3, #20
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eac:	430b      	orrs	r3, r1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	6892      	ldr	r2, [r2, #8]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff f9d0 	bl	8001258 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <HAL_ADC_ConfigChannel+0x79c>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d06b      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec4:	483b      	ldr	r0, [pc, #236]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001ec6:	f7ff f925 	bl	8001114 <LL_ADC_GetCommonPathInternalCh>
 8001eca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d126      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d120      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <HAL_ADC_ConfigChannel+0x7a8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d156      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	482e      	ldr	r0, [pc, #184]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001efa:	f7ff f8f8 	bl	80010ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001efe:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	099a      	lsrs	r2, r3, #6
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f24:	e03a      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a27      	ldr	r2, [pc, #156]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d113      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x744>
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_ADC_ConfigChannel+0x7a8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12a      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001f52:	f7ff f8cc 	bl	80010ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f56:	e021      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_ADC_ConfigChannel+0x7b8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d11c      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_ADC_ConfigChannel+0x7a8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f80:	4619      	mov	r1, r3
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8001f84:	f7ff f8b3 	bl	80010ee <LL_ADC_SetCommonPathInternalCh>
 8001f88:	e008      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0220 	orr.w	r2, r3, #32
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fa4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	37d8      	adds	r7, #216	; 0xd8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	80080000 	.word	0x80080000
 8001fb4:	50040300 	.word	0x50040300
 8001fb8:	c7520000 	.word	0xc7520000
 8001fbc:	50040000 	.word	0x50040000
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	053e2d63 	.word	0x053e2d63
 8001fc8:	cb840000 	.word	0xcb840000
 8001fcc:	80000001 	.word	0x80000001

08001fd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f9ed 	bl	80013bc <LL_ADC_IsEnabled>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d146      	bne.n	8002076 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <ADC_Enable+0xb0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e032      	b.n	8002078 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f9bc 	bl	8001394 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800201c:	f7ff f826 	bl	800106c <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002022:	e021      	b.n	8002068 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f9c7 	bl	80013bc <LL_ADC_IsEnabled>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f9ab 	bl	8001394 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800203e:	f7ff f815 	bl	800106c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d90d      	bls.n	8002068 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0210 	orr.w	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e007      	b.n	8002078 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d1d6      	bne.n	8002024 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	8000003f 	.word	0x8000003f

08002084 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800209a:	2b00      	cmp	r3, #0
 800209c:	d14b      	bne.n	8002136 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d021      	beq.n	80020fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f88c 	bl	80011da <LL_ADC_REG_IsTriggerSourceSWStart>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d032      	beq.n	800212e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d12b      	bne.n	800212e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11f      	bne.n	800212e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
 80020fa:	e018      	b.n	800212e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d111      	bne.n	800212e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7fe fcec 	bl	8000b0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002134:	e00e      	b.n	8002154 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff fb5c 	bl	8001800 <HAL_ADC_ErrorCallback>
}
 8002148:	e004      	b.n	8002154 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fb3e 	bl	80017ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f043 0204 	orr.w	r2, r3, #4
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff fb2e 	bl	8001800 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff29 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff3e 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff8e 	bl	80022a0 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff31 	bl	8002210 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e014      	b.n	800240a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7fe f9eb 	bl	80007cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b088      	sub	sp, #32
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	795b      	ldrb	r3, [r3, #5]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_DAC_ConfigChannel+0x1c>
 800242a:	2302      	movs	r3, #2
 800242c:	e107      	b.n	800263e <HAL_DAC_ConfigChannel+0x22c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2202      	movs	r2, #2
 8002438:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d174      	bne.n	800252c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002442:	f7fe fe13 	bl	800106c <HAL_GetTick>
 8002446:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d134      	bne.n	80024b8 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800244e:	e011      	b.n	8002474 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002450:	f7fe fe0c 	bl	800106c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d90a      	bls.n	8002474 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f043 0208 	orr.w	r2, r3, #8
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2203      	movs	r2, #3
 800246e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0e4      	b.n	800263e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e6      	bne.n	8002450 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f7fe fdfe 	bl	8001084 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	6992      	ldr	r2, [r2, #24]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
 8002492:	e01e      	b.n	80024d2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002494:	f7fe fdea 	bl	800106c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d90a      	bls.n	80024b8 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f043 0208 	orr.w	r2, r3, #8
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2203      	movs	r2, #3
 80024b2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0c2      	b.n	800263e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dbe8      	blt.n	8002494 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7fe fdde 	bl	8001084 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	6992      	ldr	r2, [r2, #24]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	ea02 0103 	and.w	r1, r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	21ff      	movs	r1, #255	; 0xff
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	ea02 0103 	and.w	r1, r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d11d      	bne.n	8002570 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	221f      	movs	r2, #31
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2207      	movs	r2, #7
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	431a      	orrs	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	22c0      	movs	r2, #192	; 0xc0
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e098      	b.n	800278c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_DMA_Init+0x150>)
 8002662:	429a      	cmp	r2, r3
 8002664:	d80f      	bhi.n	8002686 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_DMA_Init+0x154>)
 800266e:	4413      	add	r3, r2
 8002670:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_DMA_Init+0x158>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	009a      	lsls	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_DMA_Init+0x15c>)
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
 8002684:	e00e      	b.n	80026a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_DMA_Init+0x160>)
 800268e:	4413      	add	r3, r2
 8002690:	4a43      	ldr	r2, [pc, #268]	; (80027a0 <HAL_DMA_Init+0x158>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a42      	ldr	r2, [pc, #264]	; (80027ac <HAL_DMA_Init+0x164>)
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fe:	d039      	beq.n	8002774 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_DMA_Init+0x15c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d11a      	bne.n	8002740 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_DMA_Init+0x168>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 031c 	and.w	r3, r3, #28
 8002716:	210f      	movs	r1, #15
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4924      	ldr	r1, [pc, #144]	; (80027b0 <HAL_DMA_Init+0x168>)
 8002720:	4013      	ands	r3, r2
 8002722:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_DMA_Init+0x168>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	491d      	ldr	r1, [pc, #116]	; (80027b0 <HAL_DMA_Init+0x168>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
 800273e:	e019      	b.n	8002774 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_DMA_Init+0x16c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f003 031c 	and.w	r3, r3, #28
 800274c:	210f      	movs	r1, #15
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	4917      	ldr	r1, [pc, #92]	; (80027b4 <HAL_DMA_Init+0x16c>)
 8002756:	4013      	ands	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_DMA_Init+0x16c>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f003 031c 	and.w	r3, r3, #28
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	4911      	ldr	r1, [pc, #68]	; (80027b4 <HAL_DMA_Init+0x16c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40020407 	.word	0x40020407
 800279c:	bffdfff8 	.word	0xbffdfff8
 80027a0:	cccccccd 	.word	0xcccccccd
 80027a4:	40020000 	.word	0x40020000
 80027a8:	bffdfbf8 	.word	0xbffdfbf8
 80027ac:	40020400 	.word	0x40020400
 80027b0:	400200a8 	.word	0x400200a8
 80027b4:	400204a8 	.word	0x400204a8

080027b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Start_IT+0x20>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e04b      	b.n	8002870 <HAL_DMA_Start_IT+0xb8>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d13a      	bne.n	8002862 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f8e0 	bl	80029d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 020e 	orr.w	r2, r2, #14
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00f      	b.n	8002850 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 020a 	orr.w	r2, r2, #10
 800284e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e005      	b.n	800286e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800286a:	2302      	movs	r3, #2
 800286c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800286e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f003 031c 	and.w	r3, r3, #28
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d026      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x7a>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d021      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 021c 	and.w	r2, r3, #28
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2104      	movs	r1, #4
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d071      	beq.n	80029cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80028f0:	e06c      	b.n	80029cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f003 031c 	and.w	r3, r3, #28
 80028fa:	2202      	movs	r2, #2
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02e      	beq.n	8002964 <HAL_DMA_IRQHandler+0xec>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d029      	beq.n	8002964 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 020a 	bic.w	r2, r2, #10
 800292c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f003 021c 	and.w	r2, r3, #28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2102      	movs	r1, #2
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d038      	beq.n	80029cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002962:	e033      	b.n	80029cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	f003 031c 	and.w	r3, r3, #28
 800296c:	2208      	movs	r2, #8
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02a      	beq.n	80029ce <HAL_DMA_IRQHandler+0x156>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d025      	beq.n	80029ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 020e 	bic.w	r2, r2, #14
 8002990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f003 021c 	and.w	r2, r3, #28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
}
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f003 021c 	and.w	r2, r3, #28
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d108      	bne.n	8002a1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a18:	e007      	b.n	8002a2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	e148      	b.n	8002cda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 813a 	beq.w	8002cd4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d00b      	beq.n	8002a80 <HAL_GPIO_Init+0x48>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d007      	beq.n	8002a80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a74:	2b11      	cmp	r3, #17
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b12      	cmp	r3, #18
 8002a7e:	d130      	bne.n	8002ae2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0201 	and.w	r2, r3, #1
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0xea>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b12      	cmp	r3, #18
 8002b20:	d123      	bne.n	8002b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	6939      	ldr	r1, [r7, #16]
 8002b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8094 	beq.w	8002cd4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <HAL_GPIO_Init+0x2c0>)
 8002bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb0:	4a51      	ldr	r2, [pc, #324]	; (8002cf8 <HAL_GPIO_Init+0x2c0>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_GPIO_Init+0x2c0>)
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	; (8002cfc <HAL_GPIO_Init+0x2c4>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bee:	d00d      	beq.n	8002c0c <HAL_GPIO_Init+0x1d4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_GPIO_Init+0x2c8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_Init+0x1d0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a42      	ldr	r2, [pc, #264]	; (8002d04 <HAL_GPIO_Init+0x2cc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_GPIO_Init+0x1cc>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e004      	b.n	8002c0e <HAL_GPIO_Init+0x1d6>
 8002c04:	2307      	movs	r3, #7
 8002c06:	e002      	b.n	8002c0e <HAL_GPIO_Init+0x1d6>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_GPIO_Init+0x1d6>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4093      	lsls	r3, r2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c1e:	4937      	ldr	r1, [pc, #220]	; (8002cfc <HAL_GPIO_Init+0x2c4>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c50:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c7a:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca4:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_GPIO_Init+0x2d0>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aeaf 	bne.w	8002a48 <HAL_GPIO_Init+0x10>
  }
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	48000400 	.word	0x48000400
 8002d04:	48000800 	.word	0x48000800
 8002d08:	40010400 	.word	0x40010400

08002d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e001      	b.n	8002d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fece 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000

08002dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de6:	d130      	bne.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d038      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2232      	movs	r2, #50	; 0x32
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1c:	e002      	b.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e30:	d102      	bne.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f2      	bne.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d110      	bne.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00f      	b.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d007      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e60:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f000 bc11 	b.w	80036ba <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e98:	4ba0      	ldr	r3, [pc, #640]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea2:	4b9e      	ldr	r3, [pc, #632]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80e4 	beq.w	8003082 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4c>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	f040 808b 	bne.w	8002fde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	f040 8087 	bne.w	8002fde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ed0:	4b92      	ldr	r3, [pc, #584]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x64>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e3e8      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	4b8b      	ldr	r3, [pc, #556]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_RCC_OscConfig+0x7e>
 8002ef8:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f00:	e005      	b.n	8002f0e <HAL_RCC_OscConfig+0x8a>
 8002f02:	4b86      	ldr	r3, [pc, #536]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d223      	bcs.n	8002f5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd78 	bl	8003a0c <RCC_SetFlashLatencyFromMSIRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e3c9      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f26:	4b7d      	ldr	r3, [pc, #500]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b7a      	ldr	r3, [pc, #488]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4977      	ldr	r1, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b75      	ldr	r3, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4972      	ldr	r1, [pc, #456]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e025      	b.n	8002fa6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f5a:	4b70      	ldr	r3, [pc, #448]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6f      	ldr	r2, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6d      	ldr	r3, [pc, #436]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	496a      	ldr	r1, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	4965      	ldr	r1, [pc, #404]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd38 	bl	8003a0c <RCC_SetFlashLatencyFromMSIRange>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e389      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa6:	f000 fc6f 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8002faa:	4601      	mov	r1, r0
 8002fac:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x29c>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8002fc2:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_RCC_OscConfig+0x2a0>)
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fc6:	4b58      	ldr	r3, [pc, #352]	; (8003128 <HAL_RCC_OscConfig+0x2a4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fffe 	bl	8000fcc <HAL_InitTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d052      	beq.n	8003080 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	e36d      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d032      	beq.n	800304c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a4c      	ldr	r2, [pc, #304]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f83b 	bl	800106c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f837 	bl	800106c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e356      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300c:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_RCC_OscConfig+0x298>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003018:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_RCC_OscConfig+0x298>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3f      	ldr	r2, [pc, #252]	; (800311c <HAL_RCC_OscConfig+0x298>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	493a      	ldr	r1, [pc, #232]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	4935      	ldr	r1, [pc, #212]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
 800304a:	e01a      	b.n	8003082 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800304c:	4b33      	ldr	r3, [pc, #204]	; (800311c <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a32      	ldr	r2, [pc, #200]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003058:	f7fe f808 	bl	800106c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003060:	f7fe f804 	bl	800106c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e323      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1dc>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d073      	beq.n	8003176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x21c>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d10e      	bne.n	80030b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d10b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d063      	beq.n	8003174 <HAL_RCC_OscConfig+0x2f0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d15f      	bne.n	8003174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e300      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x24c>
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0x288>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x270>
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0x288>
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_RCC_OscConfig+0x298>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a05      	ldr	r2, [pc, #20]	; (800311c <HAL_RCC_OscConfig+0x298>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fd ffaa 	bl	800106c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311a:	e010      	b.n	800313e <HAL_RCC_OscConfig+0x2ba>
 800311c:	40021000 	.word	0x40021000
 8003120:	080052b4 	.word	0x080052b4
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd ff9e 	bl	800106c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e2bd      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4baf      	ldr	r3, [pc, #700]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x2a8>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd ff8e 	bl	800106c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fd ff8a 	bl	800106c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e2a9      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	4ba5      	ldr	r3, [pc, #660]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d0>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d060      	beq.n	8003244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d005      	beq.n	8003194 <HAL_RCC_OscConfig+0x310>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d119      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d116      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	4b99      	ldr	r3, [pc, #612]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x328>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e286      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b93      	ldr	r3, [pc, #588]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4990      	ldr	r1, [pc, #576]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	e040      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d023      	beq.n	8003212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ca:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a8b      	ldr	r2, [pc, #556]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fd ff49 	bl	800106c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7fd ff45 	bl	800106c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e264      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b7f      	ldr	r3, [pc, #508]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	497c      	ldr	r1, [pc, #496]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
 8003210:	e018      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b7a      	ldr	r3, [pc, #488]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a79      	ldr	r2, [pc, #484]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd ff25 	bl	800106c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fd ff21 	bl	800106c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e240      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003238:	4b70      	ldr	r3, [pc, #448]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4b68      	ldr	r3, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325e:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd ff00 	bl	800106c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fd fefc 	bl	800106c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e21b      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003282:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x3ec>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fee3 	bl	800106c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fedf 	bl	800106c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1fe      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032bc:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a6 	beq.w	8003424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032dc:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	4a43      	ldr	r2, [pc, #268]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	; 0x58
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003304:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCC_OscConfig+0x57c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d118      	bne.n	8003342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x57c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <HAL_RCC_OscConfig+0x57c>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331c:	f7fd fea6 	bl	800106c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fd fea2 	bl	800106c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1c1      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003336:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_RCC_OscConfig+0x57c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <HAL_RCC_OscConfig+0x4d8>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800335a:	e024      	b.n	80033a6 <HAL_RCC_OscConfig+0x522>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d110      	bne.n	8003386 <HAL_RCC_OscConfig+0x502>
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003384:	e00f      	b.n	80033a6 <HAL_RCC_OscConfig+0x522>
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	4a17      	ldr	r2, [pc, #92]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7fd fe5d 	bl	800106c <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fd fe59 	bl	800106c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e176      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x578>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ed      	beq.n	80033b6 <HAL_RCC_OscConfig+0x532>
 80033da:	e01a      	b.n	8003412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fd fe46 	bl	800106c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fd fe42 	bl	800106c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d906      	bls.n	8003404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e15f      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	4baa      	ldr	r3, [pc, #680]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e8      	bne.n	80033e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4ba5      	ldr	r3, [pc, #660]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	4aa4      	ldr	r2, [pc, #656]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03c      	beq.n	80034aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01c      	beq.n	8003472 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003438:	4b9d      	ldr	r3, [pc, #628]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800343a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800343e:	4a9c      	ldr	r2, [pc, #624]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fe10 	bl	800106c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003450:	f7fd fe0c 	bl	800106c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e12b      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003462:	4b93      	ldr	r3, [pc, #588]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ef      	beq.n	8003450 <HAL_RCC_OscConfig+0x5cc>
 8003470:	e01b      	b.n	80034aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003472:	4b8f      	ldr	r3, [pc, #572]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003478:	4a8d      	ldr	r2, [pc, #564]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd fdf3 	bl	800106c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800348a:	f7fd fdef 	bl	800106c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e10e      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800349c:	4b84      	ldr	r3, [pc, #528]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800349e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ef      	bne.n	800348a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8102 	beq.w	80036b8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	f040 80c5 	bne.w	8003648 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d12c      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	3b01      	subs	r3, #1
 80034de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d123      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d11b      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d113      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d109      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d067      	beq.n	80035fc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d062      	beq.n	80035f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003532:	4b5f      	ldr	r3, [pc, #380]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0bb      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5a      	ldr	r2, [pc, #360]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800354e:	f7fd fd8d 	bl	800106c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7fd fd89 	bl	800106c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0a8      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	4b51      	ldr	r3, [pc, #324]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003574:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <HAL_RCC_OscConfig+0x830>)
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003584:	3a01      	subs	r2, #1
 8003586:	0112      	lsls	r2, r2, #4
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800358e:	0212      	lsls	r2, r2, #8
 8003590:	4311      	orrs	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003596:	0852      	lsrs	r2, r2, #1
 8003598:	3a01      	subs	r2, #1
 800359a:	0552      	lsls	r2, r2, #21
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035a2:	0852      	lsrs	r2, r2, #1
 80035a4:	3a01      	subs	r2, #1
 80035a6:	0652      	lsls	r2, r2, #25
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ae:	06d2      	lsls	r2, r2, #27
 80035b0:	430a      	orrs	r2, r1
 80035b2:	493f      	ldr	r1, [pc, #252]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035d0:	f7fd fd4c 	bl	800106c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fd48 	bl	800106c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e067      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f6:	e05f      	b.n	80036b8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e05e      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fc:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d157      	bne.n	80036b8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003608:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003612:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003620:	f7fd fd24 	bl	800106c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fd fd20 	bl	800106c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e03f      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x7a4>
 8003646:	e037      	b.n	80036b8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d02d      	beq.n	80036aa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003658:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800366c:	f023 0303 	bic.w	r3, r3, #3
 8003670:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003678:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fcf3 	bl	800106c <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7fd fcef 	bl	800106c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e00e      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x806>
 80036a8:	e006      	b.n	80036b8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e005      	b.n	80036ba <HAL_RCC_OscConfig+0x836>
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop

080036c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0c8      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b66      	ldr	r3, [pc, #408]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d910      	bls.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4961      	ldr	r1, [pc, #388]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0b0      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d04c      	beq.n	80037ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d121      	bne.n	800376c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e09e      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d115      	bne.n	800376c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e092      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800374c:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e086      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e07e      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800376c:	4b42      	ldr	r3, [pc, #264]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 0203 	bic.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	493f      	ldr	r1, [pc, #252]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377e:	f7fd fc75 	bl	800106c <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003784:	e00a      	b.n	800379c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fd fc71 	bl	800106c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e066      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379c:	4b36      	ldr	r3, [pc, #216]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 020c 	and.w	r2, r3, #12
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1eb      	bne.n	8003786 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	492c      	ldr	r1, [pc, #176]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d210      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 0207 	bic.w	r2, r3, #7
 80037e2:	4924      	ldr	r1, [pc, #144]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_RCC_ClockConfig+0x1b0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e036      	b.n	800386a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4918      	ldr	r1, [pc, #96]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4910      	ldr	r1, [pc, #64]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800383a:	f000 f825 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 800383e:	4601      	mov	r1, r0
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_RCC_ClockConfig+0x1b4>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	5cd3      	ldrb	r3, [r2, r3]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	fa21 f303 	lsr.w	r3, r1, r3
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fbb4 	bl	8000fcc <HAL_InitTick>
 8003864:	4603      	mov	r3, r0
 8003866:	72fb      	strb	r3, [r7, #11]

  return status;
 8003868:	7afb      	ldrb	r3, [r7, #11]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40022000 	.word	0x40022000
 8003878:	40021000 	.word	0x40021000
 800387c:	080052b4 	.word	0x080052b4
 8003880:	20000000 	.word	0x20000000
 8003884:	20000004 	.word	0x20000004

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x34>
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d121      	bne.n	80038fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d11e      	bne.n	80038fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038bc:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038c8:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 80038ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	e005      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10d      	bne.n	8003910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d102      	bne.n	8003906 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	e004      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d101      	bne.n	8003910 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCC_GetSysClockFreq+0x110>)
 800390e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d133      	bne.n	800397e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0xa4>
 8003926:	2b03      	cmp	r3, #3
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0xaa>
 800392a:	e005      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_RCC_GetSysClockFreq+0x10c>)
 800392e:	617b      	str	r3, [r7, #20]
      break;
 8003930:	e005      	b.n	800393e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_RCC_GetSysClockFreq+0x110>)
 8003934:	617b      	str	r3, [r7, #20]
      break;
 8003936:	e002      	b.n	800393e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	617b      	str	r3, [r7, #20]
      break;
 800393c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	3301      	adds	r3, #1
 800394a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	fb02 f203 	mul.w	r2, r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_GetSysClockFreq+0x104>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0e5b      	lsrs	r3, r3, #25
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800397e:	69bb      	ldr	r3, [r7, #24]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3724      	adds	r7, #36	; 0x24
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40021000 	.word	0x40021000
 8003990:	080052cc 	.word	0x080052cc
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000000 	.word	0x20000000

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4601      	mov	r1, r0
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	080052c4 	.word	0x080052c4

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039e4:	f7ff ffda 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e8:	4601      	mov	r1, r0
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0adb      	lsrs	r3, r3, #11
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	080052c4 	.word	0x080052c4

08003a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a18:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a24:	f7ff f9ca 	bl	8002dbc <HAL_PWREx_GetVoltageRange>
 8003a28:	6178      	str	r0, [r7, #20]
 8003a2a:	e014      	b.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	; 0x58
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a44:	f7ff f9ba 	bl	8002dbc <HAL_PWREx_GetVoltageRange>
 8003a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5c:	d10b      	bne.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	d919      	bls.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2ba0      	cmp	r3, #160	; 0xa0
 8003a68:	d902      	bls.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e013      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a70:	2301      	movs	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e010      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d902      	bls.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e00a      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d102      	bne.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a88:	2302      	movs	r3, #2
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e004      	b.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b70      	cmp	r3, #112	; 0x70
 8003a92:	d101      	bne.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a94:	2301      	movs	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 0207 	bic.w	r2, r3, #7
 8003aa0:	4909      	ldr	r1, [pc, #36]	; (8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40022000 	.word	0x40022000

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02f      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af0:	d005      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003af2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003af6:	d015      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003afc:	e00f      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003afe:	4bac      	ldr	r3, [pc, #688]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4aab      	ldr	r2, [pc, #684]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0a:	e00c      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f9dc 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	74fb      	strb	r3, [r7, #19]
      break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b2c:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	499d      	ldr	r1, [pc, #628]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8099 	beq.w	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b5a:	4b95      	ldr	r3, [pc, #596]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b70:	4b8f      	ldr	r3, [pc, #572]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	4a8e      	ldr	r2, [pc, #568]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b7c:	4b8c      	ldr	r3, [pc, #560]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b8c:	4b89      	ldr	r3, [pc, #548]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a88      	ldr	r2, [pc, #544]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b98:	f7fd fa68 	bl	800106c <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba0:	f7fd fa64 	bl	800106c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bb4:	4b7f      	ldr	r3, [pc, #508]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d155      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bc6:	4b7a      	ldr	r3, [pc, #488]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01e      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d019      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bee:	4b70      	ldr	r3, [pc, #448]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	4a6a      	ldr	r2, [pc, #424]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c0e:	4a68      	ldr	r2, [pc, #416]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d016      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fa24 	bl	800106c <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	e00b      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd fa20 	bl	800106c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d902      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	74fb      	strb	r3, [r7, #19]
            break;
 8003c3e:	e006      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c40:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ec      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c54:	4b56      	ldr	r3, [pc, #344]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	4953      	ldr	r1, [pc, #332]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c6a:	e004      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
 8003c70:	e001      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7c7b      	ldrb	r3, [r7, #17]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4943      	ldr	r1, [pc, #268]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb6:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f023 020c 	bic.w	r2, r3, #12
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	493a      	ldr	r1, [pc, #232]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	4932      	ldr	r1, [pc, #200]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	4929      	ldr	r1, [pc, #164]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	4921      	ldr	r1, [pc, #132]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	4918      	ldr	r1, [pc, #96]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d60:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4910      	ldr	r1, [pc, #64]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02c      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	4907      	ldr	r1, [pc, #28]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da0:	d10a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da2:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4a02      	ldr	r2, [pc, #8]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dac:	60d3      	str	r3, [r2, #12]
 8003dae:	e015      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f881 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dd2:	7cfb      	ldrb	r3, [r7, #19]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d028      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003de8:	4b30      	ldr	r3, [pc, #192]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	492d      	ldr	r1, [pc, #180]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e06:	d106      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e12:	60d3      	str	r3, [r2, #12]
 8003e14:	e011      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e1e:	d10c      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f852 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01c      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	4915      	ldr	r1, [pc, #84]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f82f 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	4904      	ldr	r1, [pc, #16]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ea2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ede:	4b73      	ldr	r3, [pc, #460]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d018      	beq.n	8003f1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eea:	4b70      	ldr	r3, [pc, #448]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0203 	and.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10d      	bne.n	8003f16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
       ||
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f02:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
       ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d044      	beq.n	8003fa0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e041      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d00c      	beq.n	8003f3e <RCCEx_PLLSAI1_Config+0x6e>
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d013      	beq.n	8003f50 <RCCEx_PLLSAI1_Config+0x80>
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d120      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f2c:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e01a      	b.n	8003f74 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d116      	bne.n	8003f78 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4e:	e013      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f50:	4b56      	ldr	r3, [pc, #344]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10f      	bne.n	8003f7c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f5c:	4b53      	ldr	r3, [pc, #332]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f6c:	e006      	b.n	8003f7c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      break;
 8003f72:	e004      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f84:	4b49      	ldr	r3, [pc, #292]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	4944      	ldr	r1, [pc, #272]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d17c      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a40      	ldr	r2, [pc, #256]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb2:	f7fd f85b 	bl	800106c <HAL_GetTick>
 8003fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb8:	e009      	b.n	8003fce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fba:	f7fd f857 	bl	800106c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	73fb      	strb	r3, [r7, #15]
        break;
 8003fcc:	e005      	b.n	8003fda <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ef      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d15f      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d110      	bne.n	8004008 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003fee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6892      	ldr	r2, [r2, #8]
 8003ff6:	0211      	lsls	r1, r2, #8
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68d2      	ldr	r2, [r2, #12]
 8003ffc:	06d2      	lsls	r2, r2, #27
 8003ffe:	430a      	orrs	r2, r1
 8004000:	492a      	ldr	r1, [pc, #168]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	610b      	str	r3, [r1, #16]
 8004006:	e027      	b.n	8004058 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d112      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800400e:	4b27      	ldr	r3, [pc, #156]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004016:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6892      	ldr	r2, [r2, #8]
 800401e:	0211      	lsls	r1, r2, #8
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6912      	ldr	r2, [r2, #16]
 8004024:	0852      	lsrs	r2, r2, #1
 8004026:	3a01      	subs	r2, #1
 8004028:	0552      	lsls	r2, r2, #21
 800402a:	430a      	orrs	r2, r1
 800402c:	491f      	ldr	r1, [pc, #124]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]
 8004032:	e011      	b.n	8004058 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800403c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	0211      	lsls	r1, r2, #8
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6952      	ldr	r2, [r2, #20]
 800404a:	0852      	lsrs	r2, r2, #1
 800404c:	3a01      	subs	r2, #1
 800404e:	0652      	lsls	r2, r2, #25
 8004050:	430a      	orrs	r2, r1
 8004052:	4916      	ldr	r1, [pc, #88]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800405e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd f802 	bl	800106c <HAL_GetTick>
 8004068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800406a:	e009      	b.n	8004080 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800406c:	f7fc fffe 	bl	800106c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d902      	bls.n	8004080 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	73fb      	strb	r3, [r7, #15]
          break;
 800407e:	e005      	b.n	800408c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ef      	beq.n	800406c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	4904      	ldr	r1, [pc, #16]	; (80040ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e040      	b.n	8004144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fc fee4 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8c0 	bl	8004274 <UART_SetConfig>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e022      	b.n	8004144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fac4 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800411a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800412a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fb4b 	bl	80047d8 <UART_CheckIdleState>
 8004142:	4603      	mov	r3, r0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004160:	2b20      	cmp	r3, #32
 8004162:	f040 8081 	bne.w	8004268 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_UART_Transmit+0x26>
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e079      	b.n	800426a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_UART_Transmit+0x38>
 8004180:	2302      	movs	r3, #2
 8004182:	e072      	b.n	800426a <HAL_UART_Transmit+0x11e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2221      	movs	r2, #33	; 0x21
 8004196:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004198:	f7fc ff68 	bl	800106c <HAL_GetTick>
 800419c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d108      	bne.n	80041ca <HAL_UART_Transmit+0x7e>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e003      	b.n	80041d2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80041da:	e02d      	b.n	8004238 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb3b 	bl	8004862 <UART_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e039      	b.n	800426a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004208:	b292      	uxth	r2, r2
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3302      	adds	r3, #2
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e008      	b.n	8004226 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b292      	uxth	r2, r2
 800421e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1cb      	bne.n	80041dc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	2140      	movs	r1, #64	; 0x40
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fb07 	bl	8004862 <UART_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e005      	b.n	800426a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004278:	b088      	sub	sp, #32
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4313      	orrs	r3, r2
 8004298:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4bb0      	ldr	r3, [pc, #704]	; (8004564 <UART_SetConfig+0x2f0>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	69f9      	ldr	r1, [r7, #28]
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4aa6      	ldr	r2, [pc, #664]	; (8004568 <UART_SetConfig+0x2f4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a9d      	ldr	r2, [pc, #628]	; (800456c <UART_SetConfig+0x2f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d121      	bne.n	8004340 <UART_SetConfig+0xcc>
 80042fc:	4b9c      	ldr	r3, [pc, #624]	; (8004570 <UART_SetConfig+0x2fc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b03      	cmp	r3, #3
 8004308:	d816      	bhi.n	8004338 <UART_SetConfig+0xc4>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0x9c>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004321 	.word	0x08004321
 8004314:	0800432d 	.word	0x0800432d
 8004318:	08004327 	.word	0x08004327
 800431c:	08004333 	.word	0x08004333
 8004320:	2301      	movs	r3, #1
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e072      	b.n	800440c <UART_SetConfig+0x198>
 8004326:	2302      	movs	r3, #2
 8004328:	76fb      	strb	r3, [r7, #27]
 800432a:	e06f      	b.n	800440c <UART_SetConfig+0x198>
 800432c:	2304      	movs	r3, #4
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e06c      	b.n	800440c <UART_SetConfig+0x198>
 8004332:	2308      	movs	r3, #8
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e069      	b.n	800440c <UART_SetConfig+0x198>
 8004338:	2310      	movs	r3, #16
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	bf00      	nop
 800433e:	e065      	b.n	800440c <UART_SetConfig+0x198>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a8b      	ldr	r2, [pc, #556]	; (8004574 <UART_SetConfig+0x300>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d134      	bne.n	80043b4 <UART_SetConfig+0x140>
 800434a:	4b89      	ldr	r3, [pc, #548]	; (8004570 <UART_SetConfig+0x2fc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d829      	bhi.n	80043ac <UART_SetConfig+0x138>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0xec>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043ad 	.word	0x080043ad
 8004368:	080043ad 	.word	0x080043ad
 800436c:	080043ad 	.word	0x080043ad
 8004370:	080043a1 	.word	0x080043a1
 8004374:	080043ad 	.word	0x080043ad
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043ad 	.word	0x080043ad
 8004380:	0800439b 	.word	0x0800439b
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043ad 	.word	0x080043ad
 8004390:	080043a7 	.word	0x080043a7
 8004394:	2300      	movs	r3, #0
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	e038      	b.n	800440c <UART_SetConfig+0x198>
 800439a:	2302      	movs	r3, #2
 800439c:	76fb      	strb	r3, [r7, #27]
 800439e:	e035      	b.n	800440c <UART_SetConfig+0x198>
 80043a0:	2304      	movs	r3, #4
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e032      	b.n	800440c <UART_SetConfig+0x198>
 80043a6:	2308      	movs	r3, #8
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e02f      	b.n	800440c <UART_SetConfig+0x198>
 80043ac:	2310      	movs	r3, #16
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	bf00      	nop
 80043b2:	e02b      	b.n	800440c <UART_SetConfig+0x198>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6b      	ldr	r2, [pc, #428]	; (8004568 <UART_SetConfig+0x2f4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d124      	bne.n	8004408 <UART_SetConfig+0x194>
 80043be:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <UART_SetConfig+0x2fc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043cc:	d012      	beq.n	80043f4 <UART_SetConfig+0x180>
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d802      	bhi.n	80043da <UART_SetConfig+0x166>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <UART_SetConfig+0x174>
 80043d8:	e012      	b.n	8004400 <UART_SetConfig+0x18c>
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043de:	d006      	beq.n	80043ee <UART_SetConfig+0x17a>
 80043e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043e4:	d009      	beq.n	80043fa <UART_SetConfig+0x186>
 80043e6:	e00b      	b.n	8004400 <UART_SetConfig+0x18c>
 80043e8:	2300      	movs	r3, #0
 80043ea:	76fb      	strb	r3, [r7, #27]
 80043ec:	e00e      	b.n	800440c <UART_SetConfig+0x198>
 80043ee:	2302      	movs	r3, #2
 80043f0:	76fb      	strb	r3, [r7, #27]
 80043f2:	e00b      	b.n	800440c <UART_SetConfig+0x198>
 80043f4:	2304      	movs	r3, #4
 80043f6:	76fb      	strb	r3, [r7, #27]
 80043f8:	e008      	b.n	800440c <UART_SetConfig+0x198>
 80043fa:	2308      	movs	r3, #8
 80043fc:	76fb      	strb	r3, [r7, #27]
 80043fe:	e005      	b.n	800440c <UART_SetConfig+0x198>
 8004400:	2310      	movs	r3, #16
 8004402:	76fb      	strb	r3, [r7, #27]
 8004404:	bf00      	nop
 8004406:	e001      	b.n	800440c <UART_SetConfig+0x198>
 8004408:	2310      	movs	r3, #16
 800440a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a55      	ldr	r2, [pc, #340]	; (8004568 <UART_SetConfig+0x2f4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d174      	bne.n	8004500 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004416:	7efb      	ldrb	r3, [r7, #27]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d824      	bhi.n	8004466 <UART_SetConfig+0x1f2>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x1b0>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004449 	.word	0x08004449
 8004428:	08004467 	.word	0x08004467
 800442c:	08004451 	.word	0x08004451
 8004430:	08004467 	.word	0x08004467
 8004434:	08004457 	.word	0x08004457
 8004438:	08004467 	.word	0x08004467
 800443c:	08004467 	.word	0x08004467
 8004440:	08004467 	.word	0x08004467
 8004444:	0800445f 	.word	0x0800445f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7ff fab4 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 800444c:	6178      	str	r0, [r7, #20]
        break;
 800444e:	e00f      	b.n	8004470 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004450:	4b49      	ldr	r3, [pc, #292]	; (8004578 <UART_SetConfig+0x304>)
 8004452:	617b      	str	r3, [r7, #20]
        break;
 8004454:	e00c      	b.n	8004470 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004456:	f7ff fa17 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 800445a:	6178      	str	r0, [r7, #20]
        break;
 800445c:	e008      	b.n	8004470 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004462:	617b      	str	r3, [r7, #20]
        break;
 8004464:	e004      	b.n	8004470 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	76bb      	strb	r3, [r7, #26]
        break;
 800446e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8100 	beq.w	8004678 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	429a      	cmp	r2, r3
 8004486:	d305      	bcc.n	8004494 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	76bb      	strb	r3, [r7, #26]
 8004498:	e0ee      	b.n	8004678 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4619      	mov	r1, r3
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	f04f 0400 	mov.w	r4, #0
 80044aa:	0214      	lsls	r4, r2, #8
 80044ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044b0:	020b      	lsls	r3, r1, #8
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6852      	ldr	r2, [r2, #4]
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	4611      	mov	r1, r2
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	eb13 0b01 	adds.w	fp, r3, r1
 80044c2:	eb44 0c02 	adc.w	ip, r4, r2
 80044c6:	4658      	mov	r0, fp
 80044c8:	4661      	mov	r1, ip
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	461a      	mov	r2, r3
 80044d4:	4623      	mov	r3, r4
 80044d6:	f7fb fe79 	bl	80001cc <__aeabi_uldivmod>
 80044da:	4603      	mov	r3, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d308      	bcc.n	80044fa <UART_SetConfig+0x286>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ee:	d204      	bcs.n	80044fa <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	e0be      	b.n	8004678 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	76bb      	strb	r3, [r7, #26]
 80044fe:	e0bb      	b.n	8004678 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	d169      	bne.n	80045de <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 800450a:	7efb      	ldrb	r3, [r7, #27]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d835      	bhi.n	800457c <UART_SetConfig+0x308>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x2a4>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	0800457d 	.word	0x0800457d
 8004528:	08004553 	.word	0x08004553
 800452c:	0800457d 	.word	0x0800457d
 8004530:	0800457d 	.word	0x0800457d
 8004534:	0800457d 	.word	0x0800457d
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7ff fa3a 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8004540:	6178      	str	r0, [r7, #20]
        break;
 8004542:	e020      	b.n	8004586 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7ff fa4c 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8004548:	6178      	str	r0, [r7, #20]
        break;
 800454a:	e01c      	b.n	8004586 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <UART_SetConfig+0x304>)
 800454e:	617b      	str	r3, [r7, #20]
        break;
 8004550:	e019      	b.n	8004586 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7ff f999 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8004556:	6178      	str	r0, [r7, #20]
        break;
 8004558:	e015      	b.n	8004586 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	617b      	str	r3, [r7, #20]
        break;
 8004560:	e011      	b.n	8004586 <UART_SetConfig+0x312>
 8004562:	bf00      	nop
 8004564:	efff69f3 	.word	0xefff69f3
 8004568:	40008000 	.word	0x40008000
 800456c:	40013800 	.word	0x40013800
 8004570:	40021000 	.word	0x40021000
 8004574:	40004400 	.word	0x40004400
 8004578:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	76bb      	strb	r3, [r7, #26]
        break;
 8004584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d075      	beq.n	8004678 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	005a      	lsls	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b0f      	cmp	r3, #15
 80045a8:	d916      	bls.n	80045d8 <UART_SetConfig+0x364>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d212      	bcs.n	80045d8 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f023 030f 	bic.w	r3, r3, #15
 80045ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	89fa      	ldrh	r2, [r7, #14]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	e04f      	b.n	8004678 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	76bb      	strb	r3, [r7, #26]
 80045dc:	e04c      	b.n	8004678 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045de:	7efb      	ldrb	r3, [r7, #27]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d828      	bhi.n	8004636 <UART_SetConfig+0x3c2>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0x378>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004621 	.word	0x08004621
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004627 	.word	0x08004627
 8004600:	08004637 	.word	0x08004637
 8004604:	08004637 	.word	0x08004637
 8004608:	08004637 	.word	0x08004637
 800460c:	0800462f 	.word	0x0800462f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7ff f9d0 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8004614:	6178      	str	r0, [r7, #20]
        break;
 8004616:	e013      	b.n	8004640 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004618:	f7ff f9e2 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 800461c:	6178      	str	r0, [r7, #20]
        break;
 800461e:	e00f      	b.n	8004640 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <UART_SetConfig+0x41c>)
 8004622:	617b      	str	r3, [r7, #20]
        break;
 8004624:	e00c      	b.n	8004640 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7ff f92f 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 800462a:	6178      	str	r0, [r7, #20]
        break;
 800462c:	e008      	b.n	8004640 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004632:	617b      	str	r3, [r7, #20]
        break;
 8004634:	e004      	b.n	8004640 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	76bb      	strb	r3, [r7, #26]
        break;
 800463e:	bf00      	nop
    }

    if (pclk != 0U)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	085a      	lsrs	r2, r3, #1
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	441a      	add	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0f      	cmp	r3, #15
 8004660:	d908      	bls.n	8004674 <UART_SetConfig+0x400>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d204      	bcs.n	8004674 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	e001      	b.n	8004678 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004684:	7ebb      	ldrb	r3, [r7, #26]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004690:	00f42400 	.word	0x00f42400

08004694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d10a      	bne.n	80047aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047e6:	f7fc fc41 	bl	800106c <HAL_GetTick>
 80047ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d10e      	bne.n	8004818 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f82a 	bl	8004862 <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e020      	b.n	800485a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d10e      	bne.n	8004844 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004826:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f814 	bl	8004862 <UART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00a      	b.n	800485a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	e05d      	b.n	8004930 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800487a:	d059      	beq.n	8004930 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7fc fbf6 	bl	800106c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <UART_WaitOnFlagUntilTimeout+0x30>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11b      	bne.n	80048ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e042      	b.n	8004950 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02b      	beq.n	8004930 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e6:	d123      	bne.n	8004930 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004900:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e00f      	b.n	8004950 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	429a      	cmp	r2, r3
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	429a      	cmp	r2, r3
 800494c:	d092      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <__errno>:
 8004958:	4b01      	ldr	r3, [pc, #4]	; (8004960 <__errno+0x8>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	2000000c 	.word	0x2000000c

08004964 <__libc_init_array>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	4e0d      	ldr	r6, [pc, #52]	; (800499c <__libc_init_array+0x38>)
 8004968:	4c0d      	ldr	r4, [pc, #52]	; (80049a0 <__libc_init_array+0x3c>)
 800496a:	1ba4      	subs	r4, r4, r6
 800496c:	10a4      	asrs	r4, r4, #2
 800496e:	2500      	movs	r5, #0
 8004970:	42a5      	cmp	r5, r4
 8004972:	d109      	bne.n	8004988 <__libc_init_array+0x24>
 8004974:	4e0b      	ldr	r6, [pc, #44]	; (80049a4 <__libc_init_array+0x40>)
 8004976:	4c0c      	ldr	r4, [pc, #48]	; (80049a8 <__libc_init_array+0x44>)
 8004978:	f000 fc88 	bl	800528c <_init>
 800497c:	1ba4      	subs	r4, r4, r6
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	2500      	movs	r5, #0
 8004982:	42a5      	cmp	r5, r4
 8004984:	d105      	bne.n	8004992 <__libc_init_array+0x2e>
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498c:	4798      	blx	r3
 800498e:	3501      	adds	r5, #1
 8004990:	e7ee      	b.n	8004970 <__libc_init_array+0xc>
 8004992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004996:	4798      	blx	r3
 8004998:	3501      	adds	r5, #1
 800499a:	e7f2      	b.n	8004982 <__libc_init_array+0x1e>
 800499c:	08005368 	.word	0x08005368
 80049a0:	08005368 	.word	0x08005368
 80049a4:	08005368 	.word	0x08005368
 80049a8:	0800536c 	.word	0x0800536c

080049ac <memset>:
 80049ac:	4402      	add	r2, r0
 80049ae:	4603      	mov	r3, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <_puts_r>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	460e      	mov	r6, r1
 80049c0:	4605      	mov	r5, r0
 80049c2:	b118      	cbz	r0, 80049cc <_puts_r+0x10>
 80049c4:	6983      	ldr	r3, [r0, #24]
 80049c6:	b90b      	cbnz	r3, 80049cc <_puts_r+0x10>
 80049c8:	f000 fa0c 	bl	8004de4 <__sinit>
 80049cc:	69ab      	ldr	r3, [r5, #24]
 80049ce:	68ac      	ldr	r4, [r5, #8]
 80049d0:	b913      	cbnz	r3, 80049d8 <_puts_r+0x1c>
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 fa06 	bl	8004de4 <__sinit>
 80049d8:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <_puts_r+0xac>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	d117      	bne.n	8004a0e <_puts_r+0x52>
 80049de:	686c      	ldr	r4, [r5, #4]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	071b      	lsls	r3, r3, #28
 80049e4:	d51d      	bpl.n	8004a22 <_puts_r+0x66>
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	b1db      	cbz	r3, 8004a22 <_puts_r+0x66>
 80049ea:	3e01      	subs	r6, #1
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60a3      	str	r3, [r4, #8]
 80049f6:	b9e9      	cbnz	r1, 8004a34 <_puts_r+0x78>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da2e      	bge.n	8004a5a <_puts_r+0x9e>
 80049fc:	4622      	mov	r2, r4
 80049fe:	210a      	movs	r1, #10
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 f83f 	bl	8004a84 <__swbuf_r>
 8004a06:	3001      	adds	r0, #1
 8004a08:	d011      	beq.n	8004a2e <_puts_r+0x72>
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	e011      	b.n	8004a32 <_puts_r+0x76>
 8004a0e:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <_puts_r+0xb0>)
 8004a10:	429c      	cmp	r4, r3
 8004a12:	d101      	bne.n	8004a18 <_puts_r+0x5c>
 8004a14:	68ac      	ldr	r4, [r5, #8]
 8004a16:	e7e3      	b.n	80049e0 <_puts_r+0x24>
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <_puts_r+0xb4>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	bf08      	it	eq
 8004a1e:	68ec      	ldreq	r4, [r5, #12]
 8004a20:	e7de      	b.n	80049e0 <_puts_r+0x24>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f87f 	bl	8004b28 <__swsetup_r>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0dd      	beq.n	80049ea <_puts_r+0x2e>
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da04      	bge.n	8004a42 <_puts_r+0x86>
 8004a38:	69a2      	ldr	r2, [r4, #24]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	dc06      	bgt.n	8004a4c <_puts_r+0x90>
 8004a3e:	290a      	cmp	r1, #10
 8004a40:	d004      	beq.n	8004a4c <_puts_r+0x90>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	6022      	str	r2, [r4, #0]
 8004a48:	7019      	strb	r1, [r3, #0]
 8004a4a:	e7cf      	b.n	80049ec <_puts_r+0x30>
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f818 	bl	8004a84 <__swbuf_r>
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1c9      	bne.n	80049ec <_puts_r+0x30>
 8004a58:	e7e9      	b.n	8004a2e <_puts_r+0x72>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	200a      	movs	r0, #10
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	7018      	strb	r0, [r3, #0]
 8004a64:	e7e5      	b.n	8004a32 <_puts_r+0x76>
 8004a66:	bf00      	nop
 8004a68:	08005320 	.word	0x08005320
 8004a6c:	08005340 	.word	0x08005340
 8004a70:	08005300 	.word	0x08005300

08004a74 <puts>:
 8004a74:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <puts+0xc>)
 8004a76:	4601      	mov	r1, r0
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	f7ff bf9f 	b.w	80049bc <_puts_r>
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c

08004a84 <__swbuf_r>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	460e      	mov	r6, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	b118      	cbz	r0, 8004a96 <__swbuf_r+0x12>
 8004a8e:	6983      	ldr	r3, [r0, #24]
 8004a90:	b90b      	cbnz	r3, 8004a96 <__swbuf_r+0x12>
 8004a92:	f000 f9a7 	bl	8004de4 <__sinit>
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <__swbuf_r+0x98>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d12a      	bne.n	8004af2 <__swbuf_r+0x6e>
 8004a9c:	686c      	ldr	r4, [r5, #4]
 8004a9e:	69a3      	ldr	r3, [r4, #24]
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	071a      	lsls	r2, r3, #28
 8004aa6:	d52e      	bpl.n	8004b06 <__swbuf_r+0x82>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b363      	cbz	r3, 8004b06 <__swbuf_r+0x82>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	1ac0      	subs	r0, r0, r3
 8004ab2:	6963      	ldr	r3, [r4, #20]
 8004ab4:	b2f6      	uxtb	r6, r6
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	4637      	mov	r7, r6
 8004aba:	dc04      	bgt.n	8004ac6 <__swbuf_r+0x42>
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f926 	bl	8004d10 <_fflush_r>
 8004ac4:	bb28      	cbnz	r0, 8004b12 <__swbuf_r+0x8e>
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60a3      	str	r3, [r4, #8]
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	6022      	str	r2, [r4, #0]
 8004ad2:	701e      	strb	r6, [r3, #0]
 8004ad4:	6963      	ldr	r3, [r4, #20]
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	4283      	cmp	r3, r0
 8004ada:	d004      	beq.n	8004ae6 <__swbuf_r+0x62>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d519      	bpl.n	8004b16 <__swbuf_r+0x92>
 8004ae2:	2e0a      	cmp	r6, #10
 8004ae4:	d117      	bne.n	8004b16 <__swbuf_r+0x92>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 f911 	bl	8004d10 <_fflush_r>
 8004aee:	b190      	cbz	r0, 8004b16 <__swbuf_r+0x92>
 8004af0:	e00f      	b.n	8004b12 <__swbuf_r+0x8e>
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <__swbuf_r+0x9c>)
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d101      	bne.n	8004afc <__swbuf_r+0x78>
 8004af8:	68ac      	ldr	r4, [r5, #8]
 8004afa:	e7d0      	b.n	8004a9e <__swbuf_r+0x1a>
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <__swbuf_r+0xa0>)
 8004afe:	429c      	cmp	r4, r3
 8004b00:	bf08      	it	eq
 8004b02:	68ec      	ldreq	r4, [r5, #12]
 8004b04:	e7cb      	b.n	8004a9e <__swbuf_r+0x1a>
 8004b06:	4621      	mov	r1, r4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 f80d 	bl	8004b28 <__swsetup_r>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d0cc      	beq.n	8004aac <__swbuf_r+0x28>
 8004b12:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b16:	4638      	mov	r0, r7
 8004b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	08005320 	.word	0x08005320
 8004b20:	08005340 	.word	0x08005340
 8004b24:	08005300 	.word	0x08005300

08004b28 <__swsetup_r>:
 8004b28:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <__swsetup_r+0xcc>)
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	681d      	ldr	r5, [r3, #0]
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	b125      	cbz	r5, 8004b3e <__swsetup_r+0x16>
 8004b34:	69ab      	ldr	r3, [r5, #24]
 8004b36:	b913      	cbnz	r3, 8004b3e <__swsetup_r+0x16>
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f953 	bl	8004de4 <__sinit>
 8004b3e:	4b2e      	ldr	r3, [pc, #184]	; (8004bf8 <__swsetup_r+0xd0>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d10f      	bne.n	8004b64 <__swsetup_r+0x3c>
 8004b44:	686c      	ldr	r4, [r5, #4]
 8004b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	0715      	lsls	r5, r2, #28
 8004b4e:	d42c      	bmi.n	8004baa <__swsetup_r+0x82>
 8004b50:	06d0      	lsls	r0, r2, #27
 8004b52:	d411      	bmi.n	8004b78 <__swsetup_r+0x50>
 8004b54:	2209      	movs	r2, #9
 8004b56:	6032      	str	r2, [r6, #0]
 8004b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b62:	e03e      	b.n	8004be2 <__swsetup_r+0xba>
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <__swsetup_r+0xd4>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d101      	bne.n	8004b6e <__swsetup_r+0x46>
 8004b6a:	68ac      	ldr	r4, [r5, #8]
 8004b6c:	e7eb      	b.n	8004b46 <__swsetup_r+0x1e>
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <__swsetup_r+0xd8>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	bf08      	it	eq
 8004b74:	68ec      	ldreq	r4, [r5, #12]
 8004b76:	e7e6      	b.n	8004b46 <__swsetup_r+0x1e>
 8004b78:	0751      	lsls	r1, r2, #29
 8004b7a:	d512      	bpl.n	8004ba2 <__swsetup_r+0x7a>
 8004b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b7e:	b141      	cbz	r1, 8004b92 <__swsetup_r+0x6a>
 8004b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b84:	4299      	cmp	r1, r3
 8004b86:	d002      	beq.n	8004b8e <__swsetup_r+0x66>
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 fa19 	bl	8004fc0 <_free_r>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6363      	str	r3, [r4, #52]	; 0x34
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6063      	str	r3, [r4, #4]
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f043 0308 	orr.w	r3, r3, #8
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	b94b      	cbnz	r3, 8004bc2 <__swsetup_r+0x9a>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb8:	d003      	beq.n	8004bc2 <__swsetup_r+0x9a>
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 f9bf 	bl	8004f40 <__smakebuf_r>
 8004bc2:	89a2      	ldrh	r2, [r4, #12]
 8004bc4:	f012 0301 	ands.w	r3, r2, #1
 8004bc8:	d00c      	beq.n	8004be4 <__swsetup_r+0xbc>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	6963      	ldr	r3, [r4, #20]
 8004bd0:	425b      	negs	r3, r3
 8004bd2:	61a3      	str	r3, [r4, #24]
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	b953      	cbnz	r3, 8004bee <__swsetup_r+0xc6>
 8004bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bdc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004be0:	d1ba      	bne.n	8004b58 <__swsetup_r+0x30>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	0792      	lsls	r2, r2, #30
 8004be6:	bf58      	it	pl
 8004be8:	6963      	ldrpl	r3, [r4, #20]
 8004bea:	60a3      	str	r3, [r4, #8]
 8004bec:	e7f2      	b.n	8004bd4 <__swsetup_r+0xac>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e7f7      	b.n	8004be2 <__swsetup_r+0xba>
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	08005320 	.word	0x08005320
 8004bfc:	08005340 	.word	0x08005340
 8004c00:	08005300 	.word	0x08005300

08004c04 <__sflush_r>:
 8004c04:	898a      	ldrh	r2, [r1, #12]
 8004c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	0710      	lsls	r0, r2, #28
 8004c0e:	460c      	mov	r4, r1
 8004c10:	d458      	bmi.n	8004cc4 <__sflush_r+0xc0>
 8004c12:	684b      	ldr	r3, [r1, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dc05      	bgt.n	8004c24 <__sflush_r+0x20>
 8004c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dc02      	bgt.n	8004c24 <__sflush_r+0x20>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d0f9      	beq.n	8004c1e <__sflush_r+0x1a>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c30:	682f      	ldr	r7, [r5, #0]
 8004c32:	6a21      	ldr	r1, [r4, #32]
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	d032      	beq.n	8004c9e <__sflush_r+0x9a>
 8004c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	075a      	lsls	r2, r3, #29
 8004c3e:	d505      	bpl.n	8004c4c <__sflush_r+0x48>
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	1ac0      	subs	r0, r0, r3
 8004c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c46:	b10b      	cbz	r3, 8004c4c <__sflush_r+0x48>
 8004c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c4a:	1ac0      	subs	r0, r0, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c52:	6a21      	ldr	r1, [r4, #32]
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b0      	blx	r6
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	d106      	bne.n	8004c6c <__sflush_r+0x68>
 8004c5e:	6829      	ldr	r1, [r5, #0]
 8004c60:	291d      	cmp	r1, #29
 8004c62:	d848      	bhi.n	8004cf6 <__sflush_r+0xf2>
 8004c64:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <__sflush_r+0x108>)
 8004c66:	40ca      	lsrs	r2, r1
 8004c68:	07d6      	lsls	r6, r2, #31
 8004c6a:	d544      	bpl.n	8004cf6 <__sflush_r+0xf2>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	6062      	str	r2, [r4, #4]
 8004c70:	04d9      	lsls	r1, r3, #19
 8004c72:	6922      	ldr	r2, [r4, #16]
 8004c74:	6022      	str	r2, [r4, #0]
 8004c76:	d504      	bpl.n	8004c82 <__sflush_r+0x7e>
 8004c78:	1c42      	adds	r2, r0, #1
 8004c7a:	d101      	bne.n	8004c80 <__sflush_r+0x7c>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b903      	cbnz	r3, 8004c82 <__sflush_r+0x7e>
 8004c80:	6560      	str	r0, [r4, #84]	; 0x54
 8004c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c84:	602f      	str	r7, [r5, #0]
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d0c9      	beq.n	8004c1e <__sflush_r+0x1a>
 8004c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	d002      	beq.n	8004c98 <__sflush_r+0x94>
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f994 	bl	8004fc0 <_free_r>
 8004c98:	2000      	movs	r0, #0
 8004c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8004c9c:	e7c0      	b.n	8004c20 <__sflush_r+0x1c>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b0      	blx	r6
 8004ca4:	1c41      	adds	r1, r0, #1
 8004ca6:	d1c8      	bne.n	8004c3a <__sflush_r+0x36>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0c5      	beq.n	8004c3a <__sflush_r+0x36>
 8004cae:	2b1d      	cmp	r3, #29
 8004cb0:	d001      	beq.n	8004cb6 <__sflush_r+0xb2>
 8004cb2:	2b16      	cmp	r3, #22
 8004cb4:	d101      	bne.n	8004cba <__sflush_r+0xb6>
 8004cb6:	602f      	str	r7, [r5, #0]
 8004cb8:	e7b1      	b.n	8004c1e <__sflush_r+0x1a>
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	e7ad      	b.n	8004c20 <__sflush_r+0x1c>
 8004cc4:	690f      	ldr	r7, [r1, #16]
 8004cc6:	2f00      	cmp	r7, #0
 8004cc8:	d0a9      	beq.n	8004c1e <__sflush_r+0x1a>
 8004cca:	0793      	lsls	r3, r2, #30
 8004ccc:	680e      	ldr	r6, [r1, #0]
 8004cce:	bf08      	it	eq
 8004cd0:	694b      	ldreq	r3, [r1, #20]
 8004cd2:	600f      	str	r7, [r1, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	eba6 0807 	sub.w	r8, r6, r7
 8004cdc:	608b      	str	r3, [r1, #8]
 8004cde:	f1b8 0f00 	cmp.w	r8, #0
 8004ce2:	dd9c      	ble.n	8004c1e <__sflush_r+0x1a>
 8004ce4:	4643      	mov	r3, r8
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	6a21      	ldr	r1, [r4, #32]
 8004cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b0      	blx	r6
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	dc06      	bgt.n	8004d02 <__sflush_r+0xfe>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d00:	e78e      	b.n	8004c20 <__sflush_r+0x1c>
 8004d02:	4407      	add	r7, r0
 8004d04:	eba8 0800 	sub.w	r8, r8, r0
 8004d08:	e7e9      	b.n	8004cde <__sflush_r+0xda>
 8004d0a:	bf00      	nop
 8004d0c:	20400001 	.word	0x20400001

08004d10 <_fflush_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	690b      	ldr	r3, [r1, #16]
 8004d14:	4605      	mov	r5, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	b1db      	cbz	r3, 8004d52 <_fflush_r+0x42>
 8004d1a:	b118      	cbz	r0, 8004d24 <_fflush_r+0x14>
 8004d1c:	6983      	ldr	r3, [r0, #24]
 8004d1e:	b90b      	cbnz	r3, 8004d24 <_fflush_r+0x14>
 8004d20:	f000 f860 	bl	8004de4 <__sinit>
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <_fflush_r+0x48>)
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d109      	bne.n	8004d3e <_fflush_r+0x2e>
 8004d2a:	686c      	ldr	r4, [r5, #4]
 8004d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d30:	b17b      	cbz	r3, 8004d52 <_fflush_r+0x42>
 8004d32:	4621      	mov	r1, r4
 8004d34:	4628      	mov	r0, r5
 8004d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d3a:	f7ff bf63 	b.w	8004c04 <__sflush_r>
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <_fflush_r+0x4c>)
 8004d40:	429c      	cmp	r4, r3
 8004d42:	d101      	bne.n	8004d48 <_fflush_r+0x38>
 8004d44:	68ac      	ldr	r4, [r5, #8]
 8004d46:	e7f1      	b.n	8004d2c <_fflush_r+0x1c>
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_fflush_r+0x50>)
 8004d4a:	429c      	cmp	r4, r3
 8004d4c:	bf08      	it	eq
 8004d4e:	68ec      	ldreq	r4, [r5, #12]
 8004d50:	e7ec      	b.n	8004d2c <_fflush_r+0x1c>
 8004d52:	2000      	movs	r0, #0
 8004d54:	bd38      	pop	{r3, r4, r5, pc}
 8004d56:	bf00      	nop
 8004d58:	08005320 	.word	0x08005320
 8004d5c:	08005340 	.word	0x08005340
 8004d60:	08005300 	.word	0x08005300

08004d64 <std>:
 8004d64:	2300      	movs	r3, #0
 8004d66:	b510      	push	{r4, lr}
 8004d68:	4604      	mov	r4, r0
 8004d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d6e:	6083      	str	r3, [r0, #8]
 8004d70:	8181      	strh	r1, [r0, #12]
 8004d72:	6643      	str	r3, [r0, #100]	; 0x64
 8004d74:	81c2      	strh	r2, [r0, #14]
 8004d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d7a:	6183      	str	r3, [r0, #24]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	2208      	movs	r2, #8
 8004d80:	305c      	adds	r0, #92	; 0x5c
 8004d82:	f7ff fe13 	bl	80049ac <memset>
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <std+0x38>)
 8004d88:	6263      	str	r3, [r4, #36]	; 0x24
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <std+0x3c>)
 8004d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <std+0x40>)
 8004d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <std+0x44>)
 8004d94:	6224      	str	r4, [r4, #32]
 8004d96:	6323      	str	r3, [r4, #48]	; 0x30
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08005131 	.word	0x08005131
 8004da0:	08005153 	.word	0x08005153
 8004da4:	0800518b 	.word	0x0800518b
 8004da8:	080051af 	.word	0x080051af

08004dac <_cleanup_r>:
 8004dac:	4901      	ldr	r1, [pc, #4]	; (8004db4 <_cleanup_r+0x8>)
 8004dae:	f000 b885 	b.w	8004ebc <_fwalk_reent>
 8004db2:	bf00      	nop
 8004db4:	08004d11 	.word	0x08004d11

08004db8 <__sfmoreglue>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	1e4a      	subs	r2, r1, #1
 8004dbc:	2568      	movs	r5, #104	; 0x68
 8004dbe:	4355      	muls	r5, r2
 8004dc0:	460e      	mov	r6, r1
 8004dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dc6:	f000 f949 	bl	800505c <_malloc_r>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	b140      	cbz	r0, 8004de0 <__sfmoreglue+0x28>
 8004dce:	2100      	movs	r1, #0
 8004dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8004dd4:	300c      	adds	r0, #12
 8004dd6:	60a0      	str	r0, [r4, #8]
 8004dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ddc:	f7ff fde6 	bl	80049ac <memset>
 8004de0:	4620      	mov	r0, r4
 8004de2:	bd70      	pop	{r4, r5, r6, pc}

08004de4 <__sinit>:
 8004de4:	6983      	ldr	r3, [r0, #24]
 8004de6:	b510      	push	{r4, lr}
 8004de8:	4604      	mov	r4, r0
 8004dea:	bb33      	cbnz	r3, 8004e3a <__sinit+0x56>
 8004dec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004df0:	6503      	str	r3, [r0, #80]	; 0x50
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <__sinit+0x58>)
 8004df4:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <__sinit+0x5c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6282      	str	r2, [r0, #40]	; 0x28
 8004dfa:	4298      	cmp	r0, r3
 8004dfc:	bf04      	itt	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	6183      	streq	r3, [r0, #24]
 8004e02:	f000 f81f 	bl	8004e44 <__sfp>
 8004e06:	6060      	str	r0, [r4, #4]
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f000 f81b 	bl	8004e44 <__sfp>
 8004e0e:	60a0      	str	r0, [r4, #8]
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 f817 	bl	8004e44 <__sfp>
 8004e16:	2200      	movs	r2, #0
 8004e18:	60e0      	str	r0, [r4, #12]
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	6860      	ldr	r0, [r4, #4]
 8004e1e:	f7ff ffa1 	bl	8004d64 <std>
 8004e22:	2201      	movs	r2, #1
 8004e24:	2109      	movs	r1, #9
 8004e26:	68a0      	ldr	r0, [r4, #8]
 8004e28:	f7ff ff9c 	bl	8004d64 <std>
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	2112      	movs	r1, #18
 8004e30:	68e0      	ldr	r0, [r4, #12]
 8004e32:	f7ff ff97 	bl	8004d64 <std>
 8004e36:	2301      	movs	r3, #1
 8004e38:	61a3      	str	r3, [r4, #24]
 8004e3a:	bd10      	pop	{r4, pc}
 8004e3c:	080052fc 	.word	0x080052fc
 8004e40:	08004dad 	.word	0x08004dad

08004e44 <__sfp>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <__sfp+0x70>)
 8004e48:	681e      	ldr	r6, [r3, #0]
 8004e4a:	69b3      	ldr	r3, [r6, #24]
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	b913      	cbnz	r3, 8004e56 <__sfp+0x12>
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff ffc7 	bl	8004de4 <__sinit>
 8004e56:	3648      	adds	r6, #72	; 0x48
 8004e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	d503      	bpl.n	8004e68 <__sfp+0x24>
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	b133      	cbz	r3, 8004e72 <__sfp+0x2e>
 8004e64:	6836      	ldr	r6, [r6, #0]
 8004e66:	e7f7      	b.n	8004e58 <__sfp+0x14>
 8004e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e6c:	b16d      	cbz	r5, 8004e8a <__sfp+0x46>
 8004e6e:	3468      	adds	r4, #104	; 0x68
 8004e70:	e7f4      	b.n	8004e5c <__sfp+0x18>
 8004e72:	2104      	movs	r1, #4
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff ff9f 	bl	8004db8 <__sfmoreglue>
 8004e7a:	6030      	str	r0, [r6, #0]
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d1f1      	bne.n	8004e64 <__sfp+0x20>
 8004e80:	230c      	movs	r3, #12
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4604      	mov	r4, r0
 8004e86:	4620      	mov	r0, r4
 8004e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <__sfp+0x74>)
 8004e8c:	6665      	str	r5, [r4, #100]	; 0x64
 8004e8e:	e9c4 5500 	strd	r5, r5, [r4]
 8004e92:	60a5      	str	r5, [r4, #8]
 8004e94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004e98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ea4:	f7ff fd82 	bl	80049ac <memset>
 8004ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb0:	e7e9      	b.n	8004e86 <__sfp+0x42>
 8004eb2:	bf00      	nop
 8004eb4:	080052fc 	.word	0x080052fc
 8004eb8:	ffff0001 	.word	0xffff0001

08004ebc <_fwalk_reent>:
 8004ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	4689      	mov	r9, r1
 8004ec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ec8:	2600      	movs	r6, #0
 8004eca:	b914      	cbnz	r4, 8004ed2 <_fwalk_reent+0x16>
 8004ecc:	4630      	mov	r0, r6
 8004ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ed6:	3f01      	subs	r7, #1
 8004ed8:	d501      	bpl.n	8004ede <_fwalk_reent+0x22>
 8004eda:	6824      	ldr	r4, [r4, #0]
 8004edc:	e7f5      	b.n	8004eca <_fwalk_reent+0xe>
 8004ede:	89ab      	ldrh	r3, [r5, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d907      	bls.n	8004ef4 <_fwalk_reent+0x38>
 8004ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	d003      	beq.n	8004ef4 <_fwalk_reent+0x38>
 8004eec:	4629      	mov	r1, r5
 8004eee:	4640      	mov	r0, r8
 8004ef0:	47c8      	blx	r9
 8004ef2:	4306      	orrs	r6, r0
 8004ef4:	3568      	adds	r5, #104	; 0x68
 8004ef6:	e7ee      	b.n	8004ed6 <_fwalk_reent+0x1a>

08004ef8 <__swhatbuf_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	460e      	mov	r6, r1
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	b096      	sub	sp, #88	; 0x58
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	da07      	bge.n	8004f1a <__swhatbuf_r+0x22>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	89b3      	ldrh	r3, [r6, #12]
 8004f10:	061a      	lsls	r2, r3, #24
 8004f12:	d410      	bmi.n	8004f36 <__swhatbuf_r+0x3e>
 8004f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f18:	e00e      	b.n	8004f38 <__swhatbuf_r+0x40>
 8004f1a:	466a      	mov	r2, sp
 8004f1c:	f000 f96e 	bl	80051fc <_fstat_r>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	dbf2      	blt.n	8004f0a <__swhatbuf_r+0x12>
 8004f24:	9a01      	ldr	r2, [sp, #4]
 8004f26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f2e:	425a      	negs	r2, r3
 8004f30:	415a      	adcs	r2, r3
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	e7ee      	b.n	8004f14 <__swhatbuf_r+0x1c>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	2000      	movs	r0, #0
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	b016      	add	sp, #88	; 0x58
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}

08004f40 <__smakebuf_r>:
 8004f40:	898b      	ldrh	r3, [r1, #12]
 8004f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f44:	079d      	lsls	r5, r3, #30
 8004f46:	4606      	mov	r6, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	d507      	bpl.n	8004f5c <__smakebuf_r+0x1c>
 8004f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	6123      	str	r3, [r4, #16]
 8004f54:	2301      	movs	r3, #1
 8004f56:	6163      	str	r3, [r4, #20]
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	ab01      	add	r3, sp, #4
 8004f5e:	466a      	mov	r2, sp
 8004f60:	f7ff ffca 	bl	8004ef8 <__swhatbuf_r>
 8004f64:	9900      	ldr	r1, [sp, #0]
 8004f66:	4605      	mov	r5, r0
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f877 	bl	800505c <_malloc_r>
 8004f6e:	b948      	cbnz	r0, 8004f84 <__smakebuf_r+0x44>
 8004f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f74:	059a      	lsls	r2, r3, #22
 8004f76:	d4ef      	bmi.n	8004f58 <__smakebuf_r+0x18>
 8004f78:	f023 0303 	bic.w	r3, r3, #3
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	e7e3      	b.n	8004f4c <__smakebuf_r+0xc>
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <__smakebuf_r+0x7c>)
 8004f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	6020      	str	r0, [r4, #0]
 8004f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f90:	81a3      	strh	r3, [r4, #12]
 8004f92:	9b00      	ldr	r3, [sp, #0]
 8004f94:	6163      	str	r3, [r4, #20]
 8004f96:	9b01      	ldr	r3, [sp, #4]
 8004f98:	6120      	str	r0, [r4, #16]
 8004f9a:	b15b      	cbz	r3, 8004fb4 <__smakebuf_r+0x74>
 8004f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 f93d 	bl	8005220 <_isatty_r>
 8004fa6:	b128      	cbz	r0, 8004fb4 <__smakebuf_r+0x74>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	431d      	orrs	r5, r3
 8004fb8:	81a5      	strh	r5, [r4, #12]
 8004fba:	e7cd      	b.n	8004f58 <__smakebuf_r+0x18>
 8004fbc:	08004dad 	.word	0x08004dad

08004fc0 <_free_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d045      	beq.n	8005054 <_free_r+0x94>
 8004fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fcc:	1f0c      	subs	r4, r1, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfb8      	it	lt
 8004fd2:	18e4      	addlt	r4, r4, r3
 8004fd4:	f000 f946 	bl	8005264 <__malloc_lock>
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <_free_r+0x98>)
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	4610      	mov	r0, r2
 8004fde:	b933      	cbnz	r3, 8004fee <_free_r+0x2e>
 8004fe0:	6063      	str	r3, [r4, #4]
 8004fe2:	6014      	str	r4, [r2, #0]
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fea:	f000 b93c 	b.w	8005266 <__malloc_unlock>
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d90c      	bls.n	800500c <_free_r+0x4c>
 8004ff2:	6821      	ldr	r1, [r4, #0]
 8004ff4:	1862      	adds	r2, r4, r1
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bf04      	itt	eq
 8004ffa:	681a      	ldreq	r2, [r3, #0]
 8004ffc:	685b      	ldreq	r3, [r3, #4]
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	bf04      	itt	eq
 8005002:	1852      	addeq	r2, r2, r1
 8005004:	6022      	streq	r2, [r4, #0]
 8005006:	6004      	str	r4, [r0, #0]
 8005008:	e7ec      	b.n	8004fe4 <_free_r+0x24>
 800500a:	4613      	mov	r3, r2
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	b10a      	cbz	r2, 8005014 <_free_r+0x54>
 8005010:	42a2      	cmp	r2, r4
 8005012:	d9fa      	bls.n	800500a <_free_r+0x4a>
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	1858      	adds	r0, r3, r1
 8005018:	42a0      	cmp	r0, r4
 800501a:	d10b      	bne.n	8005034 <_free_r+0x74>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	4401      	add	r1, r0
 8005020:	1858      	adds	r0, r3, r1
 8005022:	4282      	cmp	r2, r0
 8005024:	6019      	str	r1, [r3, #0]
 8005026:	d1dd      	bne.n	8004fe4 <_free_r+0x24>
 8005028:	6810      	ldr	r0, [r2, #0]
 800502a:	6852      	ldr	r2, [r2, #4]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	4401      	add	r1, r0
 8005030:	6019      	str	r1, [r3, #0]
 8005032:	e7d7      	b.n	8004fe4 <_free_r+0x24>
 8005034:	d902      	bls.n	800503c <_free_r+0x7c>
 8005036:	230c      	movs	r3, #12
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	e7d3      	b.n	8004fe4 <_free_r+0x24>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	1821      	adds	r1, r4, r0
 8005040:	428a      	cmp	r2, r1
 8005042:	bf04      	itt	eq
 8005044:	6811      	ldreq	r1, [r2, #0]
 8005046:	6852      	ldreq	r2, [r2, #4]
 8005048:	6062      	str	r2, [r4, #4]
 800504a:	bf04      	itt	eq
 800504c:	1809      	addeq	r1, r1, r0
 800504e:	6021      	streq	r1, [r4, #0]
 8005050:	605c      	str	r4, [r3, #4]
 8005052:	e7c7      	b.n	8004fe4 <_free_r+0x24>
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	20000094 	.word	0x20000094

0800505c <_malloc_r>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	1ccd      	adds	r5, r1, #3
 8005060:	f025 0503 	bic.w	r5, r5, #3
 8005064:	3508      	adds	r5, #8
 8005066:	2d0c      	cmp	r5, #12
 8005068:	bf38      	it	cc
 800506a:	250c      	movcc	r5, #12
 800506c:	2d00      	cmp	r5, #0
 800506e:	4606      	mov	r6, r0
 8005070:	db01      	blt.n	8005076 <_malloc_r+0x1a>
 8005072:	42a9      	cmp	r1, r5
 8005074:	d903      	bls.n	800507e <_malloc_r+0x22>
 8005076:	230c      	movs	r3, #12
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	2000      	movs	r0, #0
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	f000 f8f1 	bl	8005264 <__malloc_lock>
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <_malloc_r+0xac>)
 8005084:	6814      	ldr	r4, [r2, #0]
 8005086:	4621      	mov	r1, r4
 8005088:	b991      	cbnz	r1, 80050b0 <_malloc_r+0x54>
 800508a:	4c20      	ldr	r4, [pc, #128]	; (800510c <_malloc_r+0xb0>)
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	b91b      	cbnz	r3, 8005098 <_malloc_r+0x3c>
 8005090:	4630      	mov	r0, r6
 8005092:	f000 f83d 	bl	8005110 <_sbrk_r>
 8005096:	6020      	str	r0, [r4, #0]
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f000 f838 	bl	8005110 <_sbrk_r>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d124      	bne.n	80050ee <_malloc_r+0x92>
 80050a4:	230c      	movs	r3, #12
 80050a6:	6033      	str	r3, [r6, #0]
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 f8dc 	bl	8005266 <__malloc_unlock>
 80050ae:	e7e4      	b.n	800507a <_malloc_r+0x1e>
 80050b0:	680b      	ldr	r3, [r1, #0]
 80050b2:	1b5b      	subs	r3, r3, r5
 80050b4:	d418      	bmi.n	80050e8 <_malloc_r+0x8c>
 80050b6:	2b0b      	cmp	r3, #11
 80050b8:	d90f      	bls.n	80050da <_malloc_r+0x7e>
 80050ba:	600b      	str	r3, [r1, #0]
 80050bc:	50cd      	str	r5, [r1, r3]
 80050be:	18cc      	adds	r4, r1, r3
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f8d0 	bl	8005266 <__malloc_unlock>
 80050c6:	f104 000b 	add.w	r0, r4, #11
 80050ca:	1d23      	adds	r3, r4, #4
 80050cc:	f020 0007 	bic.w	r0, r0, #7
 80050d0:	1ac3      	subs	r3, r0, r3
 80050d2:	d0d3      	beq.n	800507c <_malloc_r+0x20>
 80050d4:	425a      	negs	r2, r3
 80050d6:	50e2      	str	r2, [r4, r3]
 80050d8:	e7d0      	b.n	800507c <_malloc_r+0x20>
 80050da:	428c      	cmp	r4, r1
 80050dc:	684b      	ldr	r3, [r1, #4]
 80050de:	bf16      	itet	ne
 80050e0:	6063      	strne	r3, [r4, #4]
 80050e2:	6013      	streq	r3, [r2, #0]
 80050e4:	460c      	movne	r4, r1
 80050e6:	e7eb      	b.n	80050c0 <_malloc_r+0x64>
 80050e8:	460c      	mov	r4, r1
 80050ea:	6849      	ldr	r1, [r1, #4]
 80050ec:	e7cc      	b.n	8005088 <_malloc_r+0x2c>
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d005      	beq.n	8005104 <_malloc_r+0xa8>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4630      	mov	r0, r6
 80050fc:	f000 f808 	bl	8005110 <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d0cf      	beq.n	80050a4 <_malloc_r+0x48>
 8005104:	6025      	str	r5, [r4, #0]
 8005106:	e7db      	b.n	80050c0 <_malloc_r+0x64>
 8005108:	20000094 	.word	0x20000094
 800510c:	20000098 	.word	0x20000098

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4c06      	ldr	r4, [pc, #24]	; (800512c <_sbrk_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4605      	mov	r5, r0
 8005118:	4608      	mov	r0, r1
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	f7fb fe24 	bl	8000d68 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200019e0 	.word	0x200019e0

08005130 <__sread>:
 8005130:	b510      	push	{r4, lr}
 8005132:	460c      	mov	r4, r1
 8005134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005138:	f000 f896 	bl	8005268 <_read_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	bfab      	itete	ge
 8005140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005142:	89a3      	ldrhlt	r3, [r4, #12]
 8005144:	181b      	addge	r3, r3, r0
 8005146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800514a:	bfac      	ite	ge
 800514c:	6563      	strge	r3, [r4, #84]	; 0x54
 800514e:	81a3      	strhlt	r3, [r4, #12]
 8005150:	bd10      	pop	{r4, pc}

08005152 <__swrite>:
 8005152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005156:	461f      	mov	r7, r3
 8005158:	898b      	ldrh	r3, [r1, #12]
 800515a:	05db      	lsls	r3, r3, #23
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	4616      	mov	r6, r2
 8005162:	d505      	bpl.n	8005170 <__swrite+0x1e>
 8005164:	2302      	movs	r3, #2
 8005166:	2200      	movs	r2, #0
 8005168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516c:	f000 f868 	bl	8005240 <_lseek_r>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	4632      	mov	r2, r6
 800517e:	463b      	mov	r3, r7
 8005180:	4628      	mov	r0, r5
 8005182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	f000 b817 	b.w	80051b8 <_write_r>

0800518a <__sseek>:
 800518a:	b510      	push	{r4, lr}
 800518c:	460c      	mov	r4, r1
 800518e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005192:	f000 f855 	bl	8005240 <_lseek_r>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	bf15      	itete	ne
 800519c:	6560      	strne	r0, [r4, #84]	; 0x54
 800519e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051a6:	81a3      	strheq	r3, [r4, #12]
 80051a8:	bf18      	it	ne
 80051aa:	81a3      	strhne	r3, [r4, #12]
 80051ac:	bd10      	pop	{r4, pc}

080051ae <__sclose>:
 80051ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b2:	f000 b813 	b.w	80051dc <_close_r>
	...

080051b8 <_write_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4c07      	ldr	r4, [pc, #28]	; (80051d8 <_write_r+0x20>)
 80051bc:	4605      	mov	r5, r0
 80051be:	4608      	mov	r0, r1
 80051c0:	4611      	mov	r1, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7fb fd7d 	bl	8000cc6 <_write>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_write_r+0x1e>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_write_r+0x1e>
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	200019e0 	.word	0x200019e0

080051dc <_close_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4c06      	ldr	r4, [pc, #24]	; (80051f8 <_close_r+0x1c>)
 80051e0:	2300      	movs	r3, #0
 80051e2:	4605      	mov	r5, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	f7fb fd89 	bl	8000cfe <_close>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d102      	bne.n	80051f6 <_close_r+0x1a>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	b103      	cbz	r3, 80051f6 <_close_r+0x1a>
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	200019e0 	.word	0x200019e0

080051fc <_fstat_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4c07      	ldr	r4, [pc, #28]	; (800521c <_fstat_r+0x20>)
 8005200:	2300      	movs	r3, #0
 8005202:	4605      	mov	r5, r0
 8005204:	4608      	mov	r0, r1
 8005206:	4611      	mov	r1, r2
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	f7fb fd84 	bl	8000d16 <_fstat>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	d102      	bne.n	8005218 <_fstat_r+0x1c>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	b103      	cbz	r3, 8005218 <_fstat_r+0x1c>
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	bd38      	pop	{r3, r4, r5, pc}
 800521a:	bf00      	nop
 800521c:	200019e0 	.word	0x200019e0

08005220 <_isatty_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4c06      	ldr	r4, [pc, #24]	; (800523c <_isatty_r+0x1c>)
 8005224:	2300      	movs	r3, #0
 8005226:	4605      	mov	r5, r0
 8005228:	4608      	mov	r0, r1
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	f7fb fd83 	bl	8000d36 <_isatty>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_isatty_r+0x1a>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	b103      	cbz	r3, 800523a <_isatty_r+0x1a>
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	200019e0 	.word	0x200019e0

08005240 <_lseek_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4c07      	ldr	r4, [pc, #28]	; (8005260 <_lseek_r+0x20>)
 8005244:	4605      	mov	r5, r0
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	2200      	movs	r2, #0
 800524c:	6022      	str	r2, [r4, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7fb fd7c 	bl	8000d4c <_lseek>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_lseek_r+0x1e>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	b103      	cbz	r3, 800525e <_lseek_r+0x1e>
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	200019e0 	.word	0x200019e0

08005264 <__malloc_lock>:
 8005264:	4770      	bx	lr

08005266 <__malloc_unlock>:
 8005266:	4770      	bx	lr

08005268 <_read_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4c07      	ldr	r4, [pc, #28]	; (8005288 <_read_r+0x20>)
 800526c:	4605      	mov	r5, r0
 800526e:	4608      	mov	r0, r1
 8005270:	4611      	mov	r1, r2
 8005272:	2200      	movs	r2, #0
 8005274:	6022      	str	r2, [r4, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f7fb fd08 	bl	8000c8c <_read>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_read_r+0x1e>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	b103      	cbz	r3, 8005286 <_read_r+0x1e>
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200019e0 	.word	0x200019e0

0800528c <_init>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr

08005298 <_fini>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

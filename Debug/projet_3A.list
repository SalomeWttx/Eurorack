
projet_3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f5c  08005f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a8  20000070  08005fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002318  08005fd4  00022318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4f6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003640  00000000  00000000  0003b596  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001718  00000000  00000000  0003ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001540  00000000  00000000  000402f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024f44  00000000  00000000  00041830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001498a  00000000  00000000  00066774  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df936  00000000  00000000  0007b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015aa34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ec  00000000  00000000  0015aab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005e80 	.word	0x08005e80

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08005e80 	.word	0x08005e80

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4b50      	ldr	r3, [pc, #320]	; (8000624 <MX_ADC1_Init+0x158>)
 80004e4:	4a50      	ldr	r2, [pc, #320]	; (8000628 <MX_ADC1_Init+0x15c>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e8:	4b4e      	ldr	r3, [pc, #312]	; (8000624 <MX_ADC1_Init+0x158>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ee:	4b4d      	ldr	r3, [pc, #308]	; (8000624 <MX_ADC1_Init+0x158>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <MX_ADC1_Init+0x158>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004fa:	4b4a      	ldr	r3, [pc, #296]	; (8000624 <MX_ADC1_Init+0x158>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000500:	4b48      	ldr	r3, [pc, #288]	; (8000624 <MX_ADC1_Init+0x158>)
 8000502:	2208      	movs	r2, #8
 8000504:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000506:	4b47      	ldr	r3, [pc, #284]	; (8000624 <MX_ADC1_Init+0x158>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b45      	ldr	r3, [pc, #276]	; (8000624 <MX_ADC1_Init+0x158>)
 800050e:	2200      	movs	r2, #0
 8000510:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000512:	4b44      	ldr	r3, [pc, #272]	; (8000624 <MX_ADC1_Init+0x158>)
 8000514:	2206      	movs	r2, #6
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000518:	4b42      	ldr	r3, [pc, #264]	; (8000624 <MX_ADC1_Init+0x158>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000520:	4b40      	ldr	r3, [pc, #256]	; (8000624 <MX_ADC1_Init+0x158>)
 8000522:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000528:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <MX_ADC1_Init+0x158>)
 800052a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000530:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <MX_ADC1_Init+0x158>)
 8000532:	2201      	movs	r2, #1
 8000534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <MX_ADC1_Init+0x158>)
 800053a:	2200      	movs	r2, #0
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <MX_ADC1_Init+0x158>)
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000546:	4837      	ldr	r0, [pc, #220]	; (8000624 <MX_ADC1_Init+0x158>)
 8000548:	f001 f990 	bl	800186c <HAL_ADC_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000552:	f000 fcbd 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000556:	4b35      	ldr	r3, [pc, #212]	; (800062c <MX_ADC1_Init+0x160>)
 8000558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800055a:	2306      	movs	r3, #6
 800055c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800055e:	2302      	movs	r3, #2
 8000560:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000562:	237f      	movs	r3, #127	; 0x7f
 8000564:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000566:	2304      	movs	r3, #4
 8000568:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	4619      	mov	r1, r3
 8000572:	482c      	ldr	r0, [pc, #176]	; (8000624 <MX_ADC1_Init+0x158>)
 8000574:	f001 fb4e 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800057e:	f000 fca7 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <MX_ADC1_Init+0x164>)
 8000584:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000586:	230c      	movs	r3, #12
 8000588:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	4619      	mov	r1, r3
 800058e:	4825      	ldr	r0, [pc, #148]	; (8000624 <MX_ADC1_Init+0x158>)
 8000590:	f001 fb40 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800059a:	f000 fc99 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <MX_ADC1_Init+0x168>)
 80005a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005a2:	2312      	movs	r3, #18
 80005a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <MX_ADC1_Init+0x158>)
 80005ac:	f001 fb32 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005b6:	f000 fc8b 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_ADC1_Init+0x16c>)
 80005bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005be:	2318      	movs	r3, #24
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4816      	ldr	r0, [pc, #88]	; (8000624 <MX_ADC1_Init+0x158>)
 80005cc:	f001 fb22 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80005d6:	f000 fc7b 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_ADC1_Init+0x170>)
 80005dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80005e4:	2302      	movs	r3, #2
 80005e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4619      	mov	r1, r3
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_ADC1_Init+0x158>)
 80005ee:	f001 fb11 	bl	8001c14 <HAL_ADC_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80005f8:	f000 fc6a 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_ADC1_Init+0x174>)
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000600:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000604:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0x158>)
 800060c:	f001 fb02 	bl	8001c14 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000616:	f000 fc5b 	bl	8000ed0 <Error_Handler>
  }

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000a8 	.word	0x200000a8
 8000628:	50040000 	.word	0x50040000
 800062c:	21800100 	.word	0x21800100
 8000630:	14f00020 	.word	0x14f00020
 8000634:	19200040 	.word	0x19200040
 8000638:	2e300800 	.word	0x2e300800
 800063c:	32601000 	.word	0x32601000
 8000640:	3ef08000 	.word	0x3ef08000

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a37      	ldr	r2, [pc, #220]	; (8000740 <HAL_ADC_MspInit+0xfc>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d168      	bne.n	8000738 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <HAL_ADC_MspInit+0x100>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a36      	ldr	r2, [pc, #216]	; (8000744 <HAL_ADC_MspInit+0x100>)
 800066c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <HAL_ADC_MspInit+0x100>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <HAL_ADC_MspInit+0x100>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a30      	ldr	r2, [pc, #192]	; (8000744 <HAL_ADC_MspInit+0x100>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <HAL_ADC_MspInit+0x100>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <HAL_ADC_MspInit+0x100>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <HAL_ADC_MspInit+0x100>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <HAL_ADC_MspInit+0x100>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6
 80006ae:	23cb      	movs	r3, #203	; 0xcb
 80006b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b2:	230b      	movs	r3, #11
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f002 fd1e 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c8:	2301      	movs	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006cc:	230b      	movs	r3, #11
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	481b      	ldr	r0, [pc, #108]	; (8000748 <HAL_ADC_MspInit+0x104>)
 80006dc:	f002 fd12 	bl	8003104 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_ADC_MspInit+0x108>)
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <HAL_ADC_MspInit+0x10c>)
 80006e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_ADC_MspInit+0x108>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_ADC_MspInit+0x108>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_ADC_MspInit+0x108>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x108>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_ADC_MspInit+0x108>)
 8000700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000704:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_ADC_MspInit+0x108>)
 8000708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800070c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_ADC_MspInit+0x108>)
 8000710:	2220      	movs	r2, #32
 8000712:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_ADC_MspInit+0x108>)
 8000716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <HAL_ADC_MspInit+0x108>)
 800071e:	f002 faf9 	bl	8002d14 <HAL_DMA_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8000728:	f000 fbd2 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_ADC_MspInit+0x108>)
 8000730:	64da      	str	r2, [r3, #76]	; 0x4c
 8000732:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_ADC_MspInit+0x108>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	50040000 	.word	0x50040000
 8000744:	40021000 	.word	0x40021000
 8000748:	48000400 	.word	0x48000400
 800074c:	2000010c 	.word	0x2000010c
 8000750:	40020008 	.word	0x40020008

08000754 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2224      	movs	r2, #36	; 0x24
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f004 ff1d 	bl	80055a0 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_DAC1_Init+0x74>)
 8000768:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_DAC1_Init+0x78>)
 800076a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800076c:	4816      	ldr	r0, [pc, #88]	; (80007c8 <MX_DAC1_Init+0x74>)
 800076e:	f002 f82e 	bl	80027ce <HAL_DAC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000778:	f000 fbaa 	bl	8000ed0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000780:	2304      	movs	r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_DAC1_Init+0x74>)
 8000798:	f002 f918 	bl	80029cc <HAL_DAC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 fb95 	bl	8000ed0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2210      	movs	r2, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_DAC1_Init+0x74>)
 80007b2:	f002 f90b 	bl	80029cc <HAL_DAC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 80007bc:	f000 fb88 	bl	8000ed0 <Error_Handler>
  }

}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000154 	.word	0x20000154
 80007cc:	40007400 	.word	0x40007400

080007d0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a41      	ldr	r2, [pc, #260]	; (80008f4 <HAL_DAC_MspInit+0x124>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d17c      	bne.n	80008ec <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007f2:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <HAL_DAC_MspInit+0x128>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <HAL_DAC_MspInit+0x128>)
 80007f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007fc:	6593      	str	r3, [r2, #88]	; 0x58
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <HAL_DAC_MspInit+0x128>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <HAL_DAC_MspInit+0x128>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a3a      	ldr	r2, [pc, #232]	; (80008f8 <HAL_DAC_MspInit+0x128>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <HAL_DAC_MspInit+0x128>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000822:	2330      	movs	r3, #48	; 0x30
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f002 fc64 	bl	8003104 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800083c:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <HAL_DAC_MspInit+0x130>)
 8000840:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000842:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 8000844:	2206      	movs	r2, #6
 8000846:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 800084a:	2210      	movs	r2, #16
 800084c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 800085c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000860:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 8000864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000868:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 800086c:	2220      	movs	r2, #32
 800086e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 8000872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000876:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000878:	4820      	ldr	r0, [pc, #128]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 800087a:	f002 fa4b 	bl	8002d14 <HAL_DMA_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000884:	f000 fb24 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <HAL_DAC_MspInit+0x12c>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_DAC_MspInit+0x134>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <HAL_DAC_MspInit+0x138>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <HAL_DAC_MspInit+0x134>)
 800089c:	2205      	movs	r2, #5
 800089e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008d2:	f002 fa1f 	bl	8002d14 <HAL_DMA_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80008dc:	f000 faf8 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_DAC_MspInit+0x134>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40007400 	.word	0x40007400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	20000168 	.word	0x20000168
 8000900:	40020030 	.word	0x40020030
 8000904:	200001b0 	.word	0x200001b0
 8000908:	40020044 	.word	0x40020044

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_DMA_Init+0x58>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_DMA_Init+0x58>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6493      	str	r3, [r2, #72]	; 0x48
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_DMA_Init+0x58>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	200b      	movs	r0, #11
 8000930:	f001 ff17 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000934:	200b      	movs	r0, #11
 8000936:	f001 ff30 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200d      	movs	r0, #13
 8000940:	f001 ff0f 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000944:	200d      	movs	r0, #13
 8000946:	f001 ff28 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	200e      	movs	r0, #14
 8000950:	f001 ff07 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000954:	200e      	movs	r0, #14
 8000956:	f001 ff20 	bl	800279a <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <MX_GPIO_Init+0xf8>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a37      	ldr	r2, [pc, #220]	; (8000a60 <MX_GPIO_Init+0xf8>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <MX_GPIO_Init+0xf8>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <MX_GPIO_Init+0xf8>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a31      	ldr	r2, [pc, #196]	; (8000a60 <MX_GPIO_Init+0xf8>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_GPIO_Init+0xf8>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_GPIO_Init+0xf8>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <MX_GPIO_Init+0xf8>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_GPIO_Init+0xf8>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009cc:	f002 fd1c 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d0:	2302      	movs	r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_GPIO_Init+0x100>)
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4820      	ldr	r0, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009e4:	f002 fb8e 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_SWITCH_Pin;
 80009e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f002 fb80 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a04:	2308      	movs	r3, #8
 8000a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000a1c:	f002 fb72 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNOB_CH_A_Pin;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KNOB_CH_A_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000a34:	f002 fb66 	bl	8003104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2007      	movs	r0, #7
 8000a3e:	f001 fe90 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a42:	2007      	movs	r0, #7
 8000a44:	f001 fea9 	bl	800279a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2017      	movs	r0, #23
 8000a4e:	f001 fe88 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a52:	2017      	movs	r0, #23
 8000a54:	f001 fea1 	bl	800279a <HAL_NVIC_EnableIRQ>

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	10210000 	.word	0x10210000
 8000a6c:	10110000 	.word	0x10110000

08000a70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C1_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aac:	f002 fcdc 	bl	8003468 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fa0b 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000abe:	f002 fd62 	bl	8003586 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fa02 	bl	8000ed0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000ad0:	f002 fda4 	bl	800361c <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f9f9 	bl	8000ed0 <Error_Handler>
  }

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001f8 	.word	0x200001f8
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	00702991 	.word	0x00702991

08000af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <HAL_I2C_MspInit+0x80>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d129      	bne.n	8000b66 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b30:	2312      	movs	r3, #18
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f002 fadb 	bl	8003104 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40021000 	.word	0x40021000

08000b78 <processDSP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processDSP(){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	__NOP();
 8000b7e:	bf00      	nop
	//For DAC 1 (from IN_L)
	for(uint16_t i=0; i!= SAMPLES_LENGTH; i++){
 8000b80:	2300      	movs	r3, #0
 8000b82:	80fb      	strh	r3, [r7, #6]
 8000b84:	e013      	b.n	8000bae <processDSP+0x36>
		out_buffer_1_ptr[i] = in_buffer_ptr[6*i+5];
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <processDSP+0x80>)
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	330a      	adds	r3, #10
 8000b96:	18ca      	adds	r2, r1, r3
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <processDSP+0x84>)
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	440b      	add	r3, r1
 8000ba2:	8812      	ldrh	r2, [r2, #0]
 8000ba4:	b292      	uxth	r2, r2
 8000ba6:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i!= SAMPLES_LENGTH; i++){
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	3301      	adds	r3, #1
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb4:	d1e7      	bne.n	8000b86 <processDSP+0xe>
	}

	//For DAC 2 (from IN_R)
	for(uint16_t i=0; i!= SAMPLES_LENGTH; i++){
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	e013      	b.n	8000be4 <processDSP+0x6c>
		out_buffer_2_ptr[i] = in_buffer_ptr[6*i+1];
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <processDSP+0x80>)
 8000bbe:	6819      	ldr	r1, [r3, #0]
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	18ca      	adds	r2, r1, r3
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <processDSP+0x88>)
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	440b      	add	r3, r1
 8000bd8:	8812      	ldrh	r2, [r2, #0]
 8000bda:	b292      	uxth	r2, r2
 8000bdc:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i!= SAMPLES_LENGTH; i++){
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	3301      	adds	r3, #1
 8000be2:	80bb      	strh	r3, [r7, #4]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bea:	d1e7      	bne.n	8000bbc <processDSP+0x44>
	}
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000090 	.word	0x20000090
 8000bfc:	20000094 	.word	0x20000094
 8000c00:	20000098 	.word	0x20000098

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fbd0 	bl	80013ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f84b 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f7ff fea9 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c16:	f7ff fe79 	bl	800090c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c1a:	f000 fb1b 	bl	8001254 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c1e:	f7ff ff27 	bl	8000a70 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000c22:	f7ff fc53 	bl	80004cc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000c26:	f7ff fd95 	bl	8000754 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000c2a:	f000 fabd 	bl	80011a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000c2e:	4816      	ldr	r0, [pc, #88]	; (8000c88 <main+0x84>)
 8000c30:	f003 ff22 	bl	8004a78 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1 , (uint32_t *) adc_buffer, ADC_BUFFER_SIZE);
 8000c34:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000c38:	4914      	ldr	r1, [pc, #80]	; (8000c8c <main+0x88>)
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <main+0x8c>)
 8000c3c:	f000 ff5c 	bl	8001af8 <HAL_ADC_Start_DMA>
  HAL_Delay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fc29 	bl	8001498 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1 , (uint32_t *) dac_buffer_1, DAC_BUFFER_1_SIZE, DAC_ALIGN_12B_R);
 8000c46:	2300      	movs	r3, #0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <main+0x90>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4811      	ldr	r0, [pc, #68]	; (8000c98 <main+0x94>)
 8000c54:	f001 fdde 	bl	8002814 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2 , (uint32_t *) dac_buffer_2, DAC_BUFFER_2_SIZE, DAC_ALIGN_12B_R);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <main+0x98>)
 8000c62:	2110      	movs	r1, #16
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <main+0x94>)
 8000c66:	f001 fdd5 	bl	8002814 <HAL_DAC_Start_DMA>
  printf("oh, un gens\r\n");
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <main+0x9c>)
 8000c6c:	f004 fcfc 	bl	8005668 <puts>
	  //printf("%ld %ld %ld\r\n", value[0],value[1],value[2]);

		  /*for (int i=0; i!= 512;i++){
			  printf("%u\r\n", adc_buffer[6*i+1]);
		  }*/
	  if(start_dsp){
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <main+0xa0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d004      	beq.n	8000c82 <main+0x7e>
		  start_dsp = 0;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <main+0xa0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		  processDSP();
 8000c7e:	f7ff ff7b 	bl	8000b78 <processDSP>
	  }
	  __NOP();
 8000c82:	bf00      	nop
	  if(start_dsp){
 8000c84:	e7f4      	b.n	8000c70 <main+0x6c>
 8000c86:	bf00      	nop
 8000c88:	20002244 	.word	0x20002244
 8000c8c:	20000a44 	.word	0x20000a44
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	20000244 	.word	0x20000244
 8000c98:	20000154 	.word	0x20000154
 8000c9c:	20000644 	.word	0x20000644
 8000ca0:	08005e98 	.word	0x08005e98
 8000ca4:	2000008c 	.word	0x2000008c

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ac      	sub	sp, #176	; 0xb0
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cb2:	2244      	movs	r2, #68	; 0x44
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fc72 	bl	80055a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2254      	movs	r2, #84	; 0x54
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fc64 	bl	80055a0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cd8:	f002 fcec 	bl	80036b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cdc:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <SystemClock_Config+0x128>)
 8000cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ce2:	4a3b      	ldr	r2, [pc, #236]	; (8000dd0 <SystemClock_Config+0x128>)
 8000ce4:	f023 0318 	bic.w	r3, r3, #24
 8000ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cec:	2314      	movs	r3, #20
 8000cee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d18:	2328      	movs	r3, #40	; 0x28
 8000d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fd31 	bl	800379c <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d40:	f000 f8c6 	bl	8000ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 f93c 	bl	8003fdc <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d6a:	f000 f8b1 	bl	8000ed0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000d6e:	f244 0342 	movw	r3, #16450	; 0x4042
 8000d72:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d9e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fb1e 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000dae:	f000 f88f 	bl	8000ed0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000db2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000db6:	f002 fc9b 	bl	80036f0 <HAL_PWREx_ControlVoltageScaling>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000dc0:	f000 f886 	bl	8000ed0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dc4:	f003 fd00 	bl	80047c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dc8:	bf00      	nop
 8000dca:	37b0      	adds	r7, #176	; 0xb0
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	__NOP();
 8000ddc:	bf00      	nop
	//First half ot the buffer is full
	in_buffer_ptr =  adc_buffer;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000de0:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000de2:	601a      	str	r2, [r3, #0]
	out_buffer_1_ptr = &dac_buffer_1[DAC_BUFFER_1_HALF_SIZE];
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000de8:	601a      	str	r2, [r3, #0]
	out_buffer_2_ptr = &dac_buffer_2[DAC_BUFFER_2_HALF_SIZE];
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000dee:	601a      	str	r2, [r3, #0]
	start_dsp = 1;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000090 	.word	0x20000090
 8000e08:	20000a44 	.word	0x20000a44
 8000e0c:	20000094 	.word	0x20000094
 8000e10:	20000444 	.word	0x20000444
 8000e14:	20000098 	.word	0x20000098
 8000e18:	20000844 	.word	0x20000844
 8000e1c:	2000008c 	.word	0x2000008c

08000e20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	__NOP();
 8000e28:	bf00      	nop
	//The buffer is now full
	in_buffer_ptr = &adc_buffer[ADC_BUFFER_HALF_SIZE];
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x30>)
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x34>)
 8000e2e:	601a      	str	r2, [r3, #0]
	out_buffer_1_ptr = dac_buffer_1;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x38>)
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000e34:	601a      	str	r2, [r3, #0]
	out_buffer_2_ptr = dac_buffer_2;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_ADC_ConvCpltCallback+0x40>)
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_ADC_ConvCpltCallback+0x44>)
 8000e3a:	601a      	str	r2, [r3, #0]
	start_dsp = 1;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000090 	.word	0x20000090
 8000e54:	20001644 	.word	0x20001644
 8000e58:	20000094 	.word	0x20000094
 8000e5c:	20000244 	.word	0x20000244
 8000e60:	20000098 	.word	0x20000098
 8000e64:	20000644 	.word	0x20000644
 8000e68:	2000008c 	.word	0x2000008c

08000e6c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
	//Pour le switch
	if(GPIO_Pin == KNOB_SWITCH_Pin){
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x16>
		//On a appuyé sur le bouton
		__NOP();
 8000e7e:	bf00      	nop
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_EXTI_Callback+0x18>
	}else{
		__NOP();
 8000e82:	bf00      	nop
	}
	//Pour gérer la roue codeuse
	if(GPIO_Pin == GPIO_PIN_1){
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d119      	bne.n	8000ebe <HAL_GPIO_EXTI_Callback+0x52>
		//Gestion de l'interruption
		if(HAL_GPIO_ReadPin(KNOB_CH_A_GPIO_Port, KNOB_CH_A_Pin)){
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e8e:	f002 faa3 	bl	80033d8 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d009      	beq.n	8000eac <HAL_GPIO_EXTI_Callback+0x40>
			counter++;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x60>)
 8000e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x60>)
 8000ea8:	801a      	strh	r2, [r3, #0]
		}else{
			counter--;
		}
	}
}
 8000eaa:	e008      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x52>
			counter--;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x60>)
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x60>)
 8000ebc:	801a      	strh	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	2000008e 	.word	0x2000008e

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <Error_Handler+0x6>

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6593      	str	r3, [r2, #88]	; 0x58
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f28:	1d39      	adds	r1, r7, #4
 8000f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <__io_putchar+0x20>)
 8000f32:	f003 ff05 	bl	8004d40 <HAL_UART_Transmit>

  return ch;
 8000f36:	687b      	ldr	r3, [r7, #4]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20002290 	.word	0x20002290

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 fa62 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f002 fa4b 	bl	8003438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Channel1_IRQHandler+0x10>)
 8000fae:	f001 ffc9 	bl	8002f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000010c 	.word	0x2000010c

08000fbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Channel3_IRQHandler+0x10>)
 8000fc2:	f001 ffbf 	bl	8002f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000168 	.word	0x20000168

08000fd0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Channel4_IRQHandler+0x10>)
 8000fd6:	f001 ffb5 	bl	8002f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001b0 	.word	0x200001b0

08000fe4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fe8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fec:	f002 fa24 	bl	8003438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e00a      	b.n	800101c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001006:	f3af 8000 	nop.w
 800100a:	4601      	mov	r1, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf0      	blt.n	8001006 <_read+0x12>
	}

return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e009      	b.n	8001054 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff69 	bl	8000f20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf1      	blt.n	8001040 <_write+0x12>
	}
	return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108e:	605a      	str	r2, [r3, #4]
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f004 fa24 	bl	800554c <__errno>
 8001104:	4602      	mov	r2, r0
 8001106:	230c      	movs	r3, #12
 8001108:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20010000 	.word	0x20010000
 8001130:	00000400 	.word	0x00000400
 8001134:	2000009c 	.word	0x2000009c
 8001138:	20002318 	.word	0x20002318

0800113c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <SystemInit+0x64>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <SystemInit+0x64>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <SystemInit+0x68>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <SystemInit+0x68>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <SystemInit+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <SystemInit+0x68>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <SystemInit+0x68>)
 8001168:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800116c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001170:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <SystemInit+0x68>)
 8001174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001178:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <SystemInit+0x68>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <SystemInit+0x68>)
 8001180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <SystemInit+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SystemInit+0x64>)
 800118e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001192:	609a      	str	r2, [r3, #8]
#endif
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	40021000 	.word	0x40021000

080011a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_TIM6_Init+0x64>)
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <MX_TIM6_Init+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_TIM6_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_TIM6_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1665;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_TIM6_Init+0x64>)
 80011cc:	f240 6281 	movw	r2, #1665	; 0x681
 80011d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_TIM6_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM6_Init+0x64>)
 80011da:	f003 fbf5 	bl	80049c8 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011e4:	f7ff fe74 	bl	8000ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011e8:	2320      	movs	r3, #32
 80011ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM6_Init+0x64>)
 80011f6:	f003 fcef 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001200:	f7ff fe66 	bl	8000ed0 <Error_Handler>
  }

}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20002244 	.word	0x20002244
 8001210:	40001000 	.word	0x40001000

08001214 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_TIM_Base_MspInit+0x38>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10b      	bne.n	800123e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40001000 	.word	0x40001000
 8001250:	40021000 	.word	0x40021000

08001254 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_USART2_UART_Init+0x58>)
 800125a:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <MX_USART2_UART_Init+0x5c>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_USART2_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART2_UART_Init+0x58>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART2_UART_Init+0x58>)
 8001298:	f003 fd04 	bl	8004ca4 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012a2:	f7ff fe15 	bl	8000ed0 <Error_Handler>
  }

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20002290 	.word	0x20002290
 80012b0:	40004400 	.word	0x40004400

080012b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a20      	ldr	r2, [pc, #128]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d13a      	bne.n	800134c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_UART_MspInit+0xa4>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_UART_MspInit+0xa4>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_UART_MspInit+0xa4>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_UART_MspInit+0xa4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_UART_MspInit+0xa4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_UART_MspInit+0xa4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001306:	2304      	movs	r3, #4
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001316:	2307      	movs	r3, #7
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f001 feee 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800133a:	2303      	movs	r3, #3
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f001 fedc 	bl	8003104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40004400 	.word	0x40004400
 8001358:	40021000 	.word	0x40021000

0800135c <Reset_Handler>:
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopForever+0x2>
 8001360:	f7ff feec 	bl	800113c <SystemInit>
 8001364:	2100      	movs	r1, #0
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <LoopForever+0x6>)
 800136a:	585b      	ldr	r3, [r3, r1]
 800136c:	5043      	str	r3, [r0, r1]
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <LoopForever+0xa>)
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <LoopForever+0xe>)
 8001374:	1842      	adds	r2, r0, r1
 8001376:	429a      	cmp	r2, r3
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopForever+0x12>)
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
 800137e:	2300      	movs	r3, #0
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <LoopForever+0x16>)
 8001386:	429a      	cmp	r2, r3
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>
 800138a:	f004 f8e5 	bl	8005558 <__libc_init_array>
 800138e:	f7ff fc39 	bl	8000c04 <main>

08001392 <LoopForever>:
 8001392:	e7fe      	b.n	8001392 <LoopForever>
 8001394:	20010000 	.word	0x20010000
 8001398:	08005f64 	.word	0x08005f64
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000070 	.word	0x20000070
 80013a4:	20000070 	.word	0x20000070
 80013a8:	20002318 	.word	0x20002318

080013ac <ADC1_IRQHandler>:
 80013ac:	e7fe      	b.n	80013ac <ADC1_IRQHandler>

080013ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f001 f9c7 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f80e 	bl	80013e0 <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	e001      	b.n	80013d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d0:	f7ff fd82 	bl	8000ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_InitTick+0x6c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_InitTick+0x70>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_InitTick+0x6c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f001 f9d3 	bl	80027b6 <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10f      	bne.n	8001436 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d809      	bhi.n	8001430 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f001 f99d 	bl	8002762 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_InitTick+0x74>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e007      	b.n	8001440 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e004      	b.n	8001440 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e001      	b.n	8001440 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008
 8001450:	20000000 	.word	0x20000000
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	20002310 	.word	0x20002310

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20002310 	.word	0x20002310

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_Delay+0x40>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000008 	.word	0x20000008

080014dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3360      	adds	r3, #96	; 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <LL_ADC_SetOffset+0x44>)
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	4313      	orrs	r3, r2
 8001574:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	03fff000 	.word	0x03fff000

0800158c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3360      	adds	r3, #96	; 0x60
 800159a:	461a      	mov	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3360      	adds	r3, #96	; 0x60
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3330      	adds	r3, #48	; 0x30
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	4413      	add	r3, r2
 8001632:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	211f      	movs	r1, #31
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	f003 011f 	and.w	r1, r3, #31
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	431a      	orrs	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3314      	adds	r3, #20
 800167c:	461a      	mov	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	0e5b      	lsrs	r3, r3, #25
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	4413      	add	r3, r2
 800168a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	0d1b      	lsrs	r3, r3, #20
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	2107      	movs	r1, #7
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	401a      	ands	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	0d1b      	lsrs	r3, r3, #20
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0318 	and.w	r3, r3, #24
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016e8:	40d9      	lsrs	r1, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	400b      	ands	r3, r1
 80016ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f2:	431a      	orrs	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	0007ffff 	.word	0x0007ffff

0800170c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800171c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6093      	str	r3, [r2, #8]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001744:	d101      	bne.n	800174a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001768:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800176c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001794:	d101      	bne.n	800179a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_IsEnabled+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_IsEnabled+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001806:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800180a:	f043 0204 	orr.w	r2, r3, #4
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b04      	cmp	r3, #4
 8001830:	d101      	bne.n	8001836 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b08      	cmp	r3, #8
 8001856:	d101      	bne.n	800185c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e12a      	b.n	8001adc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7fe fed5 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff3f 	bl	8001730 <LL_ADC_IsDeepPowerDownEnabled>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff25 	bl	800170c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff5a 	bl	8001780 <LL_ADC_IsInternalRegulatorEnabled>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d113      	bne.n	80018fa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff3e 	bl	8001758 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018dc:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_ADC_Init+0x278>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	4a81      	ldr	r2, [pc, #516]	; (8001ae8 <HAL_ADC_Init+0x27c>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff3e 	bl	8001780 <LL_ADC_IsInternalRegulatorEnabled>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10d      	bne.n	8001926 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff77 	bl	800181e <LL_ADC_REG_IsConversionOngoing>
 8001930:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 80c5 	bne.w	8001aca <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80c1 	bne.w	8001aca <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001950:	f043 0202 	orr.w	r2, r3, #2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff37 	bl	80017d0 <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001968:	4860      	ldr	r0, [pc, #384]	; (8001aec <HAL_ADC_Init+0x280>)
 800196a:	f7ff ff31 	bl	80017d0 <LL_ADC_IsEnabled>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4619      	mov	r1, r3
 800197a:	485d      	ldr	r0, [pc, #372]	; (8001af0 <HAL_ADC_Init+0x284>)
 800197c:	f7ff fdae 	bl	80014dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e5b      	ldrb	r3, [r3, #25]
 8001984:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001990:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001996:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	3b01      	subs	r3, #1
 80019b4:	045b      	lsls	r3, r3, #17
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_ADC_Init+0x288>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff14 	bl	800181e <LL_ADC_REG_IsConversionOngoing>
 80019f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff21 	bl	8001844 <LL_ADC_INJ_IsConversionOngoing>
 8001a02:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d13d      	bne.n	8001a86 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d13a      	bne.n	8001a86 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a14:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a1c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a2c:	f023 0302 	bic.w	r3, r3, #2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	69b9      	ldr	r1, [r7, #24]
 8001a36:	430b      	orrs	r3, r1
 8001a38:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d118      	bne.n	8001a76 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a66:	430a      	orrs	r2, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	e007      	b.n	8001a86 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f023 010f 	bic.w	r1, r3, #15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa6:	e007      	b.n	8001ab8 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 020f 	bic.w	r2, r2, #15
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f023 0303 	bic.w	r3, r3, #3
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac8:	e007      	b.n	8001ada <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	053e2d63 	.word	0x053e2d63
 8001aec:	50040000 	.word	0x50040000
 8001af0:	50040300 	.word	0x50040300
 8001af4:	fff0c007 	.word	0xfff0c007

08001af8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fe88 	bl	800181e <LL_ADC_REG_IsConversionOngoing>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d167      	bne.n	8001be4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_Start_DMA+0x2a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e063      	b.n	8001bea <HAL_ADC_Start_DMA+0xf2>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fc50 	bl	80023d0 <ADC_Enable>
 8001b30:	4603      	mov	r3, r0
 8001b32:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d14f      	bne.n	8001bda <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f023 0206 	bic.w	r2, r3, #6
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58
 8001b66:	e002      	b.n	8001b6e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_ADC_Start_DMA+0xfc>)
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_ADC_Start_DMA+0x100>)
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_ADC_Start_DMA+0x104>)
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	221c      	movs	r2, #28
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0210 	orr.w	r2, r2, #16
 8001ba4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3340      	adds	r3, #64	; 0x40
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f001 f95d 	bl	8002e84 <HAL_DMA_Start_IT>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fe0f 	bl	80017f6 <LL_ADC_REG_StartConversion>
 8001bd8:	e006      	b.n	8001be8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001be2:	e001      	b.n	8001be8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
 8001be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08002485 	.word	0x08002485
 8001bf8:	0800255d 	.word	0x0800255d
 8001bfc:	08002579 	.word	0x08002579

08001c00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0b6      	sub	sp, #216	; 0xd8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x22>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e3b8      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x794>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fdeb 	bl	800181e <LL_ADC_REG_IsConversionOngoing>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 839d 	bne.w	800238a <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d824      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	3b02      	subs	r3, #2
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d81b      	bhi.n	8001c9a <HAL_ADC_ConfigChannel+0x86>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <HAL_ADC_ConfigChannel+0x54>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c81 	.word	0x08001c81
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c91 	.word	0x08001c91
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	605a      	str	r2, [r3, #4]
          break;
 8001c7e:	e011      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2212      	movs	r2, #18
 8001c84:	605a      	str	r2, [r3, #4]
          break;
 8001c86:	e00d      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2218      	movs	r2, #24
 8001c8c:	605a      	str	r2, [r3, #4]
          break;
 8001c8e:	e009      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c96:	605a      	str	r2, [r3, #4]
          break;
 8001c98:	e004      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	605a      	str	r2, [r3, #4]
          break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ca2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f7ff fcaf 	bl	8001614 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fdaf 	bl	800181e <LL_ADC_REG_IsConversionOngoing>
 8001cc0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fdbb 	bl	8001844 <LL_ADC_INJ_IsConversionOngoing>
 8001cce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 81a6 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 81a1 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f7ff fcba 	bl	800166c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	08db      	lsrs	r3, r3, #3
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d00a      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6919      	ldr	r1, [r3, #16]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d2a:	f7ff fc0b 	bl	8001544 <LL_ADC_SetOffset>
 8001d2e:	e17b      	b.n	8002028 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fc28 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x148>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc1d 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	0e9b      	lsrs	r3, r3, #26
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	e01e      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x186>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc12 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e004      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x19e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	e018      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e004      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fbe1 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fbc5 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x20e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fbba 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	e01e      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x24c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fbaf 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e004      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x264>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	e018      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x296>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e004      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fb7e 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb62 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x2d4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fb57 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x312>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2102      	movs	r1, #2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fb4c 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e004      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x32a>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	e016      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x358>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e004      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d106      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2102      	movs	r1, #2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fb1d 	bl	80015b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2103      	movs	r1, #3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fb01 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x396>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2103      	movs	r1, #3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff faf6 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	0e9b      	lsrs	r3, r3, #26
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	e017      	b.n	8001fda <HAL_ADC_ConfigChannel+0x3c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2103      	movs	r1, #3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff faeb 	bl	800158c <LL_ADC_GetOffsetChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e003      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x3de>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	e011      	b.n	8002016 <HAL_ADC_ConfigChannel+0x402>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002016:	429a      	cmp	r2, r3
 8002018:	d106      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	2103      	movs	r1, #3
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fac8 	bl	80015b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fbcf 	bl	80017d0 <LL_ADC_IsEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 813f 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	461a      	mov	r2, r3
 8002048:	f7ff fb3c 	bl	80016c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a8e      	ldr	r2, [pc, #568]	; (800228c <HAL_ADC_ConfigChannel+0x678>)
 8002052:	4293      	cmp	r3, r2
 8002054:	f040 8130 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x46c>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2b09      	cmp	r3, #9
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e019      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x4a0>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800208e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002090:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e003      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800209c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	bf94      	ite	ls
 80020ae:	2301      	movls	r3, #1
 80020b0:	2300      	movhi	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d079      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x4c0>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	3301      	adds	r3, #1
 80020cc:	069b      	lsls	r3, r3, #26
 80020ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d2:	e015      	b.n	8002100 <HAL_ADC_ConfigChannel+0x4ec>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80020ec:	2320      	movs	r3, #32
 80020ee:	e003      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80020f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x50c>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	3301      	adds	r3, #1
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	e017      	b.n	8002150 <HAL_ADC_ConfigChannel+0x53c>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800212e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e003      	b.n	8002144 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800213c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	ea42 0103 	orr.w	r1, r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x562>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	3301      	adds	r3, #1
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	051b      	lsls	r3, r3, #20
 8002174:	e018      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x594>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e003      	b.n	800219a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a8:	430b      	orrs	r3, r1
 80021aa:	e080      	b.n	80022ae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x5b4>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	3301      	adds	r3, #1
 80021c0:	069b      	lsls	r3, r3, #26
 80021c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c6:	e015      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x5e0>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e003      	b.n	80021ec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	069b      	lsls	r3, r3, #26
 80021f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x600>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	3301      	adds	r3, #1
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	e017      	b.n	8002244 <HAL_ADC_ConfigChannel+0x630>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	61fb      	str	r3, [r7, #28]
  return result;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e003      	b.n	8002238 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	ea42 0103 	orr.w	r1, r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x65c>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	3301      	adds	r3, #1
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	3b1e      	subs	r3, #30
 8002268:	051b      	lsls	r3, r3, #20
 800226a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226e:	e01d      	b.n	80022ac <HAL_ADC_ConfigChannel+0x698>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	613b      	str	r3, [r7, #16]
  return result;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e005      	b.n	8002298 <HAL_ADC_ConfigChannel+0x684>
 800228c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b1e      	subs	r3, #30
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ac:	430b      	orrs	r3, r1
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	6892      	ldr	r2, [r2, #8]
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7ff f9da 	bl	800166c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <HAL_ADC_ConfigChannel+0x79c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d06b      	beq.n	800239c <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c4:	483b      	ldr	r0, [pc, #236]	; (80023b4 <HAL_ADC_ConfigChannel+0x7a0>)
 80022c6:	f7ff f92f 	bl	8001528 <LL_ADC_GetCommonPathInternalCh>
 80022ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_ADC_ConfigChannel+0x7a4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d126      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d120      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a34      	ldr	r2, [pc, #208]	; (80023bc <HAL_ADC_ConfigChannel+0x7a8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d156      	bne.n	800239c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f6:	4619      	mov	r1, r3
 80022f8:	482e      	ldr	r0, [pc, #184]	; (80023b4 <HAL_ADC_ConfigChannel+0x7a0>)
 80022fa:	f7ff f902 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	099a      	lsrs	r2, r3, #6
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002316:	e002      	b.n	800231e <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3b01      	subs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002324:	e03a      	b.n	800239c <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_ADC_ConfigChannel+0x7b4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d113      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x744>
 8002330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_ADC_ConfigChannel+0x7a8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d12a      	bne.n	800239c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	4619      	mov	r1, r3
 8002350:	4818      	ldr	r0, [pc, #96]	; (80023b4 <HAL_ADC_ConfigChannel+0x7a0>)
 8002352:	f7ff f8d6 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002356:	e021      	b.n	800239c <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_ADC_ConfigChannel+0x7b8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11c      	bne.n	800239c <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_ADC_ConfigChannel+0x7a8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002380:	4619      	mov	r1, r3
 8002382:	480c      	ldr	r0, [pc, #48]	; (80023b4 <HAL_ADC_ConfigChannel+0x7a0>)
 8002384:	f7ff f8bd 	bl	8001502 <LL_ADC_SetCommonPathInternalCh>
 8002388:	e008      	b.n	800239c <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f043 0220 	orr.w	r2, r3, #32
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	37d8      	adds	r7, #216	; 0xd8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	80080000 	.word	0x80080000
 80023b4:	50040300 	.word	0x50040300
 80023b8:	c7520000 	.word	0xc7520000
 80023bc:	50040000 	.word	0x50040000
 80023c0:	20000000 	.word	0x20000000
 80023c4:	053e2d63 	.word	0x053e2d63
 80023c8:	cb840000 	.word	0xcb840000
 80023cc:	80000001 	.word	0x80000001

080023d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f9f7 	bl	80017d0 <LL_ADC_IsEnabled>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d146      	bne.n	8002476 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <ADC_Enable+0xb0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e032      	b.n	8002478 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f9c6 	bl	80017a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800241c:	f7ff f830 	bl	8001480 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002422:	e021      	b.n	8002468 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f9d1 	bl	80017d0 <LL_ADC_IsEnabled>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d104      	bne.n	800243e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f9b5 	bl	80017a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800243e:	f7ff f81f 	bl	8001480 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d90d      	bls.n	8002468 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f043 0210 	orr.w	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d1d6      	bne.n	8002424 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	8000003f 	.word	0x8000003f

08002484 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	d14b      	bne.n	8002536 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d021      	beq.n	80024fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f896 	bl	80015ee <LL_ADC_REG_IsTriggerSourceSWStart>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d032      	beq.n	800252e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d12b      	bne.n	800252e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11f      	bne.n	800252e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
 80024fa:	e018      	b.n	800252e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d111      	bne.n	800252e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7fe fc76 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002534:	e00e      	b.n	8002554 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7ff fb5c 	bl	8001c00 <HAL_ADC_ErrorCallback>
}
 8002548:	e004      	b.n	8002554 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7fe fc32 	bl	8000dd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7ff fb2e 	bl	8001c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff3e 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff8e 	bl	80026a0 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff31 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e014      	b.n	800280a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	791b      	ldrb	r3, [r3, #4]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fd ffed 	bl	80007d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	795b      	ldrb	r3, [r3, #5]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_DAC_Start_DMA+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e09e      	b.n	8002970 <HAL_DAC_Start_DMA+0x15c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2202      	movs	r2, #2
 800283c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d12a      	bne.n	800289a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_DAC_Start_DMA+0x164>)
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a4a      	ldr	r2, [pc, #296]	; (800297c <HAL_DAC_Start_DMA+0x168>)
 8002852:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a49      	ldr	r2, [pc, #292]	; (8002980 <HAL_DAC_Start_DMA+0x16c>)
 800285a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800286a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d009      	beq.n	8002886 <HAL_DAC_Start_DMA+0x72>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d00c      	beq.n	8002890 <HAL_DAC_Start_DMA+0x7c>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d000      	beq.n	800287c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800287a:	e039      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3308      	adds	r3, #8
 8002882:	613b      	str	r3, [r7, #16]
        break;
 8002884:	e034      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	613b      	str	r3, [r7, #16]
        break;
 800288e:	e02f      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3310      	adds	r3, #16
 8002896:	613b      	str	r3, [r7, #16]
        break;
 8002898:	e02a      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_DAC_Start_DMA+0x170>)
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a38      	ldr	r2, [pc, #224]	; (8002988 <HAL_DAC_Start_DMA+0x174>)
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4a37      	ldr	r2, [pc, #220]	; (800298c <HAL_DAC_Start_DMA+0x178>)
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d009      	beq.n	80028dc <HAL_DAC_Start_DMA+0xc8>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00c      	beq.n	80028e6 <HAL_DAC_Start_DMA+0xd2>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d000      	beq.n	80028d2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80028d0:	e00e      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3314      	adds	r3, #20
 80028d8:	613b      	str	r3, [r7, #16]
        break;
 80028da:	e009      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3318      	adds	r3, #24
 80028e2:	613b      	str	r3, [r7, #16]
        break;
 80028e4:	e004      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	331c      	adds	r3, #28
 80028ec:	613b      	str	r3, [r7, #16]
        break;
 80028ee:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d111      	bne.n	800291a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002904:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6898      	ldr	r0, [r3, #8]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	f000 fab8 	bl	8002e84 <HAL_DMA_Start_IT>
 8002914:	4603      	mov	r3, r0
 8002916:	75fb      	strb	r3, [r7, #23]
 8002918:	e010      	b.n	800293c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002928:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68d8      	ldr	r0, [r3, #12]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	f000 faa6 	bl	8002e84 <HAL_DMA_Start_IT>
 8002938:	4603      	mov	r3, r0
 800293a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2201      	movs	r2, #1
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e005      	b.n	800296e <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	08002c01 	.word	0x08002c01
 800297c:	08002c23 	.word	0x08002c23
 8002980:	08002c3f 	.word	0x08002c3f
 8002984:	08002ca9 	.word	0x08002ca9
 8002988:	08002ccb 	.word	0x08002ccb
 800298c:	08002ce7 	.word	0x08002ce7

08002990 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	795b      	ldrb	r3, [r3, #5]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_DAC_ConfigChannel+0x1c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e107      	b.n	8002bf8 <HAL_DAC_ConfigChannel+0x22c>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2202      	movs	r2, #2
 80029f2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d174      	bne.n	8002ae6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fd40 	bl	8001480 <HAL_GetTick>
 8002a00:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d134      	bne.n	8002a72 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a08:	e011      	b.n	8002a2e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a0a:	f7fe fd39 	bl	8001480 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d90a      	bls.n	8002a2e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2203      	movs	r2, #3
 8002a28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0e4      	b.n	8002bf8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e6      	bne.n	8002a0a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7fe fd2b 	bl	8001498 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	6992      	ldr	r2, [r2, #24]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4c:	e01e      	b.n	8002a8c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a4e:	f7fe fd17 	bl	8001480 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d90a      	bls.n	8002a72 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f043 0208 	orr.w	r2, r3, #8
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0c2      	b.n	8002bf8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	dbe8      	blt.n	8002a4e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7fe fd0b 	bl	8001498 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	6992      	ldr	r2, [r2, #24]
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	ea02 0103 	and.w	r1, r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	21ff      	movs	r1, #255	; 0xff
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	ea02 0103 	and.w	r1, r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d11d      	bne.n	8002b2a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	221f      	movs	r2, #31
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2207      	movs	r2, #7
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	22c0      	movs	r2, #192	; 0xc0
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43da      	mvns	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	400a      	ands	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff febe 	bl	8002990 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	711a      	strb	r2, [r3, #4]
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff feb7 	bl	80029a4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff fead 	bl	80029b8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	711a      	strb	r2, [r3, #4]
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ffd8 	bl	8002c6c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	711a      	strb	r2, [r3, #4]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff ffd1 	bl	8002c80 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff ffc7 	bl	8002c94 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	711a      	strb	r2, [r3, #4]
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e098      	b.n	8002e58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_DMA_Init+0x150>)
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d80f      	bhi.n	8002d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_DMA_Init+0x154>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	; (8002e6c <HAL_DMA_Init+0x158>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a48      	ldr	r2, [pc, #288]	; (8002e70 <HAL_DMA_Init+0x15c>)
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d50:	e00e      	b.n	8002d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_DMA_Init+0x160>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_DMA_Init+0x158>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <HAL_DMA_Init+0x164>)
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dca:	d039      	beq.n	8002e40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <HAL_DMA_Init+0x15c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d11a      	bne.n	8002e0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f003 031c 	and.w	r3, r3, #28
 8002de2:	210f      	movs	r1, #15
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4924      	ldr	r1, [pc, #144]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f003 031c 	and.w	r3, r3, #28
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	491d      	ldr	r1, [pc, #116]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
 8002e0a:	e019      	b.n	8002e40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	f003 031c 	and.w	r3, r3, #28
 8002e18:	210f      	movs	r1, #15
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	4917      	ldr	r1, [pc, #92]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f003 031c 	and.w	r3, r3, #28
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	4911      	ldr	r1, [pc, #68]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40020407 	.word	0x40020407
 8002e68:	bffdfff8 	.word	0xbffdfff8
 8002e6c:	cccccccd 	.word	0xcccccccd
 8002e70:	40020000 	.word	0x40020000
 8002e74:	bffdfbf8 	.word	0xbffdfbf8
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	400200a8 	.word	0x400200a8
 8002e80:	400204a8 	.word	0x400204a8

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Start_IT+0x20>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e04b      	b.n	8002f3c <HAL_DMA_Start_IT+0xb8>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d13a      	bne.n	8002f2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f8e0 	bl	80030a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 020e 	orr.w	r2, r2, #14
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e00f      	b.n	8002f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 020a 	orr.w	r2, r2, #10
 8002f1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e005      	b.n	8002f3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f003 031c 	and.w	r3, r3, #28
 8002f64:	2204      	movs	r2, #4
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d026      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x7a>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d021      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f003 021c 	and.w	r2, r3, #28
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d071      	beq.n	8003098 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	e06c      	b.n	8003098 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 031c 	and.w	r3, r3, #28
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02e      	beq.n	8003030 <HAL_DMA_IRQHandler+0xec>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d029      	beq.n	8003030 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 020a 	bic.w	r2, r2, #10
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 021c 	and.w	r2, r3, #28
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2102      	movs	r1, #2
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d038      	beq.n	8003098 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800302e:	e033      	b.n	8003098 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f003 031c 	and.w	r3, r3, #28
 8003038:	2208      	movs	r2, #8
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02a      	beq.n	800309a <HAL_DMA_IRQHandler+0x156>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d025      	beq.n	800309a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020e 	bic.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f003 021c 	and.w	r2, r3, #28
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003098:	bf00      	nop
 800309a:	bf00      	nop
}
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f003 021c 	and.w	r2, r3, #28
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f202 	lsl.w	r2, r1, r2
 80030c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d108      	bne.n	80030e6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030e4:	e007      	b.n	80030f6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	60da      	str	r2, [r3, #12]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003112:	e148      	b.n	80033a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 813a 	beq.w	80033a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d00b      	beq.n	800314c <HAL_GPIO_Init+0x48>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d007      	beq.n	800314c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003140:	2b11      	cmp	r3, #17
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b12      	cmp	r3, #18
 800314a:	d130      	bne.n	80031ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003182:	2201      	movs	r2, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 0201 	and.w	r2, r3, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0xea>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b12      	cmp	r3, #18
 80031ec:	d123      	bne.n	8003236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	08da      	lsrs	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3208      	adds	r2, #8
 8003230:	6939      	ldr	r1, [r7, #16]
 8003232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0203 	and.w	r2, r3, #3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8094 	beq.w	80033a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003278:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <HAL_GPIO_Init+0x2c0>)
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <HAL_GPIO_Init+0x2c0>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6613      	str	r3, [r2, #96]	; 0x60
 8003284:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_GPIO_Init+0x2c0>)
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_GPIO_Init+0x2c4>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	220f      	movs	r2, #15
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ba:	d00d      	beq.n	80032d8 <HAL_GPIO_Init+0x1d4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a43      	ldr	r2, [pc, #268]	; (80033cc <HAL_GPIO_Init+0x2c8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_GPIO_Init+0x1d0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_GPIO_Init+0x2cc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_GPIO_Init+0x1cc>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e004      	b.n	80032da <HAL_GPIO_Init+0x1d6>
 80032d0:	2307      	movs	r3, #7
 80032d2:	e002      	b.n	80032da <HAL_GPIO_Init+0x1d6>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_GPIO_Init+0x1d6>
 80032d8:	2300      	movs	r3, #0
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	f002 0203 	and.w	r2, r2, #3
 80032e0:	0092      	lsls	r2, r2, #2
 80032e2:	4093      	lsls	r3, r2
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ea:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_GPIO_Init+0x2c4>)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331c:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003322:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003346:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003370:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339a:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_GPIO_Init+0x2d0>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f aeaf 	bne.w	8003114 <HAL_GPIO_Init+0x10>
  }
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010000 	.word	0x40010000
 80033cc:	48000400 	.word	0x48000400
 80033d0:	48000800 	.word	0x48000800
 80033d4:	40010400 	.word	0x40010400

080033d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e001      	b.n	80033fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
 8003414:	4613      	mov	r3, r2
 8003416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003418:	787b      	ldrb	r3, [r7, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003424:	e002      	b.n	800342c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd fd08 	bl	8000e6c <HAL_GPIO_EXTI_Callback>
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e081      	b.n	800357e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fb2e 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	e006      	b.n	80034f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d104      	bne.n	8003502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	ea42 0103 	orr.w	r1, r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69d9      	ldr	r1, [r3, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b20      	cmp	r3, #32
 800359a:	d138      	bne.n	800360e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e032      	b.n	8003610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	; 0x24
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0201 	orr.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d139      	bne.n	80036a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800363c:	2302      	movs	r3, #2
 800363e:	e033      	b.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800366e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40007000 	.word	0x40007000

080036d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_PWREx_GetVoltageRange+0x18>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40007000 	.word	0x40007000

080036f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d130      	bne.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d038      	beq.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003716:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2232      	movs	r2, #50	; 0x32
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0c9b      	lsrs	r3, r3, #18
 8003730:	3301      	adds	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003734:	e002      	b.n	800373c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b01      	subs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d102      	bne.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x60>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f2      	bne.n	8003736 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375c:	d110      	bne.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e00f      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376e:	d007      	beq.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800377e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40007000 	.word	0x40007000
 8003794:	20000000 	.word	0x20000000
 8003798:	431bde83 	.word	0x431bde83

0800379c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f000 bc11 	b.w	8003fd2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b0:	4ba0      	ldr	r3, [pc, #640]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ba:	4b9e      	ldr	r3, [pc, #632]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80e4 	beq.w	800399a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4c>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	f040 808b 	bne.w	80038f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	f040 8087 	bne.w	80038f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e8:	4b92      	ldr	r3, [pc, #584]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_OscConfig+0x64>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e3e8      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1a      	ldr	r2, [r3, #32]
 8003804:	4b8b      	ldr	r3, [pc, #556]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_RCC_OscConfig+0x7e>
 8003810:	4b88      	ldr	r3, [pc, #544]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	e005      	b.n	8003826 <HAL_RCC_OscConfig+0x8a>
 800381a:	4b86      	ldr	r3, [pc, #536]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	4293      	cmp	r3, r2
 8003828:	d223      	bcs.n	8003872 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd78 	bl	8004324 <RCC_SetFlashLatencyFromMSIRange>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e3c9      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383e:	4b7d      	ldr	r3, [pc, #500]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4977      	ldr	r1, [pc, #476]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385c:	4b75      	ldr	r3, [pc, #468]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	4972      	ldr	r1, [pc, #456]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	e025      	b.n	80038be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003872:	4b70      	ldr	r3, [pc, #448]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6f      	ldr	r2, [pc, #444]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b6d      	ldr	r3, [pc, #436]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	496a      	ldr	r1, [pc, #424]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	4965      	ldr	r1, [pc, #404]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fd38 	bl	8004324 <RCC_SetFlashLatencyFromMSIRange>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e389      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038be:	f000 fc6f 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 80038c2:	4601      	mov	r1, r0
 80038c4:	4b5b      	ldr	r3, [pc, #364]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a5a      	ldr	r2, [pc, #360]	; (8003a38 <HAL_RCC_OscConfig+0x29c>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	fa21 f303 	lsr.w	r3, r1, r3
 80038da:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_OscConfig+0x2a0>)
 80038dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_OscConfig+0x2a4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fd7c 	bl	80013e0 <HAL_InitTick>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d052      	beq.n	8003998 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	e36d      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d032      	beq.n	8003964 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038fe:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a4c      	ldr	r2, [pc, #304]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800390a:	f7fd fdb9 	bl	8001480 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003912:	f7fd fdb5 	bl	8001480 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e356      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003924:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003930:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3f      	ldr	r2, [pc, #252]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003936:	f043 0308 	orr.w	r3, r3, #8
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	493a      	ldr	r1, [pc, #232]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800394e:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	4935      	ldr	r1, [pc, #212]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
 8003962:	e01a      	b.n	800399a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003964:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003970:	f7fd fd86 	bl	8001480 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003978:	f7fd fd82 	bl	8001480 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e323      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1dc>
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d073      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_OscConfig+0x21c>
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d10e      	bne.n	80039d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d063      	beq.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d15f      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e300      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x24c>
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0x288>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x270>
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a0f      	ldr	r2, [pc, #60]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0x288>
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fd28 	bl	8001480 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	e010      	b.n	8003a56 <HAL_RCC_OscConfig+0x2ba>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08005ea8 	.word	0x08005ea8
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fd fd1c 	bl	8001480 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e2bd      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a56:	4baf      	ldr	r3, [pc, #700]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x2a8>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fd0c 	bl	8001480 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fd fd08 	bl	8001480 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e2a9      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7e:	4ba5      	ldr	r3, [pc, #660]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x2d0>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d060      	beq.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_OscConfig+0x310>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d116      	bne.n	8003ada <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aac:	4b99      	ldr	r3, [pc, #612]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x328>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e286      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b93      	ldr	r3, [pc, #588]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	4990      	ldr	r1, [pc, #576]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad8:	e040      	b.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d023      	beq.n	8003b2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae2:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a8b      	ldr	r2, [pc, #556]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd fcc7 	bl	8001480 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fd fcc3 	bl	8001480 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e264      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b08:	4b82      	ldr	r3, [pc, #520]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b7f      	ldr	r3, [pc, #508]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	497c      	ldr	r1, [pc, #496]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
 8003b28:	e018      	b.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a79      	ldr	r2, [pc, #484]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fd fca3 	bl	8001480 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7fd fc9f 	bl	8001480 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e240      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b50:	4b70      	ldr	r3, [pc, #448]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d03c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01c      	beq.n	8003baa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fd fc7e 	bl	8001480 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fd fc7a 	bl	8001480 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e21b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9a:	4b5e      	ldr	r3, [pc, #376]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <HAL_RCC_OscConfig+0x3ec>
 8003ba8:	e01b      	b.n	8003be2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003baa:	4b5a      	ldr	r3, [pc, #360]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fd fc61 	bl	8001480 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fc5d 	bl	8001480 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1fe      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ef      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80a6 	beq.w	8003d3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bf4:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c00:	4b44      	ldr	r3, [pc, #272]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	4a43      	ldr	r2, [pc, #268]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c0c:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c1c:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCC_OscConfig+0x57c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d118      	bne.n	8003c5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_OscConfig+0x57c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_RCC_OscConfig+0x57c>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c34:	f7fd fc24 	bl	8001480 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd fc20 	bl	8001480 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1c1      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4e:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCC_OscConfig+0x57c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d108      	bne.n	8003c74 <HAL_RCC_OscConfig+0x4d8>
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c72:	e024      	b.n	8003cbe <HAL_RCC_OscConfig+0x522>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d110      	bne.n	8003c9e <HAL_RCC_OscConfig+0x502>
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c9c:	e00f      	b.n	8003cbe <HAL_RCC_OscConfig+0x522>
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003cb6:	f023 0304 	bic.w	r3, r3, #4
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fbdb 	bl	8001480 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd fbd7 	bl	8001480 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e176      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_OscConfig+0x578>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ed      	beq.n	8003cce <HAL_RCC_OscConfig+0x532>
 8003cf2:	e01a      	b.n	8003d2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fbc4 	bl	8001480 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cfa:	e00f      	b.n	8003d1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd fbc0 	bl	8001480 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d906      	bls.n	8003d1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e15f      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d1c:	4baa      	ldr	r3, [pc, #680]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e8      	bne.n	8003cfc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d30:	4ba5      	ldr	r3, [pc, #660]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	4aa4      	ldr	r2, [pc, #656]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d03c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d50:	4b9d      	ldr	r3, [pc, #628]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d56:	4a9c      	ldr	r2, [pc, #624]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd fb8e 	bl	8001480 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d68:	f7fd fb8a 	bl	8001480 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e12b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d7a:	4b93      	ldr	r3, [pc, #588]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ef      	beq.n	8003d68 <HAL_RCC_OscConfig+0x5cc>
 8003d88:	e01b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d8a:	4b8f      	ldr	r3, [pc, #572]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d90:	4a8d      	ldr	r2, [pc, #564]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fb71 	bl	8001480 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da2:	f7fd fb6d 	bl	8001480 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e10e      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003db4:	4b84      	ldr	r3, [pc, #528]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1ef      	bne.n	8003da2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8102 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	f040 80c5 	bne.w	8003f60 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dd6:	4b7c      	ldr	r3, [pc, #496]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0203 	and.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d12c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	3b01      	subs	r3, #1
 8003df6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d123      	bne.n	8003e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d11b      	bne.n	8003e44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d113      	bne.n	8003e44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d067      	beq.n	8003f14 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d062      	beq.n	8003f10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0bb      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b5b      	ldr	r3, [pc, #364]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5a      	ldr	r2, [pc, #360]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e66:	f7fd fb0b 	bl	8001480 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fd fb07 	bl	8001480 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0a8      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e80:	4b51      	ldr	r3, [pc, #324]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8c:	4b4e      	ldr	r3, [pc, #312]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	4b4e      	ldr	r3, [pc, #312]	; (8003fcc <HAL_RCC_OscConfig+0x830>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e9c:	3a01      	subs	r2, #1
 8003e9e:	0112      	lsls	r2, r2, #4
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ea6:	0212      	lsls	r2, r2, #8
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eae:	0852      	lsrs	r2, r2, #1
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0552      	lsls	r2, r2, #21
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eba:	0852      	lsrs	r2, r2, #1
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	0652      	lsls	r2, r2, #25
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec6:	06d2      	lsls	r2, r2, #27
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	493f      	ldr	r1, [pc, #252]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003edc:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a39      	ldr	r2, [pc, #228]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ee8:	f7fd faca 	bl	8001480 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fac6 	bl	8001480 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e067      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f0e:	e05f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e05e      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f14:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d157      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f20:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f2c:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f38:	f7fd faa2 	bl	8001480 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fa9e 	bl	8001480 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e03f      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x7a4>
 8003f5e:	e037      	b.n	8003fd0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d02d      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f70:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003f90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd fa71 	bl	8001480 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fd fa6d 	bl	8001480 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e00e      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <HAL_RCC_OscConfig+0x82c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x806>
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e005      	b.n	8003fd2 <HAL_RCC_OscConfig+0x836>
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop

08003fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0c8      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	4961      	ldr	r1, [pc, #388]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b0      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d04c      	beq.n	80040c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004034:	4b56      	ldr	r3, [pc, #344]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d121      	bne.n	8004084 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e09e      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d107      	bne.n	800405c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d115      	bne.n	8004084 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e092      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004064:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e086      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004074:	4b46      	ldr	r3, [pc, #280]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e07e      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004084:	4b42      	ldr	r3, [pc, #264]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	493f      	ldr	r1, [pc, #252]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004096:	f7fd f9f3 	bl	8001480 <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409e:	f7fd f9ef 	bl	8001480 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e066      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 020c 	and.w	r2, r3, #12
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d1eb      	bne.n	800409e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	492c      	ldr	r1, [pc, #176]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d210      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	4924      	ldr	r1, [pc, #144]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_RCC_ClockConfig+0x1b0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e036      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4918      	ldr	r1, [pc, #96]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4910      	ldr	r1, [pc, #64]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004152:	f000 f825 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 8004156:	4601      	mov	r1, r0
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCC_ClockConfig+0x1b4>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	5cd3      	ldrb	r3, [r2, r3]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	fa21 f303 	lsr.w	r3, r1, r3
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fd f932 	bl	80013e0 <HAL_InitTick>
 800417c:	4603      	mov	r3, r0
 800417e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004180:	7afb      	ldrb	r3, [r7, #11]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40022000 	.word	0x40022000
 8004190:	40021000 	.word	0x40021000
 8004194:	08005ea8 	.word	0x08005ea8
 8004198:	20000000 	.word	0x20000000
 800419c:	20000004 	.word	0x20000004

080041a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x34>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d121      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d11e      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041d4:	4b33      	ldr	r3, [pc, #204]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e0:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e005      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041fc:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10d      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d102      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e004      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d101      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004224:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004226:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d133      	bne.n	8004296 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d002      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0xa4>
 800423e:	2b03      	cmp	r3, #3
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0xaa>
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004246:	617b      	str	r3, [r7, #20]
      break;
 8004248:	e005      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800424a:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800424c:	617b      	str	r3, [r7, #20]
      break;
 800424e:	e002      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	617b      	str	r3, [r7, #20]
      break;
 8004254:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	3301      	adds	r3, #1
 8004262:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	fb02 f203 	mul.w	r2, r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0e5b      	lsrs	r3, r3, #25
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	3301      	adds	r3, #1
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004296:	69bb      	ldr	r3, [r7, #24]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3724      	adds	r7, #36	; 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40021000 	.word	0x40021000
 80042a8:	08005ec0 	.word	0x08005ec0
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000000 	.word	0x20000000

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4601      	mov	r1, r0
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042e2:	5cd3      	ldrb	r3, [r2, r3]
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	08005eb8 	.word	0x08005eb8

080042f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042fc:	f7ff ffda 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 8004300:	4601      	mov	r1, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0adb      	lsrs	r3, r3, #11
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800430e:	5cd3      	ldrb	r3, [r2, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	08005eb8 	.word	0x08005eb8

08004324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004330:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800433c:	f7ff f9ca 	bl	80036d4 <HAL_PWREx_GetVoltageRange>
 8004340:	6178      	str	r0, [r7, #20]
 8004342:	e014      	b.n	800436e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	4a24      	ldr	r2, [pc, #144]	; (80043dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434e:	6593      	str	r3, [r2, #88]	; 0x58
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800435c:	f7ff f9ba 	bl	80036d4 <HAL_PWREx_GetVoltageRange>
 8004360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004374:	d10b      	bne.n	800438e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d919      	bls.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2ba0      	cmp	r3, #160	; 0xa0
 8004380:	d902      	bls.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004382:	2302      	movs	r3, #2
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e013      	b.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004388:	2301      	movs	r3, #1
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e010      	b.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d902      	bls.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004394:	2303      	movs	r3, #3
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e00a      	b.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d102      	bne.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043a0:	2302      	movs	r3, #2
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e004      	b.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b70      	cmp	r3, #112	; 0x70
 80043aa:	d101      	bne.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043ac:	2301      	movs	r3, #1
 80043ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f023 0207 	bic.w	r2, r3, #7
 80043b8:	4909      	ldr	r1, [pc, #36]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d001      	beq.n	80043d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40022000 	.word	0x40022000

080043e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043ec:	2300      	movs	r3, #0
 80043ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f0:	2300      	movs	r3, #0
 80043f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004408:	d005      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800440a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800440e:	d015      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004414:	e00f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004416:	4bac      	ldr	r3, [pc, #688]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4aab      	ldr	r2, [pc, #684]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f9dc 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	74fb      	strb	r3, [r7, #19]
      break;
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800443c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004444:	4ba0      	ldr	r3, [pc, #640]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	499d      	ldr	r1, [pc, #628]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800445a:	e001      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8099 	beq.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004472:	4b95      	ldr	r3, [pc, #596]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b8f      	ldr	r3, [pc, #572]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	4a8e      	ldr	r2, [pc, #568]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	6593      	str	r3, [r2, #88]	; 0x58
 8004494:	4b8c      	ldr	r3, [pc, #560]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a0:	2301      	movs	r3, #1
 80044a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a4:	4b89      	ldr	r3, [pc, #548]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a88      	ldr	r2, [pc, #544]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044b0:	f7fc ffe6 	bl	8001480 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b6:	e009      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fc ffe2 	bl	8001480 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d902      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	74fb      	strb	r3, [r7, #19]
        break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044cc:	4b7f      	ldr	r3, [pc, #508]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ef      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d155      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044de:	4b7a      	ldr	r3, [pc, #488]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01e      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d019      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044fa:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004506:	4b70      	ldr	r3, [pc, #448]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	4a6e      	ldr	r2, [pc, #440]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004516:	4b6c      	ldr	r3, [pc, #432]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004526:	4a68      	ldr	r2, [pc, #416]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d016      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fc ffa2 	bl	8001480 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	e00b      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fc ff9e 	bl	8001480 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d902      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	74fb      	strb	r3, [r7, #19]
            break;
 8004556:	e006      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004558:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ec      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456c:	4b56      	ldr	r3, [pc, #344]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	4953      	ldr	r1, [pc, #332]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
 8004588:	e001      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458e:	7c7b      	ldrb	r3, [r7, #17]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b4c      	ldr	r3, [pc, #304]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a4b      	ldr	r2, [pc, #300]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4943      	ldr	r1, [pc, #268]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ce:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 020c 	bic.w	r2, r3, #12
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	493a      	ldr	r1, [pc, #232]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	4932      	ldr	r1, [pc, #200]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004612:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	4929      	ldr	r1, [pc, #164]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	4921      	ldr	r1, [pc, #132]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4918      	ldr	r1, [pc, #96]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	4910      	ldr	r1, [pc, #64]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d02c      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	4907      	ldr	r1, [pc, #28]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b8:	d10a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ba:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4a02      	ldr	r2, [pc, #8]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c4:	60d3      	str	r3, [r2, #12]
 80046c6:	e015      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f881 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d028      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	492d      	ldr	r1, [pc, #180]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471e:	d106      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472a:	60d3      	str	r3, [r2, #12]
 800472c:	e011      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004736:	d10c      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f852 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01c      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800475e:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	4915      	ldr	r1, [pc, #84]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477c:	d10c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	2102      	movs	r1, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f82f 	bl	80047e8 <RCCEx_PLLSAI1_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	4904      	ldr	r1, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f6:	4b73      	ldr	r3, [pc, #460]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004802:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0203 	and.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d10d      	bne.n	800482e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
       ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800481a:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
       ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d044      	beq.n	80048b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e041      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d00c      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x6e>
 800483c:	2b03      	cmp	r3, #3
 800483e:	d013      	beq.n	8004868 <RCCEx_PLLSAI1_Config+0x80>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d120      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004844:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11d      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e01a      	b.n	800488c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004866:	e013      	b.n	8004890 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004868:	4b56      	ldr	r3, [pc, #344]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10f      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004884:	e006      	b.n	8004894 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
      break;
 800488a:	e004      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800488c:	bf00      	nop
 800488e:	e002      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004890:	bf00      	nop
 8004892:	e000      	b.n	8004896 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004894:	bf00      	nop
    }

    if(status == HAL_OK)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800489c:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	430b      	orrs	r3, r1
 80048b2:	4944      	ldr	r1, [pc, #272]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d17c      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a40      	ldr	r2, [pc, #256]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ca:	f7fc fdd9 	bl	8001480 <HAL_GetTick>
 80048ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d0:	e009      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d2:	f7fc fdd5 	bl	8001480 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d902      	bls.n	80048e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	73fb      	strb	r3, [r7, #15]
        break;
 80048e4:	e005      	b.n	80048f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ef      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d15f      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d110      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004906:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	0211      	lsls	r1, r2, #8
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68d2      	ldr	r2, [r2, #12]
 8004914:	06d2      	lsls	r2, r2, #27
 8004916:	430a      	orrs	r2, r1
 8004918:	492a      	ldr	r1, [pc, #168]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
 800491e:	e027      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d112      	bne.n	800494c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004926:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800492e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	0211      	lsls	r1, r2, #8
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6912      	ldr	r2, [r2, #16]
 800493c:	0852      	lsrs	r2, r2, #1
 800493e:	3a01      	subs	r2, #1
 8004940:	0552      	lsls	r2, r2, #21
 8004942:	430a      	orrs	r2, r1
 8004944:	491f      	ldr	r1, [pc, #124]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]
 800494a:	e011      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	0211      	lsls	r1, r2, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6952      	ldr	r2, [r2, #20]
 8004962:	0852      	lsrs	r2, r2, #1
 8004964:	3a01      	subs	r2, #1
 8004966:	0652      	lsls	r2, r2, #25
 8004968:	430a      	orrs	r2, r1
 800496a:	4916      	ldr	r1, [pc, #88]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800497a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fc fd80 	bl	8001480 <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004982:	e009      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004984:	f7fc fd7c 	bl	8001480 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d902      	bls.n	8004998 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	73fb      	strb	r3, [r7, #15]
          break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ef      	beq.n	8004984 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	4904      	ldr	r1, [pc, #16]	; (80049c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e049      	b.n	8004a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fc10 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 f882 	bl	8004b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e033      	b.n	8004af8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_TIM_Base_Start+0x8c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIM_Base_Start+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_Base_Start+0x3e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <HAL_TIM_Base_Start+0x90>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_TIM_Base_Start+0x94>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d015      	beq.n	8004af4 <HAL_TIM_Base_Start+0x7c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d011      	beq.n	8004af4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e008      	b.n	8004af4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	00010007 	.word	0x00010007

08004b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <TIM_Base_SetConfig+0xbc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x20>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2e:	d108      	bne.n	8004b42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <TIM_Base_SetConfig+0xbc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00b      	beq.n	8004b62 <TIM_Base_SetConfig+0x52>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d007      	beq.n	8004b62 <TIM_Base_SetConfig+0x52>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <TIM_Base_SetConfig+0xc0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_Base_SetConfig+0x52>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <TIM_Base_SetConfig+0xc4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <TIM_Base_SetConfig+0xbc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0xa0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <TIM_Base_SetConfig+0xc0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0xa0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <TIM_Base_SetConfig+0xc4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d103      	bne.n	8004bb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	615a      	str	r2, [r3, #20]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400

08004bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e04f      	b.n	8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d004      	beq.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10c      	bne.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40014000 	.word	0x40014000

08004ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e040      	b.n	8004d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc faf4 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	; 0x24
 8004cd0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8c0 	bl	8004e68 <UART_SetConfig>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e022      	b.n	8004d38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fac4 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fb4b 	bl	80053cc <UART_CheckIdleState>
 8004d36:	4603      	mov	r3, r0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 8081 	bne.w	8004e5c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_Transmit+0x26>
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e079      	b.n	8004e5e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_UART_Transmit+0x38>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e072      	b.n	8004e5e <HAL_UART_Transmit+0x11e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2221      	movs	r2, #33	; 0x21
 8004d8a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fc fb78 	bl	8001480 <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	88fa      	ldrh	r2, [r7, #6]
 8004d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004daa:	d108      	bne.n	8004dbe <HAL_UART_Transmit+0x7e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e003      	b.n	8004dc6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004dce:	e02d      	b.n	8004e2c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fb3b 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e039      	b.n	8004e5e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	3302      	adds	r3, #2
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e008      	b.n	8004e1a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b292      	uxth	r2, r2
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	3301      	adds	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1cb      	bne.n	8004dd0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fb07 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e005      	b.n	8004e5e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e6c:	b088      	sub	sp, #32
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4bb0      	ldr	r3, [pc, #704]	; (8005158 <UART_SetConfig+0x2f0>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4aa6      	ldr	r2, [pc, #664]	; (800515c <UART_SetConfig+0x2f4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a9d      	ldr	r2, [pc, #628]	; (8005160 <UART_SetConfig+0x2f8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d121      	bne.n	8004f34 <UART_SetConfig+0xcc>
 8004ef0:	4b9c      	ldr	r3, [pc, #624]	; (8005164 <UART_SetConfig+0x2fc>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d816      	bhi.n	8004f2c <UART_SetConfig+0xc4>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0x9c>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f1b 	.word	0x08004f1b
 8004f10:	08004f27 	.word	0x08004f27
 8004f14:	2301      	movs	r3, #1
 8004f16:	76fb      	strb	r3, [r7, #27]
 8004f18:	e072      	b.n	8005000 <UART_SetConfig+0x198>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	76fb      	strb	r3, [r7, #27]
 8004f1e:	e06f      	b.n	8005000 <UART_SetConfig+0x198>
 8004f20:	2304      	movs	r3, #4
 8004f22:	76fb      	strb	r3, [r7, #27]
 8004f24:	e06c      	b.n	8005000 <UART_SetConfig+0x198>
 8004f26:	2308      	movs	r3, #8
 8004f28:	76fb      	strb	r3, [r7, #27]
 8004f2a:	e069      	b.n	8005000 <UART_SetConfig+0x198>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	76fb      	strb	r3, [r7, #27]
 8004f30:	bf00      	nop
 8004f32:	e065      	b.n	8005000 <UART_SetConfig+0x198>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a8b      	ldr	r2, [pc, #556]	; (8005168 <UART_SetConfig+0x300>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d134      	bne.n	8004fa8 <UART_SetConfig+0x140>
 8004f3e:	4b89      	ldr	r3, [pc, #548]	; (8005164 <UART_SetConfig+0x2fc>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d829      	bhi.n	8004fa0 <UART_SetConfig+0x138>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0xec>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004f8f 	.word	0x08004f8f
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa1 	.word	0x08004fa1
 8004f84:	08004f9b 	.word	0x08004f9b
 8004f88:	2300      	movs	r3, #0
 8004f8a:	76fb      	strb	r3, [r7, #27]
 8004f8c:	e038      	b.n	8005000 <UART_SetConfig+0x198>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	76fb      	strb	r3, [r7, #27]
 8004f92:	e035      	b.n	8005000 <UART_SetConfig+0x198>
 8004f94:	2304      	movs	r3, #4
 8004f96:	76fb      	strb	r3, [r7, #27]
 8004f98:	e032      	b.n	8005000 <UART_SetConfig+0x198>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	76fb      	strb	r3, [r7, #27]
 8004f9e:	e02f      	b.n	8005000 <UART_SetConfig+0x198>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	76fb      	strb	r3, [r7, #27]
 8004fa4:	bf00      	nop
 8004fa6:	e02b      	b.n	8005000 <UART_SetConfig+0x198>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6b      	ldr	r2, [pc, #428]	; (800515c <UART_SetConfig+0x2f4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d124      	bne.n	8004ffc <UART_SetConfig+0x194>
 8004fb2:	4b6c      	ldr	r3, [pc, #432]	; (8005164 <UART_SetConfig+0x2fc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc0:	d012      	beq.n	8004fe8 <UART_SetConfig+0x180>
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d802      	bhi.n	8004fce <UART_SetConfig+0x166>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <UART_SetConfig+0x174>
 8004fcc:	e012      	b.n	8004ff4 <UART_SetConfig+0x18c>
 8004fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd2:	d006      	beq.n	8004fe2 <UART_SetConfig+0x17a>
 8004fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd8:	d009      	beq.n	8004fee <UART_SetConfig+0x186>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x18c>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	76fb      	strb	r3, [r7, #27]
 8004fe0:	e00e      	b.n	8005000 <UART_SetConfig+0x198>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	76fb      	strb	r3, [r7, #27]
 8004fe6:	e00b      	b.n	8005000 <UART_SetConfig+0x198>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	76fb      	strb	r3, [r7, #27]
 8004fec:	e008      	b.n	8005000 <UART_SetConfig+0x198>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	76fb      	strb	r3, [r7, #27]
 8004ff2:	e005      	b.n	8005000 <UART_SetConfig+0x198>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	76fb      	strb	r3, [r7, #27]
 8004ff8:	bf00      	nop
 8004ffa:	e001      	b.n	8005000 <UART_SetConfig+0x198>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a55      	ldr	r2, [pc, #340]	; (800515c <UART_SetConfig+0x2f4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d174      	bne.n	80050f4 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800500a:	7efb      	ldrb	r3, [r7, #27]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d824      	bhi.n	800505a <UART_SetConfig+0x1f2>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x1b0>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800503d 	.word	0x0800503d
 800501c:	0800505b 	.word	0x0800505b
 8005020:	08005045 	.word	0x08005045
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800504b 	.word	0x0800504b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	0800505b 	.word	0x0800505b
 8005034:	0800505b 	.word	0x0800505b
 8005038:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7ff f946 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8005040:	6178      	str	r0, [r7, #20]
        break;
 8005042:	e00f      	b.n	8005064 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b49      	ldr	r3, [pc, #292]	; (800516c <UART_SetConfig+0x304>)
 8005046:	617b      	str	r3, [r7, #20]
        break;
 8005048:	e00c      	b.n	8005064 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7ff f8a9 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800504e:	6178      	str	r0, [r7, #20]
        break;
 8005050:	e008      	b.n	8005064 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005056:	617b      	str	r3, [r7, #20]
        break;
 8005058:	e004      	b.n	8005064 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	76bb      	strb	r3, [r7, #26]
        break;
 8005062:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8100 	beq.w	800526c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	d305      	bcc.n	8005088 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d902      	bls.n	800508e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	76bb      	strb	r3, [r7, #26]
 800508c:	e0ee      	b.n	800526c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f04f 0400 	mov.w	r4, #0
 800509e:	0214      	lsls	r4, r2, #8
 80050a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80050a4:	020b      	lsls	r3, r1, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6852      	ldr	r2, [r2, #4]
 80050aa:	0852      	lsrs	r2, r2, #1
 80050ac:	4611      	mov	r1, r2
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	eb13 0b01 	adds.w	fp, r3, r1
 80050b6:	eb44 0c02 	adc.w	ip, r4, r2
 80050ba:	4658      	mov	r0, fp
 80050bc:	4661      	mov	r1, ip
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f04f 0400 	mov.w	r4, #0
 80050c6:	461a      	mov	r2, r3
 80050c8:	4623      	mov	r3, r4
 80050ca:	f7fb f87f 	bl	80001cc <__aeabi_uldivmod>
 80050ce:	4603      	mov	r3, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050da:	d308      	bcc.n	80050ee <UART_SetConfig+0x286>
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e2:	d204      	bcs.n	80050ee <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	60da      	str	r2, [r3, #12]
 80050ec:	e0be      	b.n	800526c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	76bb      	strb	r3, [r7, #26]
 80050f2:	e0bb      	b.n	800526c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fc:	d169      	bne.n	80051d2 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80050fe:	7efb      	ldrb	r3, [r7, #27]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d835      	bhi.n	8005170 <UART_SetConfig+0x308>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0x2a4>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005171 	.word	0x08005171
 800511c:	08005147 	.word	0x08005147
 8005120:	08005171 	.word	0x08005171
 8005124:	08005171 	.word	0x08005171
 8005128:	08005171 	.word	0x08005171
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7ff f8cc 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8005134:	6178      	str	r0, [r7, #20]
        break;
 8005136:	e020      	b.n	800517a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7ff f8de 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 800513c:	6178      	str	r0, [r7, #20]
        break;
 800513e:	e01c      	b.n	800517a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <UART_SetConfig+0x304>)
 8005142:	617b      	str	r3, [r7, #20]
        break;
 8005144:	e019      	b.n	800517a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7ff f82b 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800514a:	6178      	str	r0, [r7, #20]
        break;
 800514c:	e015      	b.n	800517a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	617b      	str	r3, [r7, #20]
        break;
 8005154:	e011      	b.n	800517a <UART_SetConfig+0x312>
 8005156:	bf00      	nop
 8005158:	efff69f3 	.word	0xefff69f3
 800515c:	40008000 	.word	0x40008000
 8005160:	40013800 	.word	0x40013800
 8005164:	40021000 	.word	0x40021000
 8005168:	40004400 	.word	0x40004400
 800516c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	76bb      	strb	r3, [r7, #26]
        break;
 8005178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d075      	beq.n	800526c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	005a      	lsls	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	085b      	lsrs	r3, r3, #1
 800518a:	441a      	add	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	b29b      	uxth	r3, r3
 8005196:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d916      	bls.n	80051cc <UART_SetConfig+0x364>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a4:	d212      	bcs.n	80051cc <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f023 030f 	bic.w	r3, r3, #15
 80051ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	4313      	orrs	r3, r2
 80051c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	89fa      	ldrh	r2, [r7, #14]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e04f      	b.n	800526c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	76bb      	strb	r3, [r7, #26]
 80051d0:	e04c      	b.n	800526c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d2:	7efb      	ldrb	r3, [r7, #27]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d828      	bhi.n	800522a <UART_SetConfig+0x3c2>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x378>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800522b 	.word	0x0800522b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7ff f862 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8005208:	6178      	str	r0, [r7, #20]
        break;
 800520a:	e013      	b.n	8005234 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7ff f874 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 8005210:	6178      	str	r0, [r7, #20]
        break;
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <UART_SetConfig+0x41c>)
 8005216:	617b      	str	r3, [r7, #20]
        break;
 8005218:	e00c      	b.n	8005234 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe ffc1 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800521e:	6178      	str	r0, [r7, #20]
        break;
 8005220:	e008      	b.n	8005234 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005226:	617b      	str	r3, [r7, #20]
        break;
 8005228:	e004      	b.n	8005234 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	76bb      	strb	r3, [r7, #26]
        break;
 8005232:	bf00      	nop
    }

    if (pclk != 0U)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085a      	lsrs	r2, r3, #1
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	441a      	add	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	b29b      	uxth	r3, r3
 800524e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	d908      	bls.n	8005268 <UART_SetConfig+0x400>
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525c:	d204      	bcs.n	8005268 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e001      	b.n	800526c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005278:	7ebb      	ldrb	r3, [r7, #26]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005284:	00f42400 	.word	0x00f42400

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80053da:	f7fc f851 	bl	8001480 <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d10e      	bne.n	800540c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f82a 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e020      	b.n	800544e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d10e      	bne.n	8005438 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f814 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e00a      	b.n	800544e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	e05d      	b.n	8005524 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546e:	d059      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fc f806 	bl	8001480 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <UART_WaitOnFlagUntilTimeout+0x30>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11b      	bne.n	80054be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005494:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e042      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d02b      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d123      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e00f      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	429a      	cmp	r2, r3
 8005540:	d092      	beq.n	8005468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <__errno>:
 800554c:	4b01      	ldr	r3, [pc, #4]	; (8005554 <__errno+0x8>)
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c

08005558 <__libc_init_array>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4e0d      	ldr	r6, [pc, #52]	; (8005590 <__libc_init_array+0x38>)
 800555c:	4c0d      	ldr	r4, [pc, #52]	; (8005594 <__libc_init_array+0x3c>)
 800555e:	1ba4      	subs	r4, r4, r6
 8005560:	10a4      	asrs	r4, r4, #2
 8005562:	2500      	movs	r5, #0
 8005564:	42a5      	cmp	r5, r4
 8005566:	d109      	bne.n	800557c <__libc_init_array+0x24>
 8005568:	4e0b      	ldr	r6, [pc, #44]	; (8005598 <__libc_init_array+0x40>)
 800556a:	4c0c      	ldr	r4, [pc, #48]	; (800559c <__libc_init_array+0x44>)
 800556c:	f000 fc88 	bl	8005e80 <_init>
 8005570:	1ba4      	subs	r4, r4, r6
 8005572:	10a4      	asrs	r4, r4, #2
 8005574:	2500      	movs	r5, #0
 8005576:	42a5      	cmp	r5, r4
 8005578:	d105      	bne.n	8005586 <__libc_init_array+0x2e>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005580:	4798      	blx	r3
 8005582:	3501      	adds	r5, #1
 8005584:	e7ee      	b.n	8005564 <__libc_init_array+0xc>
 8005586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800558a:	4798      	blx	r3
 800558c:	3501      	adds	r5, #1
 800558e:	e7f2      	b.n	8005576 <__libc_init_array+0x1e>
 8005590:	08005f5c 	.word	0x08005f5c
 8005594:	08005f5c 	.word	0x08005f5c
 8005598:	08005f5c 	.word	0x08005f5c
 800559c:	08005f60 	.word	0x08005f60

080055a0 <memset>:
 80055a0:	4402      	add	r2, r0
 80055a2:	4603      	mov	r3, r0
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d100      	bne.n	80055aa <memset+0xa>
 80055a8:	4770      	bx	lr
 80055aa:	f803 1b01 	strb.w	r1, [r3], #1
 80055ae:	e7f9      	b.n	80055a4 <memset+0x4>

080055b0 <_puts_r>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	460e      	mov	r6, r1
 80055b4:	4605      	mov	r5, r0
 80055b6:	b118      	cbz	r0, 80055c0 <_puts_r+0x10>
 80055b8:	6983      	ldr	r3, [r0, #24]
 80055ba:	b90b      	cbnz	r3, 80055c0 <_puts_r+0x10>
 80055bc:	f000 fa0c 	bl	80059d8 <__sinit>
 80055c0:	69ab      	ldr	r3, [r5, #24]
 80055c2:	68ac      	ldr	r4, [r5, #8]
 80055c4:	b913      	cbnz	r3, 80055cc <_puts_r+0x1c>
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fa06 	bl	80059d8 <__sinit>
 80055cc:	4b23      	ldr	r3, [pc, #140]	; (800565c <_puts_r+0xac>)
 80055ce:	429c      	cmp	r4, r3
 80055d0:	d117      	bne.n	8005602 <_puts_r+0x52>
 80055d2:	686c      	ldr	r4, [r5, #4]
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	071b      	lsls	r3, r3, #28
 80055d8:	d51d      	bpl.n	8005616 <_puts_r+0x66>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	b1db      	cbz	r3, 8005616 <_puts_r+0x66>
 80055de:	3e01      	subs	r6, #1
 80055e0:	68a3      	ldr	r3, [r4, #8]
 80055e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055e6:	3b01      	subs	r3, #1
 80055e8:	60a3      	str	r3, [r4, #8]
 80055ea:	b9e9      	cbnz	r1, 8005628 <_puts_r+0x78>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	da2e      	bge.n	800564e <_puts_r+0x9e>
 80055f0:	4622      	mov	r2, r4
 80055f2:	210a      	movs	r1, #10
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 f83f 	bl	8005678 <__swbuf_r>
 80055fa:	3001      	adds	r0, #1
 80055fc:	d011      	beq.n	8005622 <_puts_r+0x72>
 80055fe:	200a      	movs	r0, #10
 8005600:	e011      	b.n	8005626 <_puts_r+0x76>
 8005602:	4b17      	ldr	r3, [pc, #92]	; (8005660 <_puts_r+0xb0>)
 8005604:	429c      	cmp	r4, r3
 8005606:	d101      	bne.n	800560c <_puts_r+0x5c>
 8005608:	68ac      	ldr	r4, [r5, #8]
 800560a:	e7e3      	b.n	80055d4 <_puts_r+0x24>
 800560c:	4b15      	ldr	r3, [pc, #84]	; (8005664 <_puts_r+0xb4>)
 800560e:	429c      	cmp	r4, r3
 8005610:	bf08      	it	eq
 8005612:	68ec      	ldreq	r4, [r5, #12]
 8005614:	e7de      	b.n	80055d4 <_puts_r+0x24>
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f87f 	bl	800571c <__swsetup_r>
 800561e:	2800      	cmp	r0, #0
 8005620:	d0dd      	beq.n	80055de <_puts_r+0x2e>
 8005622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	2b00      	cmp	r3, #0
 800562a:	da04      	bge.n	8005636 <_puts_r+0x86>
 800562c:	69a2      	ldr	r2, [r4, #24]
 800562e:	429a      	cmp	r2, r3
 8005630:	dc06      	bgt.n	8005640 <_puts_r+0x90>
 8005632:	290a      	cmp	r1, #10
 8005634:	d004      	beq.n	8005640 <_puts_r+0x90>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	6022      	str	r2, [r4, #0]
 800563c:	7019      	strb	r1, [r3, #0]
 800563e:	e7cf      	b.n	80055e0 <_puts_r+0x30>
 8005640:	4622      	mov	r2, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 f818 	bl	8005678 <__swbuf_r>
 8005648:	3001      	adds	r0, #1
 800564a:	d1c9      	bne.n	80055e0 <_puts_r+0x30>
 800564c:	e7e9      	b.n	8005622 <_puts_r+0x72>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	200a      	movs	r0, #10
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	7018      	strb	r0, [r3, #0]
 8005658:	e7e5      	b.n	8005626 <_puts_r+0x76>
 800565a:	bf00      	nop
 800565c:	08005f14 	.word	0x08005f14
 8005660:	08005f34 	.word	0x08005f34
 8005664:	08005ef4 	.word	0x08005ef4

08005668 <puts>:
 8005668:	4b02      	ldr	r3, [pc, #8]	; (8005674 <puts+0xc>)
 800566a:	4601      	mov	r1, r0
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f7ff bf9f 	b.w	80055b0 <_puts_r>
 8005672:	bf00      	nop
 8005674:	2000000c 	.word	0x2000000c

08005678 <__swbuf_r>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4614      	mov	r4, r2
 800567e:	4605      	mov	r5, r0
 8005680:	b118      	cbz	r0, 800568a <__swbuf_r+0x12>
 8005682:	6983      	ldr	r3, [r0, #24]
 8005684:	b90b      	cbnz	r3, 800568a <__swbuf_r+0x12>
 8005686:	f000 f9a7 	bl	80059d8 <__sinit>
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <__swbuf_r+0x98>)
 800568c:	429c      	cmp	r4, r3
 800568e:	d12a      	bne.n	80056e6 <__swbuf_r+0x6e>
 8005690:	686c      	ldr	r4, [r5, #4]
 8005692:	69a3      	ldr	r3, [r4, #24]
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	071a      	lsls	r2, r3, #28
 800569a:	d52e      	bpl.n	80056fa <__swbuf_r+0x82>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	b363      	cbz	r3, 80056fa <__swbuf_r+0x82>
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	6820      	ldr	r0, [r4, #0]
 80056a4:	1ac0      	subs	r0, r0, r3
 80056a6:	6963      	ldr	r3, [r4, #20]
 80056a8:	b2f6      	uxtb	r6, r6
 80056aa:	4283      	cmp	r3, r0
 80056ac:	4637      	mov	r7, r6
 80056ae:	dc04      	bgt.n	80056ba <__swbuf_r+0x42>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f926 	bl	8005904 <_fflush_r>
 80056b8:	bb28      	cbnz	r0, 8005706 <__swbuf_r+0x8e>
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	3b01      	subs	r3, #1
 80056be:	60a3      	str	r3, [r4, #8]
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	701e      	strb	r6, [r3, #0]
 80056c8:	6963      	ldr	r3, [r4, #20]
 80056ca:	3001      	adds	r0, #1
 80056cc:	4283      	cmp	r3, r0
 80056ce:	d004      	beq.n	80056da <__swbuf_r+0x62>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d519      	bpl.n	800570a <__swbuf_r+0x92>
 80056d6:	2e0a      	cmp	r6, #10
 80056d8:	d117      	bne.n	800570a <__swbuf_r+0x92>
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f911 	bl	8005904 <_fflush_r>
 80056e2:	b190      	cbz	r0, 800570a <__swbuf_r+0x92>
 80056e4:	e00f      	b.n	8005706 <__swbuf_r+0x8e>
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <__swbuf_r+0x9c>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d101      	bne.n	80056f0 <__swbuf_r+0x78>
 80056ec:	68ac      	ldr	r4, [r5, #8]
 80056ee:	e7d0      	b.n	8005692 <__swbuf_r+0x1a>
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <__swbuf_r+0xa0>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	bf08      	it	eq
 80056f6:	68ec      	ldreq	r4, [r5, #12]
 80056f8:	e7cb      	b.n	8005692 <__swbuf_r+0x1a>
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f80d 	bl	800571c <__swsetup_r>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0cc      	beq.n	80056a0 <__swbuf_r+0x28>
 8005706:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800570a:	4638      	mov	r0, r7
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800570e:	bf00      	nop
 8005710:	08005f14 	.word	0x08005f14
 8005714:	08005f34 	.word	0x08005f34
 8005718:	08005ef4 	.word	0x08005ef4

0800571c <__swsetup_r>:
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <__swsetup_r+0xcc>)
 800571e:	b570      	push	{r4, r5, r6, lr}
 8005720:	681d      	ldr	r5, [r3, #0]
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	b125      	cbz	r5, 8005732 <__swsetup_r+0x16>
 8005728:	69ab      	ldr	r3, [r5, #24]
 800572a:	b913      	cbnz	r3, 8005732 <__swsetup_r+0x16>
 800572c:	4628      	mov	r0, r5
 800572e:	f000 f953 	bl	80059d8 <__sinit>
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <__swsetup_r+0xd0>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d10f      	bne.n	8005758 <__swsetup_r+0x3c>
 8005738:	686c      	ldr	r4, [r5, #4]
 800573a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573e:	b29a      	uxth	r2, r3
 8005740:	0715      	lsls	r5, r2, #28
 8005742:	d42c      	bmi.n	800579e <__swsetup_r+0x82>
 8005744:	06d0      	lsls	r0, r2, #27
 8005746:	d411      	bmi.n	800576c <__swsetup_r+0x50>
 8005748:	2209      	movs	r2, #9
 800574a:	6032      	str	r2, [r6, #0]
 800574c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005756:	e03e      	b.n	80057d6 <__swsetup_r+0xba>
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <__swsetup_r+0xd4>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d101      	bne.n	8005762 <__swsetup_r+0x46>
 800575e:	68ac      	ldr	r4, [r5, #8]
 8005760:	e7eb      	b.n	800573a <__swsetup_r+0x1e>
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <__swsetup_r+0xd8>)
 8005764:	429c      	cmp	r4, r3
 8005766:	bf08      	it	eq
 8005768:	68ec      	ldreq	r4, [r5, #12]
 800576a:	e7e6      	b.n	800573a <__swsetup_r+0x1e>
 800576c:	0751      	lsls	r1, r2, #29
 800576e:	d512      	bpl.n	8005796 <__swsetup_r+0x7a>
 8005770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005772:	b141      	cbz	r1, 8005786 <__swsetup_r+0x6a>
 8005774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005778:	4299      	cmp	r1, r3
 800577a:	d002      	beq.n	8005782 <__swsetup_r+0x66>
 800577c:	4630      	mov	r0, r6
 800577e:	f000 fa19 	bl	8005bb4 <_free_r>
 8005782:	2300      	movs	r3, #0
 8005784:	6363      	str	r3, [r4, #52]	; 0x34
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	2300      	movs	r3, #0
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	b94b      	cbnz	r3, 80057b6 <__swsetup_r+0x9a>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d003      	beq.n	80057b6 <__swsetup_r+0x9a>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 f9bf 	bl	8005b34 <__smakebuf_r>
 80057b6:	89a2      	ldrh	r2, [r4, #12]
 80057b8:	f012 0301 	ands.w	r3, r2, #1
 80057bc:	d00c      	beq.n	80057d8 <__swsetup_r+0xbc>
 80057be:	2300      	movs	r3, #0
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	425b      	negs	r3, r3
 80057c6:	61a3      	str	r3, [r4, #24]
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	b953      	cbnz	r3, 80057e2 <__swsetup_r+0xc6>
 80057cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057d4:	d1ba      	bne.n	800574c <__swsetup_r+0x30>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	0792      	lsls	r2, r2, #30
 80057da:	bf58      	it	pl
 80057dc:	6963      	ldrpl	r3, [r4, #20]
 80057de:	60a3      	str	r3, [r4, #8]
 80057e0:	e7f2      	b.n	80057c8 <__swsetup_r+0xac>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7f7      	b.n	80057d6 <__swsetup_r+0xba>
 80057e6:	bf00      	nop
 80057e8:	2000000c 	.word	0x2000000c
 80057ec:	08005f14 	.word	0x08005f14
 80057f0:	08005f34 	.word	0x08005f34
 80057f4:	08005ef4 	.word	0x08005ef4

080057f8 <__sflush_r>:
 80057f8:	898a      	ldrh	r2, [r1, #12]
 80057fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	4605      	mov	r5, r0
 8005800:	0710      	lsls	r0, r2, #28
 8005802:	460c      	mov	r4, r1
 8005804:	d458      	bmi.n	80058b8 <__sflush_r+0xc0>
 8005806:	684b      	ldr	r3, [r1, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dc05      	bgt.n	8005818 <__sflush_r+0x20>
 800580c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	dc02      	bgt.n	8005818 <__sflush_r+0x20>
 8005812:	2000      	movs	r0, #0
 8005814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581a:	2e00      	cmp	r6, #0
 800581c:	d0f9      	beq.n	8005812 <__sflush_r+0x1a>
 800581e:	2300      	movs	r3, #0
 8005820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005824:	682f      	ldr	r7, [r5, #0]
 8005826:	6a21      	ldr	r1, [r4, #32]
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	d032      	beq.n	8005892 <__sflush_r+0x9a>
 800582c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	075a      	lsls	r2, r3, #29
 8005832:	d505      	bpl.n	8005840 <__sflush_r+0x48>
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	1ac0      	subs	r0, r0, r3
 8005838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800583a:	b10b      	cbz	r3, 8005840 <__sflush_r+0x48>
 800583c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800583e:	1ac0      	subs	r0, r0, r3
 8005840:	2300      	movs	r3, #0
 8005842:	4602      	mov	r2, r0
 8005844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005846:	6a21      	ldr	r1, [r4, #32]
 8005848:	4628      	mov	r0, r5
 800584a:	47b0      	blx	r6
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	d106      	bne.n	8005860 <__sflush_r+0x68>
 8005852:	6829      	ldr	r1, [r5, #0]
 8005854:	291d      	cmp	r1, #29
 8005856:	d848      	bhi.n	80058ea <__sflush_r+0xf2>
 8005858:	4a29      	ldr	r2, [pc, #164]	; (8005900 <__sflush_r+0x108>)
 800585a:	40ca      	lsrs	r2, r1
 800585c:	07d6      	lsls	r6, r2, #31
 800585e:	d544      	bpl.n	80058ea <__sflush_r+0xf2>
 8005860:	2200      	movs	r2, #0
 8005862:	6062      	str	r2, [r4, #4]
 8005864:	04d9      	lsls	r1, r3, #19
 8005866:	6922      	ldr	r2, [r4, #16]
 8005868:	6022      	str	r2, [r4, #0]
 800586a:	d504      	bpl.n	8005876 <__sflush_r+0x7e>
 800586c:	1c42      	adds	r2, r0, #1
 800586e:	d101      	bne.n	8005874 <__sflush_r+0x7c>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b903      	cbnz	r3, 8005876 <__sflush_r+0x7e>
 8005874:	6560      	str	r0, [r4, #84]	; 0x54
 8005876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005878:	602f      	str	r7, [r5, #0]
 800587a:	2900      	cmp	r1, #0
 800587c:	d0c9      	beq.n	8005812 <__sflush_r+0x1a>
 800587e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005882:	4299      	cmp	r1, r3
 8005884:	d002      	beq.n	800588c <__sflush_r+0x94>
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f994 	bl	8005bb4 <_free_r>
 800588c:	2000      	movs	r0, #0
 800588e:	6360      	str	r0, [r4, #52]	; 0x34
 8005890:	e7c0      	b.n	8005814 <__sflush_r+0x1c>
 8005892:	2301      	movs	r3, #1
 8005894:	4628      	mov	r0, r5
 8005896:	47b0      	blx	r6
 8005898:	1c41      	adds	r1, r0, #1
 800589a:	d1c8      	bne.n	800582e <__sflush_r+0x36>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0c5      	beq.n	800582e <__sflush_r+0x36>
 80058a2:	2b1d      	cmp	r3, #29
 80058a4:	d001      	beq.n	80058aa <__sflush_r+0xb2>
 80058a6:	2b16      	cmp	r3, #22
 80058a8:	d101      	bne.n	80058ae <__sflush_r+0xb6>
 80058aa:	602f      	str	r7, [r5, #0]
 80058ac:	e7b1      	b.n	8005812 <__sflush_r+0x1a>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	e7ad      	b.n	8005814 <__sflush_r+0x1c>
 80058b8:	690f      	ldr	r7, [r1, #16]
 80058ba:	2f00      	cmp	r7, #0
 80058bc:	d0a9      	beq.n	8005812 <__sflush_r+0x1a>
 80058be:	0793      	lsls	r3, r2, #30
 80058c0:	680e      	ldr	r6, [r1, #0]
 80058c2:	bf08      	it	eq
 80058c4:	694b      	ldreq	r3, [r1, #20]
 80058c6:	600f      	str	r7, [r1, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2300      	movne	r3, #0
 80058cc:	eba6 0807 	sub.w	r8, r6, r7
 80058d0:	608b      	str	r3, [r1, #8]
 80058d2:	f1b8 0f00 	cmp.w	r8, #0
 80058d6:	dd9c      	ble.n	8005812 <__sflush_r+0x1a>
 80058d8:	4643      	mov	r3, r8
 80058da:	463a      	mov	r2, r7
 80058dc:	6a21      	ldr	r1, [r4, #32]
 80058de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b0      	blx	r6
 80058e4:	2800      	cmp	r0, #0
 80058e6:	dc06      	bgt.n	80058f6 <__sflush_r+0xfe>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f4:	e78e      	b.n	8005814 <__sflush_r+0x1c>
 80058f6:	4407      	add	r7, r0
 80058f8:	eba8 0800 	sub.w	r8, r8, r0
 80058fc:	e7e9      	b.n	80058d2 <__sflush_r+0xda>
 80058fe:	bf00      	nop
 8005900:	20400001 	.word	0x20400001

08005904 <_fflush_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	690b      	ldr	r3, [r1, #16]
 8005908:	4605      	mov	r5, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b1db      	cbz	r3, 8005946 <_fflush_r+0x42>
 800590e:	b118      	cbz	r0, 8005918 <_fflush_r+0x14>
 8005910:	6983      	ldr	r3, [r0, #24]
 8005912:	b90b      	cbnz	r3, 8005918 <_fflush_r+0x14>
 8005914:	f000 f860 	bl	80059d8 <__sinit>
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <_fflush_r+0x48>)
 800591a:	429c      	cmp	r4, r3
 800591c:	d109      	bne.n	8005932 <_fflush_r+0x2e>
 800591e:	686c      	ldr	r4, [r5, #4]
 8005920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005924:	b17b      	cbz	r3, 8005946 <_fflush_r+0x42>
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800592e:	f7ff bf63 	b.w	80057f8 <__sflush_r>
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <_fflush_r+0x4c>)
 8005934:	429c      	cmp	r4, r3
 8005936:	d101      	bne.n	800593c <_fflush_r+0x38>
 8005938:	68ac      	ldr	r4, [r5, #8]
 800593a:	e7f1      	b.n	8005920 <_fflush_r+0x1c>
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <_fflush_r+0x50>)
 800593e:	429c      	cmp	r4, r3
 8005940:	bf08      	it	eq
 8005942:	68ec      	ldreq	r4, [r5, #12]
 8005944:	e7ec      	b.n	8005920 <_fflush_r+0x1c>
 8005946:	2000      	movs	r0, #0
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	08005f14 	.word	0x08005f14
 8005950:	08005f34 	.word	0x08005f34
 8005954:	08005ef4 	.word	0x08005ef4

08005958 <std>:
 8005958:	2300      	movs	r3, #0
 800595a:	b510      	push	{r4, lr}
 800595c:	4604      	mov	r4, r0
 800595e:	e9c0 3300 	strd	r3, r3, [r0]
 8005962:	6083      	str	r3, [r0, #8]
 8005964:	8181      	strh	r1, [r0, #12]
 8005966:	6643      	str	r3, [r0, #100]	; 0x64
 8005968:	81c2      	strh	r2, [r0, #14]
 800596a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800596e:	6183      	str	r3, [r0, #24]
 8005970:	4619      	mov	r1, r3
 8005972:	2208      	movs	r2, #8
 8005974:	305c      	adds	r0, #92	; 0x5c
 8005976:	f7ff fe13 	bl	80055a0 <memset>
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x38>)
 800597c:	6263      	str	r3, [r4, #36]	; 0x24
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x3c>)
 8005980:	62a3      	str	r3, [r4, #40]	; 0x28
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <std+0x40>)
 8005984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <std+0x44>)
 8005988:	6224      	str	r4, [r4, #32]
 800598a:	6323      	str	r3, [r4, #48]	; 0x30
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	08005d25 	.word	0x08005d25
 8005994:	08005d47 	.word	0x08005d47
 8005998:	08005d7f 	.word	0x08005d7f
 800599c:	08005da3 	.word	0x08005da3

080059a0 <_cleanup_r>:
 80059a0:	4901      	ldr	r1, [pc, #4]	; (80059a8 <_cleanup_r+0x8>)
 80059a2:	f000 b885 	b.w	8005ab0 <_fwalk_reent>
 80059a6:	bf00      	nop
 80059a8:	08005905 	.word	0x08005905

080059ac <__sfmoreglue>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	1e4a      	subs	r2, r1, #1
 80059b0:	2568      	movs	r5, #104	; 0x68
 80059b2:	4355      	muls	r5, r2
 80059b4:	460e      	mov	r6, r1
 80059b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059ba:	f000 f949 	bl	8005c50 <_malloc_r>
 80059be:	4604      	mov	r4, r0
 80059c0:	b140      	cbz	r0, 80059d4 <__sfmoreglue+0x28>
 80059c2:	2100      	movs	r1, #0
 80059c4:	e9c0 1600 	strd	r1, r6, [r0]
 80059c8:	300c      	adds	r0, #12
 80059ca:	60a0      	str	r0, [r4, #8]
 80059cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059d0:	f7ff fde6 	bl	80055a0 <memset>
 80059d4:	4620      	mov	r0, r4
 80059d6:	bd70      	pop	{r4, r5, r6, pc}

080059d8 <__sinit>:
 80059d8:	6983      	ldr	r3, [r0, #24]
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	bb33      	cbnz	r3, 8005a2e <__sinit+0x56>
 80059e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80059e4:	6503      	str	r3, [r0, #80]	; 0x50
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <__sinit+0x58>)
 80059e8:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <__sinit+0x5c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6282      	str	r2, [r0, #40]	; 0x28
 80059ee:	4298      	cmp	r0, r3
 80059f0:	bf04      	itt	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	6183      	streq	r3, [r0, #24]
 80059f6:	f000 f81f 	bl	8005a38 <__sfp>
 80059fa:	6060      	str	r0, [r4, #4]
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 f81b 	bl	8005a38 <__sfp>
 8005a02:	60a0      	str	r0, [r4, #8]
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 f817 	bl	8005a38 <__sfp>
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	60e0      	str	r0, [r4, #12]
 8005a0e:	2104      	movs	r1, #4
 8005a10:	6860      	ldr	r0, [r4, #4]
 8005a12:	f7ff ffa1 	bl	8005958 <std>
 8005a16:	2201      	movs	r2, #1
 8005a18:	2109      	movs	r1, #9
 8005a1a:	68a0      	ldr	r0, [r4, #8]
 8005a1c:	f7ff ff9c 	bl	8005958 <std>
 8005a20:	2202      	movs	r2, #2
 8005a22:	2112      	movs	r1, #18
 8005a24:	68e0      	ldr	r0, [r4, #12]
 8005a26:	f7ff ff97 	bl	8005958 <std>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61a3      	str	r3, [r4, #24]
 8005a2e:	bd10      	pop	{r4, pc}
 8005a30:	08005ef0 	.word	0x08005ef0
 8005a34:	080059a1 	.word	0x080059a1

08005a38 <__sfp>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <__sfp+0x70>)
 8005a3c:	681e      	ldr	r6, [r3, #0]
 8005a3e:	69b3      	ldr	r3, [r6, #24]
 8005a40:	4607      	mov	r7, r0
 8005a42:	b913      	cbnz	r3, 8005a4a <__sfp+0x12>
 8005a44:	4630      	mov	r0, r6
 8005a46:	f7ff ffc7 	bl	80059d8 <__sinit>
 8005a4a:	3648      	adds	r6, #72	; 0x48
 8005a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	d503      	bpl.n	8005a5c <__sfp+0x24>
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	b133      	cbz	r3, 8005a66 <__sfp+0x2e>
 8005a58:	6836      	ldr	r6, [r6, #0]
 8005a5a:	e7f7      	b.n	8005a4c <__sfp+0x14>
 8005a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a60:	b16d      	cbz	r5, 8005a7e <__sfp+0x46>
 8005a62:	3468      	adds	r4, #104	; 0x68
 8005a64:	e7f4      	b.n	8005a50 <__sfp+0x18>
 8005a66:	2104      	movs	r1, #4
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff ff9f 	bl	80059ac <__sfmoreglue>
 8005a6e:	6030      	str	r0, [r6, #0]
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d1f1      	bne.n	8005a58 <__sfp+0x20>
 8005a74:	230c      	movs	r3, #12
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <__sfp+0x74>)
 8005a80:	6665      	str	r5, [r4, #100]	; 0x64
 8005a82:	e9c4 5500 	strd	r5, r5, [r4]
 8005a86:	60a5      	str	r5, [r4, #8]
 8005a88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005a8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005a90:	2208      	movs	r2, #8
 8005a92:	4629      	mov	r1, r5
 8005a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a98:	f7ff fd82 	bl	80055a0 <memset>
 8005a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005aa4:	e7e9      	b.n	8005a7a <__sfp+0x42>
 8005aa6:	bf00      	nop
 8005aa8:	08005ef0 	.word	0x08005ef0
 8005aac:	ffff0001 	.word	0xffff0001

08005ab0 <_fwalk_reent>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	4689      	mov	r9, r1
 8005ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005abc:	2600      	movs	r6, #0
 8005abe:	b914      	cbnz	r4, 8005ac6 <_fwalk_reent+0x16>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005aca:	3f01      	subs	r7, #1
 8005acc:	d501      	bpl.n	8005ad2 <_fwalk_reent+0x22>
 8005ace:	6824      	ldr	r4, [r4, #0]
 8005ad0:	e7f5      	b.n	8005abe <_fwalk_reent+0xe>
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d907      	bls.n	8005ae8 <_fwalk_reent+0x38>
 8005ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005adc:	3301      	adds	r3, #1
 8005ade:	d003      	beq.n	8005ae8 <_fwalk_reent+0x38>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	47c8      	blx	r9
 8005ae6:	4306      	orrs	r6, r0
 8005ae8:	3568      	adds	r5, #104	; 0x68
 8005aea:	e7ee      	b.n	8005aca <_fwalk_reent+0x1a>

08005aec <__swhatbuf_r>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	460e      	mov	r6, r1
 8005af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af4:	2900      	cmp	r1, #0
 8005af6:	b096      	sub	sp, #88	; 0x58
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	da07      	bge.n	8005b0e <__swhatbuf_r+0x22>
 8005afe:	2300      	movs	r3, #0
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	89b3      	ldrh	r3, [r6, #12]
 8005b04:	061a      	lsls	r2, r3, #24
 8005b06:	d410      	bmi.n	8005b2a <__swhatbuf_r+0x3e>
 8005b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b0c:	e00e      	b.n	8005b2c <__swhatbuf_r+0x40>
 8005b0e:	466a      	mov	r2, sp
 8005b10:	f000 f96e 	bl	8005df0 <_fstat_r>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	dbf2      	blt.n	8005afe <__swhatbuf_r+0x12>
 8005b18:	9a01      	ldr	r2, [sp, #4]
 8005b1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b22:	425a      	negs	r2, r3
 8005b24:	415a      	adcs	r2, r3
 8005b26:	602a      	str	r2, [r5, #0]
 8005b28:	e7ee      	b.n	8005b08 <__swhatbuf_r+0x1c>
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	b016      	add	sp, #88	; 0x58
 8005b32:	bd70      	pop	{r4, r5, r6, pc}

08005b34 <__smakebuf_r>:
 8005b34:	898b      	ldrh	r3, [r1, #12]
 8005b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b38:	079d      	lsls	r5, r3, #30
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	d507      	bpl.n	8005b50 <__smakebuf_r+0x1c>
 8005b40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	6163      	str	r3, [r4, #20]
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	ab01      	add	r3, sp, #4
 8005b52:	466a      	mov	r2, sp
 8005b54:	f7ff ffca 	bl	8005aec <__swhatbuf_r>
 8005b58:	9900      	ldr	r1, [sp, #0]
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f000 f877 	bl	8005c50 <_malloc_r>
 8005b62:	b948      	cbnz	r0, 8005b78 <__smakebuf_r+0x44>
 8005b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b68:	059a      	lsls	r2, r3, #22
 8005b6a:	d4ef      	bmi.n	8005b4c <__smakebuf_r+0x18>
 8005b6c:	f023 0303 	bic.w	r3, r3, #3
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	e7e3      	b.n	8005b40 <__smakebuf_r+0xc>
 8005b78:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <__smakebuf_r+0x7c>)
 8005b7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	6020      	str	r0, [r4, #0]
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	9b00      	ldr	r3, [sp, #0]
 8005b88:	6163      	str	r3, [r4, #20]
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	6120      	str	r0, [r4, #16]
 8005b8e:	b15b      	cbz	r3, 8005ba8 <__smakebuf_r+0x74>
 8005b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f93d 	bl	8005e14 <_isatty_r>
 8005b9a:	b128      	cbz	r0, 8005ba8 <__smakebuf_r+0x74>
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	431d      	orrs	r5, r3
 8005bac:	81a5      	strh	r5, [r4, #12]
 8005bae:	e7cd      	b.n	8005b4c <__smakebuf_r+0x18>
 8005bb0:	080059a1 	.word	0x080059a1

08005bb4 <_free_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	d045      	beq.n	8005c48 <_free_r+0x94>
 8005bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc0:	1f0c      	subs	r4, r1, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfb8      	it	lt
 8005bc6:	18e4      	addlt	r4, r4, r3
 8005bc8:	f000 f946 	bl	8005e58 <__malloc_lock>
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <_free_r+0x98>)
 8005bce:	6813      	ldr	r3, [r2, #0]
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	b933      	cbnz	r3, 8005be2 <_free_r+0x2e>
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	6014      	str	r4, [r2, #0]
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bde:	f000 b93c 	b.w	8005e5a <__malloc_unlock>
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	d90c      	bls.n	8005c00 <_free_r+0x4c>
 8005be6:	6821      	ldr	r1, [r4, #0]
 8005be8:	1862      	adds	r2, r4, r1
 8005bea:	4293      	cmp	r3, r2
 8005bec:	bf04      	itt	eq
 8005bee:	681a      	ldreq	r2, [r3, #0]
 8005bf0:	685b      	ldreq	r3, [r3, #4]
 8005bf2:	6063      	str	r3, [r4, #4]
 8005bf4:	bf04      	itt	eq
 8005bf6:	1852      	addeq	r2, r2, r1
 8005bf8:	6022      	streq	r2, [r4, #0]
 8005bfa:	6004      	str	r4, [r0, #0]
 8005bfc:	e7ec      	b.n	8005bd8 <_free_r+0x24>
 8005bfe:	4613      	mov	r3, r2
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	b10a      	cbz	r2, 8005c08 <_free_r+0x54>
 8005c04:	42a2      	cmp	r2, r4
 8005c06:	d9fa      	bls.n	8005bfe <_free_r+0x4a>
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	1858      	adds	r0, r3, r1
 8005c0c:	42a0      	cmp	r0, r4
 8005c0e:	d10b      	bne.n	8005c28 <_free_r+0x74>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	4401      	add	r1, r0
 8005c14:	1858      	adds	r0, r3, r1
 8005c16:	4282      	cmp	r2, r0
 8005c18:	6019      	str	r1, [r3, #0]
 8005c1a:	d1dd      	bne.n	8005bd8 <_free_r+0x24>
 8005c1c:	6810      	ldr	r0, [r2, #0]
 8005c1e:	6852      	ldr	r2, [r2, #4]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	4401      	add	r1, r0
 8005c24:	6019      	str	r1, [r3, #0]
 8005c26:	e7d7      	b.n	8005bd8 <_free_r+0x24>
 8005c28:	d902      	bls.n	8005c30 <_free_r+0x7c>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	e7d3      	b.n	8005bd8 <_free_r+0x24>
 8005c30:	6820      	ldr	r0, [r4, #0]
 8005c32:	1821      	adds	r1, r4, r0
 8005c34:	428a      	cmp	r2, r1
 8005c36:	bf04      	itt	eq
 8005c38:	6811      	ldreq	r1, [r2, #0]
 8005c3a:	6852      	ldreq	r2, [r2, #4]
 8005c3c:	6062      	str	r2, [r4, #4]
 8005c3e:	bf04      	itt	eq
 8005c40:	1809      	addeq	r1, r1, r0
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	605c      	str	r4, [r3, #4]
 8005c46:	e7c7      	b.n	8005bd8 <_free_r+0x24>
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200000a0 	.word	0x200000a0

08005c50 <_malloc_r>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	1ccd      	adds	r5, r1, #3
 8005c54:	f025 0503 	bic.w	r5, r5, #3
 8005c58:	3508      	adds	r5, #8
 8005c5a:	2d0c      	cmp	r5, #12
 8005c5c:	bf38      	it	cc
 8005c5e:	250c      	movcc	r5, #12
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	4606      	mov	r6, r0
 8005c64:	db01      	blt.n	8005c6a <_malloc_r+0x1a>
 8005c66:	42a9      	cmp	r1, r5
 8005c68:	d903      	bls.n	8005c72 <_malloc_r+0x22>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	2000      	movs	r0, #0
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
 8005c72:	f000 f8f1 	bl	8005e58 <__malloc_lock>
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <_malloc_r+0xac>)
 8005c78:	6814      	ldr	r4, [r2, #0]
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	b991      	cbnz	r1, 8005ca4 <_malloc_r+0x54>
 8005c7e:	4c20      	ldr	r4, [pc, #128]	; (8005d00 <_malloc_r+0xb0>)
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	b91b      	cbnz	r3, 8005c8c <_malloc_r+0x3c>
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 f83d 	bl	8005d04 <_sbrk_r>
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 f838 	bl	8005d04 <_sbrk_r>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d124      	bne.n	8005ce2 <_malloc_r+0x92>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	6033      	str	r3, [r6, #0]
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f000 f8dc 	bl	8005e5a <__malloc_unlock>
 8005ca2:	e7e4      	b.n	8005c6e <_malloc_r+0x1e>
 8005ca4:	680b      	ldr	r3, [r1, #0]
 8005ca6:	1b5b      	subs	r3, r3, r5
 8005ca8:	d418      	bmi.n	8005cdc <_malloc_r+0x8c>
 8005caa:	2b0b      	cmp	r3, #11
 8005cac:	d90f      	bls.n	8005cce <_malloc_r+0x7e>
 8005cae:	600b      	str	r3, [r1, #0]
 8005cb0:	50cd      	str	r5, [r1, r3]
 8005cb2:	18cc      	adds	r4, r1, r3
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 f8d0 	bl	8005e5a <__malloc_unlock>
 8005cba:	f104 000b 	add.w	r0, r4, #11
 8005cbe:	1d23      	adds	r3, r4, #4
 8005cc0:	f020 0007 	bic.w	r0, r0, #7
 8005cc4:	1ac3      	subs	r3, r0, r3
 8005cc6:	d0d3      	beq.n	8005c70 <_malloc_r+0x20>
 8005cc8:	425a      	negs	r2, r3
 8005cca:	50e2      	str	r2, [r4, r3]
 8005ccc:	e7d0      	b.n	8005c70 <_malloc_r+0x20>
 8005cce:	428c      	cmp	r4, r1
 8005cd0:	684b      	ldr	r3, [r1, #4]
 8005cd2:	bf16      	itet	ne
 8005cd4:	6063      	strne	r3, [r4, #4]
 8005cd6:	6013      	streq	r3, [r2, #0]
 8005cd8:	460c      	movne	r4, r1
 8005cda:	e7eb      	b.n	8005cb4 <_malloc_r+0x64>
 8005cdc:	460c      	mov	r4, r1
 8005cde:	6849      	ldr	r1, [r1, #4]
 8005ce0:	e7cc      	b.n	8005c7c <_malloc_r+0x2c>
 8005ce2:	1cc4      	adds	r4, r0, #3
 8005ce4:	f024 0403 	bic.w	r4, r4, #3
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	d005      	beq.n	8005cf8 <_malloc_r+0xa8>
 8005cec:	1a21      	subs	r1, r4, r0
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f000 f808 	bl	8005d04 <_sbrk_r>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d0cf      	beq.n	8005c98 <_malloc_r+0x48>
 8005cf8:	6025      	str	r5, [r4, #0]
 8005cfa:	e7db      	b.n	8005cb4 <_malloc_r+0x64>
 8005cfc:	200000a0 	.word	0x200000a0
 8005d00:	200000a4 	.word	0x200000a4

08005d04 <_sbrk_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4c06      	ldr	r4, [pc, #24]	; (8005d20 <_sbrk_r+0x1c>)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	f7fb f9de 	bl	80010d0 <_sbrk>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_sbrk_r+0x1a>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_sbrk_r+0x1a>
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20002314 	.word	0x20002314

08005d24 <__sread>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	460c      	mov	r4, r1
 8005d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2c:	f000 f896 	bl	8005e5c <_read_r>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	bfab      	itete	ge
 8005d34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d36:	89a3      	ldrhlt	r3, [r4, #12]
 8005d38:	181b      	addge	r3, r3, r0
 8005d3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d3e:	bfac      	ite	ge
 8005d40:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d42:	81a3      	strhlt	r3, [r4, #12]
 8005d44:	bd10      	pop	{r4, pc}

08005d46 <__swrite>:
 8005d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	898b      	ldrh	r3, [r1, #12]
 8005d4e:	05db      	lsls	r3, r3, #23
 8005d50:	4605      	mov	r5, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	4616      	mov	r6, r2
 8005d56:	d505      	bpl.n	8005d64 <__swrite+0x1e>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	f000 f868 	bl	8005e34 <_lseek_r>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	4632      	mov	r2, r6
 8005d72:	463b      	mov	r3, r7
 8005d74:	4628      	mov	r0, r5
 8005d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7a:	f000 b817 	b.w	8005dac <_write_r>

08005d7e <__sseek>:
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	460c      	mov	r4, r1
 8005d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d86:	f000 f855 	bl	8005e34 <_lseek_r>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	bf15      	itete	ne
 8005d90:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d9a:	81a3      	strheq	r3, [r4, #12]
 8005d9c:	bf18      	it	ne
 8005d9e:	81a3      	strhne	r3, [r4, #12]
 8005da0:	bd10      	pop	{r4, pc}

08005da2 <__sclose>:
 8005da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da6:	f000 b813 	b.w	8005dd0 <_close_r>
	...

08005dac <_write_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4c07      	ldr	r4, [pc, #28]	; (8005dcc <_write_r+0x20>)
 8005db0:	4605      	mov	r5, r0
 8005db2:	4608      	mov	r0, r1
 8005db4:	4611      	mov	r1, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f7fb f937 	bl	800102e <_write>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_write_r+0x1e>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_write_r+0x1e>
 8005dc8:	602b      	str	r3, [r5, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20002314 	.word	0x20002314

08005dd0 <_close_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4c06      	ldr	r4, [pc, #24]	; (8005dec <_close_r+0x1c>)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	f7fb f943 	bl	8001066 <_close>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_close_r+0x1a>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_close_r+0x1a>
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20002314 	.word	0x20002314

08005df0 <_fstat_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4c07      	ldr	r4, [pc, #28]	; (8005e10 <_fstat_r+0x20>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	4605      	mov	r5, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	f7fb f93e 	bl	800107e <_fstat>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d102      	bne.n	8005e0c <_fstat_r+0x1c>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	b103      	cbz	r3, 8005e0c <_fstat_r+0x1c>
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	20002314 	.word	0x20002314

08005e14 <_isatty_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4c06      	ldr	r4, [pc, #24]	; (8005e30 <_isatty_r+0x1c>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	f7fb f93d 	bl	800109e <_isatty>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_isatty_r+0x1a>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_isatty_r+0x1a>
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20002314 	.word	0x20002314

08005e34 <_lseek_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4c07      	ldr	r4, [pc, #28]	; (8005e54 <_lseek_r+0x20>)
 8005e38:	4605      	mov	r5, r0
 8005e3a:	4608      	mov	r0, r1
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	6022      	str	r2, [r4, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f7fb f936 	bl	80010b4 <_lseek>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_lseek_r+0x1e>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_lseek_r+0x1e>
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20002314 	.word	0x20002314

08005e58 <__malloc_lock>:
 8005e58:	4770      	bx	lr

08005e5a <__malloc_unlock>:
 8005e5a:	4770      	bx	lr

08005e5c <_read_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4c07      	ldr	r4, [pc, #28]	; (8005e7c <_read_r+0x20>)
 8005e60:	4605      	mov	r5, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	6022      	str	r2, [r4, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fb f8c2 	bl	8000ff4 <_read>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_read_r+0x1e>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_read_r+0x1e>
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20002314 	.word	0x20002314

08005e80 <_init>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr

08005e8c <_fini>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr
